#Область ФайлыDBF

Функция Создать_SALE_ФайлDBF(ИмяФайла, НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт		
	НачДня = ?(НачалоПериода = Неопределено, 	НачалоДня(ТекущаяДата()), НачалоПериода);
	КонДня = ?(КонецПериода = Неопределено, 	КонецДня(ТекущаяДата()),  КонецПериода);
	
	ВидОперации = Новый СписокЗначений;
	ВидОперации.Добавить(Перечисления.ВидыОперацийЧекККМ.Продажа);
	ВидОперации.Добавить(Перечисления.ВидыОперацийЧекККМ.Возврат);	
	
	Если СтрНайти(ИмяФайла, "NoCheck")<>0 Тогда 
		СостояниеЧека = Новый СписокЗначений;
		СостояниеЧека.Добавить(Перечисления.СостояниеЧека.Аварийный_НеПробитПоФР);
		СостояниеЧека.Добавить(Перечисления.СостояниеЧека.Аварийный_ЧастичноПробитПоФР);		
		//Мулько 04.11.2019
		СостояниеЧека.Добавить(Перечисления.СостояниеЧека.Аварийный_ПробитТерминалНеПробитПоФР);
		СостояниеЧека.Добавить(Перечисления.СостояниеЧека.Аварийный_АннулированПоТерминалу);
	Иначе 	
		СостояниеЧека = Новый СписокЗначений;
		СостояниеЧека.Добавить(Перечисления.СостояниеЧека.Закрыт);
		СостояниеЧека.Добавить(Перечисления.СостояниеЧека.Аварийный_ПробитПоФР);
	КонецЕсли;	
	
	ЗапросПС = Новый Запрос;
	ЗапросПС.Текст =	"ВЫБРАТЬ
   				 	|	ЧекККМТЧ_ДвиженияПС.НомерСтроки,
   				 	|	ЧекККМТЧ_ДвиженияПС.СтатусПС,
   				 	|	ЧекККМТЧ_ДвиженияПС.ШК_ПС,
   				 	|	ЧекККМТЧ_ДвиженияПС.НоминалПС,
   				 	|	ЧекККМТЧ_ДвиженияПС.ЭлектронныйПС,
   				 	|	ЧекККМТЧ_ДвиженияПС.ИнфоКарта_ШК,
   				 	|	ЧекККМТЧ_ДвиженияПС.Ссылка.НомерZОтчета,
   				 	|	ЧекККМТЧ_ДвиженияПС.Ссылка.НомерЧекаККМ,
   				 	|	ЧекККМТЧ_ДвиженияПС.Ссылка.КассаККМ,
   				 	|	ЧекККМТЧ_ДвиженияПС.Ссылка.Дата
   				 	|ИЗ
   				 	|	Документ.ЧекККМ.ТЧ_ДвиженияПС КАК ЧекККМТЧ_ДвиженияПС
   				 	|ГДЕ
   				 	|	ЧекККМТЧ_ДвиженияПС.Ссылка.Проведен
   				 	|	И ЧекККМТЧ_ДвиженияПС.Ссылка.СостояниеЧекаККМ В(&СостояниеЧекаККМ)
   				 	|	И ЧекККМТЧ_ДвиженияПС.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
   				 	|	И ЧекККМТЧ_ДвиженияПС.СтатусПС = &СтатусПС";
	
	ЗапросПС.УстановитьПараметр("НачалоПериода", 		НачДня);
	ЗапросПС.УстановитьПараметр("КонецПериода", 		КонДня);
	ЗапросПС.УстановитьПараметр("СостояниеЧекаККМ", 	СостояниеЧека);	 
	ЗапросПС.УстановитьПараметр("СтатусПС", 			"Отоварен");
	ТЗ_ПС																	= ЗапросПС.Выполнить().Выгрузить();
	ТЗ_ПС.Колонки.Добавить("ШК_ВыгруженSALE", Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	              	|	ЧекККМТЧ_Товары.НомерСтроки,
	              	|	ЧекККМТЧ_Товары.ВидОперации,
	              	|	ЧекККМТЧ_Товары.Код,
	              	|	ЧекККМТЧ_Товары.ШК,
	              	|	ЧекККМТЧ_Товары.Наименование,
	              	|	ЧекККМТЧ_Товары.СтавкаНДС,
	              	|	ЧекККМТЧ_Товары.Количество,
	              	|	ЧекККМТЧ_Товары.Цена,
	              	|	ЧекККМТЧ_Товары.Сумма,
	              	|	ЧекККМТЧ_Товары.СкидкаСумма,
	              	|	ЧекККМТЧ_Товары.СкидкаБК,
	              	|	ЧекККМТЧ_Товары.Ответственный,
	              	|	ЧекККМТЧ_Товары.Ссылка.Дата КАК Дата,
	              	|	ЧекККМТЧ_Товары.Ссылка.СуммаОплаты_Нал КАК СуммаОплаты_Нал,
	              	|	ЧекККМТЧ_Товары.Ссылка.СуммаОплаты_БезНал КАК СуммаОплаты_БезНал,
	              	|	ЧекККМТЧ_Товары.Ссылка.СуммаОплаты_ПС КАК СуммаОплаты_ПС,
	              	|	ЧекККМТЧ_Товары.Ссылка.СуммаОплаты_Ваучер КАК СуммаОплаты_Ваучер,
	              	|	ЧекККМТЧ_Товары.Ссылка.СуммаПоЧекуККМ КАК СуммаПоЧекуККМ,
	              	|	ЧекККМТЧ_Товары.Ссылка.НомерЧекаККМ КАК НомерЧекаККМ,
	              	|	ЧекККМТЧ_Товары.Ссылка.НомерZОтчета КАК НомерZОтчета,
	              	|	ЧекККМТЧ_Товары.Ссылка.КассаККМ КАК КассаККМ,
	              	|	ЧекККМТЧ_Товары.Ссылка.Кассир КАК Кассир,
	              	|	ЧекККМТЧ_Товары.Ссылка КАК СсылкаЧекККМ,
	              	|	ЧекККМТЧ_Товары.Ссылка.СостояниеЧекаККМ КАК СостояниеЧекаККМ,
	              	|	ЧекККМ_Возврат.Дата КАК ДатаВозврата
	              	|ПОМЕСТИТЬ ВТ_Товары
	              	|ИЗ
	              	|	Документ.ЧекККМ.ТЧ_Товары КАК ЧекККМТЧ_Товары
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ_Возврат
	              	|		ПО ЧекККМТЧ_Товары.Ссылка.Возврат_НомерЧекаККМ = ЧекККМ_Возврат.НомерЧекаККМ
	              	|			И ЧекККМТЧ_Товары.Ссылка.Дата >= ЧекККМ_Возврат.Дата
	              	|ГДЕ
	              	|	ЧекККМТЧ_Товары.Ссылка.Проведен
	              	|	И ЧекККМТЧ_Товары.Ссылка.СостояниеЧекаККМ В(&СостояниеЧекаККМ)
	              	|	И ЧекККМТЧ_Товары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	              	|	И ЧекККМТЧ_Товары.ВидОперации В(&ВидОперации)
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ЧекККМТЧ_ЖурналСкидок.Ссылка,
	              	|	ЧекККМТЧ_ЖурналСкидок.НомСтрокиЧекаККМ,
	              	|	ЧекККМТЧ_ЖурналСкидок.Код,
	              	|	ЧекККМТЧ_ЖурналСкидок.Количество,
	              	|	ЧекККМТЧ_ЖурналСкидок.Цена,
	              	|	ЧекККМТЧ_ЖурналСкидок.СкидкаСумма,
	              	|	ЧекККМТЧ_ЖурналСкидок.ТипАкции,
	              	|	ЧекККМТЧ_ЖурналСкидок.НомерАкции,
	              	|	ЧекККМТЧ_ЖурналСкидок.ШК_Акции
	              	|ПОМЕСТИТЬ ВТ_ЖурналПродаж
	              	|ИЗ
	              	|	Документ.ЧекККМ.ТЧ_ЖурналСкидок КАК ЧекККМТЧ_ЖурналСкидок
	              	|ГДЕ
	              	|	(ЧекККМТЧ_ЖурналСкидок.ТипАкции = ""ДКД""
	              	|			ИЛИ ЧекККМТЧ_ЖурналСкидок.ТипАкции = ""ДКО"")
	              	|	И ЧекККМТЧ_ЖурналСкидок.Ссылка.Проведен
	              	|	И ЧекККМТЧ_ЖурналСкидок.Ссылка.СостояниеЧекаККМ В(&СостояниеЧекаККМ)
	              	|	И ЧекККМТЧ_ЖурналСкидок.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ВТ_Товары.НомерСтроки,
	              	|	ВТ_Товары.ВидОперации,
	              	|	ВТ_Товары.Код,
	              	|	ВТ_Товары.ШК,
	              	|	ВТ_Товары.Наименование,
	              	|	ВТ_Товары.СтавкаНДС,
	              	|	ВТ_Товары.Количество,
	              	|	ВТ_Товары.Цена,
	              	|	ВТ_Товары.Сумма,
	              	|	ВТ_Товары.СкидкаСумма,
	              	|	ВТ_Товары.СкидкаБК,
	              	|	ВТ_Товары.Ответственный,
	              	|	ВТ_Товары.Дата,
	              	|	ВТ_Товары.СуммаОплаты_Нал,
	              	|	ВТ_Товары.СуммаОплаты_БезНал,
	              	|	ВТ_Товары.СуммаОплаты_ПС,
	              	|	ВТ_Товары.СуммаОплаты_Ваучер,
	              	|	ВТ_Товары.СуммаПоЧекуККМ,
	              	|	ВТ_Товары.НомерЧекаККМ,
	              	|	ВТ_Товары.НомерZОтчета,
	              	|	ВТ_Товары.КассаККМ,
	              	|	ВТ_Товары.Кассир,
	              	|	ВТ_Товары.СсылкаЧекККМ,
	              	|	ВТ_Товары.СостояниеЧекаККМ,
	              	|	ВЫБОР
	              	|		КОГДА ВТ_ЖурналПродаж.ТипАкции = ""ДКО""
	              	|			ТОГДА ВТ_ЖурналПродаж.ШК_Акции
	              	|		ИНАЧЕ """"
	              	|	КОНЕЦ КАК ШК_ДКО,
	              	|	ВЫБОР
	              	|		КОГДА ВТ_ЖурналПродаж.ТипАкции = ""ДКД""
	              	|			ТОГДА ВТ_ЖурналПродаж.ШК_Акции
	              	|		ИНАЧЕ """"
	              	|	КОНЕЦ КАК ШК_ДКД,
	              	|	ВТ_Товары.ДатаВозврата
	              	|ИЗ
	              	|	ВТ_Товары КАК ВТ_Товары
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЖурналПродаж КАК ВТ_ЖурналПродаж
	              	|		ПО ВТ_Товары.СсылкаЧекККМ = ВТ_ЖурналПродаж.Ссылка
	              	|			И ВТ_Товары.НомерСтроки = ВТ_ЖурналПродаж.НомСтрокиЧекаККМ";
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачДня);
	Запрос.УстановитьПараметр("КонецПериода", 		КонДня);
	Запрос.УстановитьПараметр("СостояниеЧекаККМ", 	СостояниеЧека);	
	Запрос.УстановитьПараметр("ВидОперации", 		ВидОперации);	
	ТЗ = Запрос.Выполнить().Выбрать();
	
	Если ТЗ.Количество() = 0 тогда
		Если СтрНайти(ИмяФайла, "Sale") <> 0 Тогда
			Предупреждение("Продаж за период (с " + Формат(НачДня,"ДЛФ=DT") +" по " + Формат(КонДня,"ДЛФ=DT") + ") в регистре НЕТ! Файл-продаж формироваться НЕ БУДЕТ !!!");
		КонецЕсли;	
		Возврат "";
	КонецЕсли;		
	
	ВидПродажа = Перечисления.ВидыОперацийЧекККМ.Продажа;
	
	ИмяФайлаDBF = "Sale.DBF";
	//Мулько 07.02.2020
	//СоздатьПустойФайлДБФ("\Salelist.txt",ИмяФайлаDBF);
	СоздатьПустойФайлДБФИзМакета(ИмяФайлаDBF);
	
	ДБФ = Новый XBase;
	ДБФ.ОткрытьФайл(глПуть + ИмяФайлаDBF);
	ДБФ.ОчиститьФайл();
		
	ТЗ.Сбросить();
	Пока ТЗ.Следующий() Цикл 
		
		дбф.Добавить();
		дбф.DATE		= ТЗ.Дата;
		дбф.TIME		= Формат(ТЗ.Дата, "ДФ=HHmmss");
        		
		дбф.OPER		= ?(ТЗ.ВидОперации=ВидПродажа, 2, 1);
		дбф.RET			= ?(ТЗ.ВидОперации=ВидПродажа, 0, 1);
		
		дбф.CODE		= ТЗ.Код;
		
		Если ОбщегоНазначения.ЭтоПодарочныйСертификат(дбф.CODE) Тогда
			ДБФ.BAR	= ТЗ.Код; //Если ПС то нужно выгружать КОД
		Иначе 
			ДБФ.BAR	= ТЗ.ШК; 		
		КонецЕсли;

		дбф.WEIGHT		= ТЗ.Количество;
		
		дбф.PRICE		= ТЗ.Цена;
        дбф.DISC		= ТЗ.СкидкаСумма + ТЗ.СкидкаБК;
			
		дбф.RECSUM		= ?(ТЗ.ВидОперации=ВидПродажа, 	ТЗ.СуммаПоЧекуККМ, -ТЗ.СуммаПоЧекуККМ);
		дбф.PAYMENT		= 0;
		дбф.PAYSUM		= ?(ТЗ.ВидОперации=ВидПродажа,	ТЗ.СуммаПоЧекуККМ, -ТЗ.СуммаПоЧекуККМ);//тз.СуммаПоЧеку;
		дбф.PAYMENT1	= 0;
		дбф.PAYSUM1 	= 0;
		дбф.PAYMENT2 	= 0;
		дбф.PAYSUM2		= 0;
		дбф.OPT_FLAG	= 0;
		дбф.OPT_DISC	= 0;
		дбф.DEP			= 1;
		дбф.CLERK		= 1;	
		дбф.REC			= ТЗ.НомерЧекаККМ;
		дбф.Z			= ТЗ.НомерZОтчета;
		
		Если ТЗ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
			дбф.NALOG	= 1;
		ИначеЕсли ТЗ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда 	                              
			дбф.NALOG	= 2;
		ИначеЕсли ТЗ.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда 	
			дбф.NALOG	= 3;
		ИначеЕсли ТЗ.СтавкаНДС = Перечисления.СтавкиНДС.Акциз5_НДС20 Тогда 	
			дбф.NALOG	= 4;			
		Иначе
			Попытка
				НаборРС = РегистрыСведений.Прайс.СоздатьНаборЗаписей();
				НаборРС.Отбор.CODE.Установить(ТЗ.Код);
				НаборРС.Прочитать();
				Если НаборРС.Количество()>0 Тогда 
					дбф.NALOG = НаборРС[0].NALOG;	
				КонецЕсли;	
			Исключение
			КонецПопытки;	
		КонецЕсли;	
				
		дбф.KASSA		= ?(ТЗ.КассаККМ.Пустая(), Прав(Константы.осн_КассаККМ.Получить().Код, 2) ,Прав(ТЗ.КассаККМ.Код, 2));	
		дбф.KASSIR		= 1;
		дбф.PARTNO		= СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТЗ.Кассир,"і","i") ,"І","I") ,"ї","_") ,"Ї","_");
		
		дбф.FREESALE	= 0;
		дбф.GR_DISC		= 0;
		
		POS_Терминал	= Константы.ТО_POSтерминал_ВидОбработки.Получить();
		Если POS_Терминал = 1 Тогда
			POS_Терминал = "ПРИВАТ";	
		ИначеЕсли POS_Терминал = 2 Тогда
			POS_Терминал = "ПУМБ";
		ИначеЕсли POS_Терминал = 3 Тогда
			POS_Терминал = "ОЩАД";
		Иначе
			POS_Терминал = "БезНал;";	
		КонецЕсли;
		
		дбф.PLAT_TEL	= ?(ТЗ.СуммаОплаты_Нал>0, "Нал;", POS_Терминал);
		
		дбф.CARD		= Сред(ТЗ.ШК_ДКО,4,8);	
		дбф.TIME_ECR	= Сред(ТЗ.ШК_ДКД,4,8);
		
		ДБФ.PLAT_TRN	= Прав(СокрЛП(ТЗ.СостояниеЧекаККМ), СтрДлина(ТЗ.СостояниеЧекаККМ)-Найти(СокрЛП(ТЗ.СостояниеЧекаККМ), "_"));
		
		дбф.RETDATE		= ?(ТЗ.ВидОперации=ВидПродажа, Дата(1, 1, 1, 0, 0, 0), ТЗ.ДатаВозврата);
		
		Массив_ОтоваренныеПС = ТЗ_ПС.НайтиСтроки(Новый  Структура("НомерЧекаККМ, Дата", ТЗ.НомерЧекаККМ, ТЗ.Дата));
		Если Массив_ОтоваренныеПС.Количество()>0 Тогда
			Строки_ПомощьПоЧеку				= ТЗ_ПС.НайтиСтроки(Новый  Структура("НомерЧекаККМ, Дата, ИнфоКарта_ШК", ТЗ.НомерЧекаККМ, ТЗ.Дата, "1112222222200"));
			ПерваяСтрокаТЧ_ОтоваренныеПС 	= ?(Строки_ПомощьПоЧеку.Количество()=0, Массив_ОтоваренныеПС[0], Строки_ПомощьПоЧеку[0]);
			
			дбф.CARD_S  = Сред(ПерваяСтрокаТЧ_ОтоваренныеПС.ИнфоКарта_ШК,4,8);
			дбф.BONUS_SUM = ТЗ.СуммаОплаты_Ваучер;
			
			ПерваяСтрокаТЧ_ОтоваренныеПС.ШК_ВыгруженSALE = Истина;
		КонецЕсли;	
		дбф.Записать();		
	КонецЦикла;
	
	// добиываем SALE пустыми строками с ОТВАРЕННЫМИ ПС
	Для Каждого СтрокаТЧ Из ТЗ_ПС Цикл
		Если СтрокаТЧ.ШК_ВыгруженSALE Тогда 								Продолжить;			КонецЕсли;	
		дбф.Добавить();

		дбф.DATE 	= СтрокаТЧ.Дата;
		дбф.TIME	= Формат(СтрокаТЧ.Дата, "ДФ=HHmmss");
		                                                               	
		//дбф.OPER    														= 2;
		//дбф.RET      														= 0;

		дбф.REC		= СтрокаТЧ.НомерЧекаККМ;
		дбф.Z		= СтрокаТЧ.НомерZОтчета;
		дбф.KASSA	= ?(СтрокаТЧ.КассаККМ.Пустая(), Прав(Константы.осн_КассаККМ.Получить().Код, 2) ,Прав(СтрокаТЧ.КассаККМ.Код, 2));
		
		дбф.CARD_S	= Сред(СтрокаТЧ.ИнфоКарта_ШК,4,8);
		дбф.Записать();
	КонецЦикла; 
	
	дбф.ЗакрытьФайл();
	ДБФ = Null; 
			
	КопироватьФайл(глПуть + ИмяФайлаDBF, глПуть + ИмяФайла);
	   				
	Попытка 
		УдалитьФайлы(глПуть+ИмяФайлаDBF); 
	Исключение 
	КонецПопытки; 
	
	СоздатьПустойФайлПродаж(); //17.12.12 Заново создаем пустой файл продаж
	
	Возврат ИмяФайла;
	
КонецФункции

Функция Создать_а_SALE_ФайлDBF(ИмяФайла, НачалоПериода = Неопределено, КонецПериода = Неопределено) экспорт		
	
	СостояниеЧека															= Новый СписокЗначений;
	СостояниеЧека.Добавить(Перечисления.СостояниеЧека.Закрыт);
	СостояниеЧека.Добавить(Перечисления.СостояниеЧека.Аварийный_ПробитПоФР);
	
	
	ВидОперации																= Новый СписокЗначений;
	ВидОперации.Добавить(Перечисления.ВидыОперацийЧекККМ.Аннуляция);
	ВидОперации.Добавить(Перечисления.ВидыОперацийЧекККМ.Аннуляция_ТестАкций);	
	
	
	Запрос 																	= Новый Запрос;
	Запрос.Текст 															=	"ВЫБРАТЬ
	             															 	|	ЧекККМТЧ_Товары.НомерСтроки,
	             															 	|	ЧекККМТЧ_Товары.ВидОперации,
	             															 	|	ЧекККМТЧ_Товары.Код,
	             															 	|	ЧекККМТЧ_Товары.ШК,
	             															 	|	ЧекККМТЧ_Товары.Наименование,
	             															 	|	ЧекККМТЧ_Товары.СтавкаНДС,
	             															 	|	ЧекККМТЧ_Товары.Количество,
	             															 	|	ЧекККМТЧ_Товары.Цена,
	             															 	|	ЧекККМТЧ_Товары.Сумма,
	             															 	|	ЧекККМТЧ_Товары.СкидкаСумма,
	             															 	|	ЧекККМТЧ_Товары.СкидкаБК,
	             															 	|	ЧекККМТЧ_Товары.Ответственный,
	             															 	|	ЧекККМТЧ_Товары.Ссылка.Дата КАК Дата,
	             															 	|	ЧекККМТЧ_Товары.Ссылка.СуммаОплаты_Нал КАК СуммаОплаты_Нал,
	             															 	|	ЧекККМТЧ_Товары.Ссылка.СуммаОплаты_БезНал КАК СуммаОплаты_БезНал,
	             															 	|	ЧекККМТЧ_Товары.Ссылка.СуммаОплаты_ПС КАК СуммаОплаты_ПС,
	             															 	|	ЧекККМТЧ_Товары.Ссылка.СуммаОплаты_Ваучер КАК СуммаОплаты_Ваучер,
	             															 	|	ЧекККМТЧ_Товары.Ссылка.СуммаПоЧекуККМ КАК СуммаПоЧекуККМ,
	             															 	|	ЧекККМТЧ_Товары.Ссылка.НомерЧекаККМ КАК НомерЧекаККМ,
	             															 	|	ЧекККМТЧ_Товары.Ссылка.НомерZОтчета КАК НомерZОтчета,
	             															 	|	ЧекККМТЧ_Товары.Ссылка.КассаККМ КАК КассаККМ,
	             															 	|	ЧекККМТЧ_Товары.Ссылка.Кассир КАК Кассир,
	             															 	|	ЧекККМТЧ_Товары.Ссылка КАК СсылкаЧекККМ,
	             															 	|	ЧекККМТЧ_Товары.Ссылка.СостояниеЧекаККМ КАК СостояниеЧекаККМ 
	             															 	|ИЗ
	             															 	|	Документ.ЧекККМ.ТЧ_Товары КАК ЧекККМТЧ_Товары
	             															 	|ГДЕ
	             															 	|	ЧекККМТЧ_Товары.Ссылка.Проведен
	             															 	|	И ЧекККМТЧ_Товары.Ссылка.СостояниеЧекаККМ В(&СостояниеЧекаККМ)
	             															 	|	И ЧекККМТЧ_Товары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	             															 	|	И ЧекККМТЧ_Товары.ВидОперации В(&ВидОперации)";
						
				
						
	НачДня 																	= ?(НачалоПериода = Неопределено, 	НачалоДня(ТекущаяДата()), НачалоПериода);
	КонДня 																	= ?(КонецПериода = Неопределено, 	КонецДня(ТекущаяДата()),  КонецПериода);

	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачДня);
	Запрос.УстановитьПараметр("КонецПериода", 		КонДня);
	Запрос.УстановитьПараметр("СостояниеЧекаККМ", 	СостояниеЧека);	
	Запрос.УстановитьПараметр("ВидОперации", 		ВидОперации);	
	ТЗ 																		= Запрос.Выполнить().Выбрать();

	
	Если ТЗ.Количество()=0 тогда
		Возврат "";
	КонецЕсли;		
	
	ВидПродажа 																= Перечисления.ВидыОперацийЧекККМ.Продажа;
	
	ИмяФайлаDBF 															= "Sale.DBF";
	//СоздатьПустойФайлДБФ("\Salelist.txt",ИмяФайлаDBF);
	СоздатьПустойФайлДБФИзМакета(ИмяФайлаDBF);
	
	ДБФ 																	= Новый XBase;
	ДБФ.ОткрытьФайл(глПуть+ИмяФайлаDBF);
	ДБФ.ОчиститьФайл();
		
	ТЗ.Сбросить();
	Пока ТЗ.Следующий() Цикл 
		
		дбф.Добавить();
		дбф.DATE 															= ТЗ.Дата;
		дбф.TIME     														= Формат(ТЗ.Дата, "ДФ=HHmmss");
        		
		дбф.OPER    														= ?(ТЗ.ВидОперации=ВидПродажа, 2, 1);
		дбф.RET      														= ?(ТЗ.ВидОперации=ВидПродажа, 0, 1);
		
		дбф.CODE     														= ТЗ.Код;
		
		Если ОбщегоНазначения.ЭтоПодарочныйСертификат(ТЗ.Код) Тогда
		
			ДБФ.BAR    														= ТЗ.Код; //Если ПС то нужно выгружать КОД
		Иначе 
			ДБФ.BAR    														= ТЗ.ШК; 		
		КонецЕсли;

		дбф.WEIGHT   														= ТЗ.Количество;
		
		дбф.PRICE    														= ТЗ.Цена;
        дбф.DISC     														= ТЗ.СкидкаСумма + ТЗ.СкидкаБК;
			
		дбф.RECSUM   														= ?(ТЗ.ВидОперации=ВидПродажа, 	ТЗ.СуммаПоЧекуККМ, -ТЗ.СуммаПоЧекуККМ);
		дбф.PAYMENT  														= 0;
		дбф.PAYSUM   														= ?(ТЗ.ВидОперации=ВидПродажа,	ТЗ.СуммаПоЧекуККМ, -ТЗ.СуммаПоЧекуККМ);//тз.СуммаПоЧеку;
		дбф.PAYMENT1 														= 0;
		дбф.PAYSUM1  														= 0;
		дбф.PAYMENT2 														= 0;
		дбф.PAYSUM2  														= 0;
		дбф.OPT_FLAG 														= 0;
		дбф.OPT_DISC 														= 0;
		дбф.DEP      														= 1;
		дбф.CLERK    														= 1;	
		дбф.REC      														= ТЗ.НомерЧекаККМ;
		дбф.Z        														= ТЗ.НомерZОтчета;
		
		Если ТЗ.СтавкаНДС=Перечисления.СтавкиНДС.НДС20 Тогда
			дбф.NALOG   													= 1;
		ИначеЕсли ТЗ.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС Тогда 	
			дбф.NALOG   													= 2;
		ИначеЕсли ТЗ.СтавкаНДС=Перечисления.СтавкиНДС.НДС7 Тогда 	
			дбф.NALOG   													= 3;
		ИначеЕсли ТЗ.СтавкаНДС=Перечисления.СтавкиНДС.Акциз5_НДС20 Тогда 	
			дбф.NALOG   													= 4;			
		Иначе 	
			Попытка
				НаборРС														= РегистрыСведений.Прайс.СоздатьНаборЗаписей();
				НаборРС.Отбор.CODE.Установить(ТЗ.Код);
				НаборРС.Прочитать();
				Если НаборРС.Количество()>0 Тогда 
					дбф.NALOG   											= НаборРС[0].NALOG;	
				КонецЕсли;	
			Исключение
			КонецПопытки;	
		КонецЕсли;	
				
		дбф.KASSA    														= ?(ТЗ.КассаККМ.Пустая(), Прав(Константы.осн_КассаККМ.Получить().Код, 2) ,Прав(ТЗ.КассаККМ.Код, 2));	
		дбф.KASSIR	 														= 1;
		дбф.PARTNO															= СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТЗ.Кассир,"і","i") ,"І","I") ,"ї","_") ,"Ї","_");
		
		дбф.Записать();
				
	КонецЦикла;
	
	дбф.ЗакрытьФайл();
	ДБФ 																	= Null; 
	
			
	КопироватьФайл(глПуть + ИмяФайлаDBF, глПуть + ИмяФайла);
	   				
	Попытка 
		УдалитьФайлы(глПуть+ИмяФайлаDBF); 
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	СоздатьПустойФайлПродаж(); //17.12.12 Заново создаем пустой файл продаж
	
	Возврат глПуть+ИмяФайла;
	
КонецФункции

Функция Создать_Z_Sale(СтруктураПараметровКассы) Экспорт
	
	// Создаем *z_Sale_*
	ИмяФайла 		= СтруктураПараметровКассы.КодКассы + "z"+ "_Sale_" + Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+Формат(ТекущаяДата(),"ДФ=ЧЧммсс") +".DBF";
	МаскаДляПоиска 	= СтруктураПараметровКассы.КодКассы + "z"+ "_Sale_" + Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"*.DBF";
	
	Результат = Создать_SALE_ФайлDBF(ИмяФайла, НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));	
	Если НЕ ПустаяСтрока(Результат) тогда
		ПризнакСозданияФайла_Z_Sale = Истина;

		НоваяСтрока 				= ТаблицаСписокФайловНаFTP_VS.Добавить();
		НоваяСтрока.ИмяФайла 		= ИмяФайла;
		НоваяСтрока.МаскаДляПоиска  = МаскаДляПоиска;
		НоваяСтрока.КаталогИсточник = глПуть;
		НоваяСтрока.ИмяКаталога 	= СтруктураПараметровКассы.НомМаг;
    	НоваяСтрока.ИмяПодкаталога 	= "";
  	  	НоваяСтрока.ПерезаписьНаFTP = Ложь;
  	Иначе 
		ПризнакСозданияФайла_Z_Sale = Ложь;
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, "КнопкаZотчетНажатие()", "Файл не создан: " + ИмяФайла, Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");	 	
	КонецЕсли;	
	
	Возврат ПризнакСозданияФайла_Z_Sale;
	
КонецФункции	

Процедура Создать_а_Sale(СтруктураПараметровКассы) Экспорт
	// Создаем *а_Sale_*
	ИмяФайла 		= СтруктураПараметровКассы.КодКассы + "a" + "_Sale_" + Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+ Формат(ТекущаяДата(),"ДФ=ЧЧммсс") +".DBF";
	МаскаДляПоиска 	= СтруктураПараметровКассы.КодКассы + "a" + "_Sale_" + Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"*.DBF";
	
	Результат = Создать_а_SALE_ФайлDBF(ИмяФайла, НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));	
	Если НЕ ПустаяСтрока(Результат) тогда
		НоваяСтрока 				= ТаблицаСписокФайловНаFTP_VS.Добавить();
		НоваяСтрока.ИмяФайла 		= ИмяФайла;
		НоваяСтрока.МаскаДляПоиска 	= МаскаДляПоиска;
		НоваяСтрока.КаталогИсточник = глПуть;
		НоваяСтрока.ИмяКаталога 	= СтруктураПараметровКассы.НомМаг;
    	НоваяСтрока.ИмяПодкаталога 	= "";
    	НоваяСтрока.ПерезаписьНаFTP = Истина;
	Иначе 
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, "КнопкаZотчетНажатие()", "Файл не создан: " + ИмяФайла, Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");	 	
	КонецЕсли;
	
КонецПроцедуры		

Процедура Создать_NoCheck(СтруктураПараметровКассы) Экспорт
	// Создаем *_NoCheck_*
	ИмяФайла 		= СтруктураПараметровКассы.КодКассы+"_NoCheck_"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+ Формат(ТекущаяДата(),"ДФ=ЧЧммсс") +".DBF"; 
	МаскаДляПоиска 	= СтруктураПараметровКассы.КодКассы+"_NoCheck_"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"*.DBF"; 

	Результат = Создать_SALE_ФайлDBF(ИмяФайла, НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));	
	Если НЕ ПустаяСтрока(Результат) тогда
		НоваяСтрока 				= ТаблицаСписокФайловНаFTP_VS.Добавить();
		НоваяСтрока.ИмяФайла 		= ИмяФайла;
		НоваяСтрока.МаскаДляПоиска 	= МаскаДляПоиска;
		НоваяСтрока.КаталогИсточник = глПуть;
		НоваяСтрока.ИмяКаталога 	= СтруктураПараметровКассы.НомМаг;
    	НоваяСтрока.ИмяПодкаталога 	= "";
 		НоваяСтрока.ПерезаписьНаFTP = Истина;	
	Иначе 
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, "КнопкаZотчетНажатие()", "Файл не создан: " + ИмяФайла, Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");	 	
	КонецЕсли;	
	
КонецПроцедуры			

Процедура СоздатьПустойФайлПродаж() Экспорт
	//salelist 	= "\Salelist.txt";  
	//ИмяФайла	= глПуть + Salelist;
	//	  
	//ИзТекстовогоПолучитьСтруктуру(ИмяФайла);
	//СтруктураФайлаПродаж = Новый ТаблицаЗначений;
	//СтруктураФайлаПродаж = СтруктураДБФ.Скопировать();
	//СтруктураДБФ = NULL;
	//ПоСтруктуреСоздатьПродажДБФ(ИмяФайла);
	ИмяФайлаDBF = "Sale.DBF";
	СоздатьПустойФайлДБФИзМакета(ИмяФайлаDBF);
КонецПроцедуры

// VS++ 16.08.2013  // По структуре файла создаем пустой файл "***.dbf" 
//Процедура СоздатьПустойФайлДБФ(ИмяФайлаСтруткураТХТ, ПолноеИмяФайла) Экспорт
//	//ИмяФайла	= глПуть + ИмяФайлаСтруткурыДБФ;
//	ДобавитьПолеДатаВозвратаВSalelist_txt(глПуть + ИмяФайлаСтруткураТХТ);
//	ИзТекстовогоПолучитьСтруктуру(глПуть + ИмяФайлаСтруткураТХТ);
//	СтруктураФайлаПродаж = Новый ТаблицаЗначений;
//	СтруктураФайлаПродаж = СтруктураДБФ.Скопировать();
//	СтруктураДБФ = NULL;
//	
//	ПоСтруктуреСоздатьПродажДБФ(глПуть + ПолноеИмяФайла);
//КонецПроцедуры	

Процедура СоздатьПустойФайлДБФИзМакета(ПолноеИмяФайла) Экспорт
	
	Макет = ПолучитьОбщийМакет("МакетSalelistДБФ");
	ОбластьПолейДБФ = Макет.ПолучитьОбласть("Поля");
	
	СтруктураДБФ = Новый ТаблицаЗначений;
	СтруктураДБФ.Колонки.Добавить("ИмяПоля");
	СтруктураДБФ.Колонки.Добавить("ТипПоля");
	СтруктураДБФ.Колонки.Добавить("ДлнПоля");
	СтруктураДБФ.Колонки.Добавить("ДлнПзпт");
	
	Для НомерСтроки = 2 По ОбластьПолейДБФ.ВысотаТаблицы Цикл
		НоваяСтрокаПоля = СтруктураДБФ.Добавить();
		НоваяСтрокаПоля.ИмяПоля = СокрЛП(ОбластьПолейДБФ.Область("R" + НомерСтроки + "C1").Текст);
		НоваяСтрокаПоля.ТипПоля = СокрЛП(ОбластьПолейДБФ.Область("R" + НомерСтроки + "C2").Текст);
		НоваяСтрокаПоля.ДлнПоля = СокрЛП(ОбластьПолейДБФ.Область("R" + НомерСтроки + "C3").Текст);
		НоваяСтрокаПоля.ДлнПзпт = СокрЛП(ОбластьПолейДБФ.Область("R" + НомерСтроки + "C4").Текст);
	КонецЦикла;
	
	SalelistДБФ = Новый XBase;
	SalelistДБФ.Кодировка = КодировкаXBase.OEM;	
	Для Каждого Элемент Из СтруктураДБФ Цикл
		SalelistДБФ.Поля.Добавить(Элемент.ИмяПоля,?(((Элемент.ТипПоля="C") Или (Элемент.ТипПоля="С")), "S", Элемент.ТипПоля), Элемент.ДлнПоля, Элемент.ДлнПзпт);
	КонецЦикла;
	
	фл = Новый Файл(ПолноеИмяФайла);
	SalelistДБФ.СоздатьФайл(глПуть + ПолноеИмяФайла);
	
	фл 			= Null;
	SalelistДБФ = Null;
	
КонецПроцедуры	
	
Процедура ИзТекстовогоПолучитьСтруктуру(имяфайла) экспорт
Перем тф;

	тф = имяфайла;
	
	СтруктураДБФ = Новый ТаблицаЗначений;
	СтруктураДБФ.Колонки.Добавить("ИмяПоля");
	СтруктураДБФ.Колонки.Добавить("ТипПоля");
	СтруктураДБФ.Колонки.Добавить("ДлнПоля");
	СтруктураДБФ.Колонки.Добавить("ДлнПзпт");
	
	ТекстОписания = Новый ТекстовыйДокумент();
	ТекстОписания.Прочитать(тф);
	Для и1 = 1 По ТекстОписания.КоличествоСтрок() Цикл
		стр = СокрЛП(ТекстОписания.ПолучитьСтроку(и1));
		Если (ПустаяСтрока(стр)) ИЛИ (Лев(стр,2)="//") Тогда Продолжить; КонецЕсли;
		//иначе - строка описания поля
		текстр = стр;
		и2 = 0;
		элс = СтруктураДБФ.Добавить();
		Пока (Найти(текстр,"~") <> 0) И (и2 < 4) Цикл
		   поз = Найти(текстр,"~");
		   элс[и2] = СокрЛП(Лев(текстр,поз-1));
		   текстр = Сред(текстр, поз+1);
		   и2 = и2 + 1;
		КонецЦикла;	
	   
	КонецЦикла;
КонецПроцедуры

//Процедура ПоСтруктуреСоздатьПродажДБФ(ПутьЗаготовкиПродаж) экспорт
//Перем фл, путь;
//	
//	ДисконтДБФ = Новый XBase;
//	ДисконтДБФ.Кодировка = КодировкаXBase.OEM;	
//	Для Каждого элт Из СтруктураФайлаПродаж Цикл
//		ДисконтДБФ.поля.Добавить(элт.ИмяПоля,?(((элт.ТипПоля="C") или (элт.ТипПоля="С")),"S",элт.ТипПоля),элт.ДлнПоля,элт.ДлнПзпт);
//	КонецЦикла;
//	
//	путь = ПутьЗаготовкиПродаж;
//		
//	фл = Новый Файл(путь);
//	
//	ДисконтДБФ.СоздатьФайл(путь);
//	
//	фл 			= Null;
//	ДисконтДБФ  = Null;
//	
//КонецПроцедуры

//Мулько
Процедура ДобавитьПолеДатаВозвратаВSalelist_txt(Путь)
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(Путь);
	
	НашлиСтроку = Ложь;
	
	Для ТекСтрока = 1 по Текст.КоличествоСтрок() цикл
		Инд = Найти(Текст.ПолучитьСтроку(ТекСтрока ),"RETDATE~D~8~0");
		Если Инд > 0 тогда
			Строка = ТекСтрока;
			НашлиСтроку = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ НашлиСтроку Тогда
		Текст.ДобавитьСтроку("RETDATE~D~8~0~Дата чека, по которому делается возрат");
		Попытка
			Текст.Записать(Путь, КодировкаТекста.ANSI);
		Исключение
			Сообщить("Не смогли добавить запись в файл " + Путь);
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область XML

//**********************************************
//++ VS Создаю архив SALE*.zip с XML-файлами 
Процедура СформироватьАРХИВ_ВыгрузкаXML_Sale(ПризнакZ="", ДатаВыгрузки) Экспорт 
	НомМаг			= СокрЛП(Константы.осн_КассаККМ.Получить().НомерМагазина);
	СерийныйНомерФР	= Константы.осн_КассаККМ.Получить().СерийныйНомерФР_латиница;
	
	Путь			= глПуть+"WorkFile\"+Формат(ДатаВыгрузки,"ДФ=yyyyMMdd")+"\";
	ИмяАрхива		= НомМаг+"_"+СерийныйНомерФР+"_"+ПризнакZ+"Sale_"+Формат(ДатаВыгрузки,"ДФ=yyyyMMdd") + ".zip";
	МаскаАрхива 	= "*_"+ПризнакZ+"Sale_"+Формат(ДатаВыгрузки,"ДФ=yyyyMMdd") + ".zip";
	ПолноеИмяАрхива = Путь+ИмяАрхива;
	
	СоздатьКаталог(Путь);
	УдалитьФайлы(Путь, НомМаг+"_"+СерийныйНомерФР+"_"+ПризнакZ+"Sale_"+"*.xml");
	УдалитьФайлы(Путь, НомМаг+"_"+СерийныйНомерФР+"_SaleDiscount_"+"*.xml");
    УдалитьФайлы(Путь, МаскаАрхива);

	// ++VS выгружаем файл XML по РС ЖурналЧековРРО
	ИмяФайлаXML_Sale = НомМаг+"_"+СерийныйНомерФР+"_"+ПризнакZ+"Sale_" + Формат(ДатаВыгрузки,"ДФ=yyyyMMdd") + ".xml";
	РезXML_Sale = СоздатьXML_ЖурналЧековРРО(Путь+ИмяФайлаXML_Sale, НачалоДня(ДатаВыгрузки), КонецДня(ДатаВыгрузки));
	// ++VS выгружаем файл XML по РС ЖурналАкцийПоЧекамРРО
	ИмяФайлаXML_SaleDiscount = НомМаг+"_"+СерийныйНомерФР+"_SaleDiscount_" + Формат(ДатаВыгрузки,"ДФ=yyyyMMdd") + ".xml";
	РезXML_SaleDiscount = СоздатьXML_ЖурналАкцийПоЧекамРРО(Путь+ИмяФайлаXML_SaleDiscount, НачалоДня(ДатаВыгрузки), КонецДня(ДатаВыгрузки));
	
	Архив = Новый ЗаписьZipФайла(ПолноеИмяАрхива);
	Если РезXML_Sale Тогда 
		Архив.Добавить(Путь+ИмяФайлаXML_Sale);
	КонецЕсли;	
	                                                  
	Если РезXML_SaleDiscount Тогда 
		Архив.Добавить(Путь+ИмяФайлаXML_SaleDiscount);
	КонецЕсли;	
	Архив.Записать();
		
	УдалитьФайлы(Путь, НомМаг+"_"+СерийныйНомерФР+"_"+ПризнакZ+"Sale_"+"*.xml");
	УдалитьФайлы(Путь, НомМаг+"_"+СерийныйНомерФР+"_SaleDiscount_"+"*.xml");
		
КонецПроцедуры	

Процедура СформироватьАРХИВ_ВыгрузкаXML_UFR_GiveCertificate() Экспорт 
		
	ПутьWorkFile															= глПуть+"\WorkFile\"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"\";
	ИмяАрхива                   											= "UFR_GiveCertificate_"+глСерийныйНомерФР_VS+"_"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd") + Формат(ТекущаяДата(),"ДФ=HHmmss")+ ".zip";
	Маска                       											= "UFR_GiveCertificate_"+глСерийныйНомерФР_VS+"_"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd") + "*.zip";
	ПолноеИмяАрхива 														= ПутьWorkFile+ИмяАрхива;
	
	ИмяФайлаXML1															= "UFR_GiveCertificate_"+глСерийныйНомерФР_VS+"_"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd") + Формат(ТекущаяДата(),"ДФ=HHmmss")+ ".xml";
	
	СоздатьКаталог(ПутьWorkFile);	
	Если СоздатьXML_UFR_GiveCertificate(ПутьWorkFile+ИмяФайлаXML1) Тогда 
		УдалитьФайлы(ПутьWorkFile, Маска);
		
		Архив 																= Новый ЗаписьZipФайла(ПолноеИмяАрхива);
		Архив.Добавить(ПутьWorkFile+ИмяФайлаXML1);
		Архив.Записать();
		
		УдалитьФайлы(ПутьWorkFile, "UFR_GiveCertificate_"+глСерийныйНомерФР_VS+"_"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"*.xml");
	КонецЕсли;	
КонецПроцедуры	

Функция СоздатьXML_ЖурналЧековРРО(ИмяФайла, НачалоПериода, КонецПериода) Экспорт
	
	ТоварТип		= ФабрикаXDTO.Тип("http://www.sample-package.org", "XDTO_СтрокаРС_ЖурналЧековРРО");
	СоставТип		= ФабрикаXDTO.Тип("http://www.sample-package.org", "СоставнойТип_ЖурналЧековРРО");
	Корень			= ФабрикаXDTO.Создать(СоставТип);
	
	Запрос			= Новый Запрос;	
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	НАЧАЛОПЕРИОДА(ЧекККМТЧ_Товары.Ссылка.Дата, ДЕНЬ) КАК Период,
	            	  |	ПРЕДСТАВЛЕНИЕ(ЧекККМТЧ_Товары.Ссылка.КассаККМ) КАК СерийныйНомерФР,
	            	  |	ЧекККМТЧ_Товары.Ссылка.НомерЧекаККМ КАК НомерЧека,
	            	  |	ЧекККМТЧ_Товары.НомерСтроки КАК НомерСтрокиЧека,
	            	  |	ПРЕДСТАВЛЕНИЕ(ЧекККМТЧ_Товары.Ссылка.СостояниеЧекаККМ) КАК СостояниеЧека,
	            	  |	ПРЕДСТАВЛЕНИЕ(ЧекККМТЧ_Товары.Ссылка.BPMonline_СостояниеЧекаККМ) КАК СостояниеBPMonline,
	            	  |	ПРЕДСТАВЛЕНИЕ(ЧекККМТЧ_Товары.ВидОперации) КАК ВидОперации,
	            	  |	ВЫБОР
	            	  |		КОГДА ЧекККМТЧ_Товары.Ссылка.СуммаОплаты_Нал > 0
	            	  |			ТОГДА ""000000001""
	            	  |		ИНАЧЕ ""000000002""
	            	  |	КОНЕЦ КАК ВидОплаты,
	            	  |	ЧекККМТЧ_Товары.Код,
	            	  |	ЧекККМТЧ_Товары.ШК КАК Штрихкод,
	            	  |	ЧекККМТЧ_Товары.Наименование КАК DATASTR1,
	            	  |	ЧекККМТЧ_Товары.Наименование КАК DATASTR2,
	            	  |	ПРЕДСТАВЛЕНИЕ(ЧекККМТЧ_Товары.СтавкаНДС) КАК СтавкаНДС,
	            	  |	ЧекККМТЧ_Товары.Количество,
	            	  |	ЧекККМТЧ_Товары.Цена,
	            	  |	ЧекККМТЧ_Товары.Сумма - ЧекККМТЧ_Товары.СкидкаБК КАК Сумма,
	            	  |	ЧекККМТЧ_Товары.СкидкаСумма,
	            	  |	ЧекККМТЧ_Товары.СкидкаБК,
	            	  |	ЧекККМТЧ_Товары.Ответственный,
	            	  |	ЧекККМТЧ_Товары.Ссылка.СуммаПоЧекуККМ КАК СуммаПоЧеку,
	            	  |	ЧекККМТЧ_Товары.Ссылка.НомерZОтчета,
	            	  |	ЧекККМТЧ_Товары.Ссылка.Дата КАК ДатаОперации,
	            	  |	ПОДСТРОКА(ЧекККМТЧ_Товары.Ссылка.КассаККМ.Код, 4, 2) КАК Касса,
	            	  |	ЧекККМТЧ_Товары.Ссылка.Кассир КАК Кассир
	            	  |ИЗ
	            	  |	Документ.ЧекККМ.ТЧ_Товары КАК ЧекККМТЧ_Товары
	            	  |ГДЕ
	            	  |	ЧекККМТЧ_Товары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	            	  |	И ЧекККМТЧ_Товары.Ссылка.СостояниеЧекаККМ В(&СостояниеЧекаККМ)
	            	  |	И ЧекККМТЧ_Товары.Ссылка.Проведен";
				  
	СостояниеЧека			= Новый СписокЗначений;
	СостояниеЧека.Добавить(Перечисления.СостояниеЧека.Закрыт);
	СостояниеЧека.Добавить(Перечисления.СостояниеЧека.Аварийный_ПробитПоФР);
				  
					  
	Запрос.УстановитьПараметр("СостояниеЧекаККМ", СостояниеЧека); 
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	ТаблицаРезультат							= Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультат.Количество()=0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	НомМагазина    				= СокрЛП(Константы.осн_КассаККМ.Получить().НомерМагазина);
	НомерФискальника 			= СокрЛП(Константы.осн_КассаККМ.Получить());
	
	Для Каждого СтрокаТЗ Из ТаблицаРезультат Цикл 
        Элемент									= ФабрикаXDTO.Создать(ТоварТип);
		ЗаполнитьЗначенияСвойств(Элемент, СтрокаТЗ);
		Элемент.Количество						= 1;
		Корень.СтрокаСоставнойТип.Добавить(Элемент);
	КонецЦикла;	
	
	Запись	= Новый ЗаписьXML;
	Запись.ОткрытьФайл(ИмяФайла);
	ФабрикаXDTO.ЗаписатьXML(Запись,Корень,,,,НазначениеТипаXML.Явное);
	Запись.Закрыть();
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьXML_ЖурналАкцийПоЧекамРРО(ИмяФайла, НачалоПериода, КонецПериода) Экспорт
	
	ТоварТип		= ФабрикаXDTO.Тип("http://www.sample-package.org", "XDTO_СтрокаРС_ЖурналАкцийПоЧекамРРО");
	СоставТип		= ФабрикаXDTO.Тип("http://www.sample-package.org", "СоставнойТип_ЖурналАкцийПоЧекамРРО");
	Корень			= ФабрикаXDTO.Создать(СоставТип);
	
	Запрос			= новый Запрос;                                       
	Запрос.Текст	= "ВЫБРАТЬ                                                                   
	            	  |	ЖурналАкцийПоЧекамРРО.Период,
	            	  |	ЖурналАкцийПоЧекамРРО.СерийныйНомерФР,
	            	  |	ЖурналАкцийПоЧекамРРО.НомерЧека,
	            	  |	ЖурналАкцийПоЧекамРРО.ТипАкции,
	            	  |	ЖурналАкцийПоЧекамРРО.НомерАкции,
	            	  |	ПРЕДСТАВЛЕНИЕ(ЖурналАкцийПоЧекамРРО.СтатусАкции) КАК СтатусАкции,
	            	  |	ЖурналАкцийПоЧекамРРО.КоличествоПримАкций,
	            	  |	ЖурналАкцийПоЧекамРРО.СуммаСкидкиПримАкций,
	            	  |	ЖурналАкцийПоЧекамРРО.СуммаЧека,
	            	  |	ЖурналАкцийПоЧекамРРО.СуммаЧекаБезСкидки,
	            	  |	ЖурналАкцийПоЧекамРРО.НаименованиеАкции,
	            	  |	ЖурналАкцийПоЧекамРРО.ШК
	            	  |ИЗ
	            	  |	РегистрСведений.ЖурналАкцийПоЧекамРРО КАК ЖурналАкцийПоЧекамРРО
	            	  |ГДЕ
	            	  |	ЖурналАкцийПоЧекамРРО.Период МЕЖДУ &НачалоПериода И &КонецПериода
	            	  |	И ЖурналАкцийПоЧекамРРО.СтатусАкции = &СтатусАкции";
					  
				  
	Запрос.УстановитьПараметр("СтатусАкции", Перечисления.СтатусАкции.Выполнена); 
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	ТаблицаРезультат							= Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультат.Количество()=0 Тогда 
		Возврат Ложь;
	КонецЕсли;
		
	Для Каждого СтрокаТЗ Из ТаблицаРезультат Цикл 
        Элемент									= ФабрикаXDTO.Создать(ТоварТип);
		ЗаполнитьЗначенияСвойств(Элемент, СтрокаТЗ);
		Корень.СтрокаСоставнойТип.Добавить(Элемент);
	КонецЦикла;	
	
	Запись	= Новый ЗаписьXML;
	Запись.ОткрытьФайл(ИмяФайла);
	ФабрикаXDTO.ЗаписатьXML(Запись,Корень,,,,НазначениеТипаXML.Явное);
	Запись.Закрыть();
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьXML_UFR_GiveCertificate(ИмяФайла) Экспорт
	ТоварТип																= ФабрикаXDTO.Тип("http://www.sample-package.org", "XDTO_UFR_СтрокаРС_ДвижениеПС");
	СоставТип																= ФабрикаXDTO.Тип("http://www.sample-package.org", "СоставнойТип_UFR_ДвижениеПС");
	Корень																	= ФабрикаXDTO.Создать(СоставТип);
	
	Запрос																	= новый Запрос;																		  
	Запрос.Текст															= "ВЫБРАТЬ
	            															  |	ДвиженияПС.Период,
	            															  |	ДвиженияПС.КассаККМ.НомерМагазина КАК НомерМагазина,
	            															  |	ДвиженияПС.КассаККМ.Наименование КАК СерийныйНомерФР,
	            															  |	ДвиженияПС.НомерЧекаККМ КАК НомерЧека,
	            															  |	ДвиженияПС.ШК_ПС,
	            															  |	ПРЕДСТАВЛЕНИЕ(ДвиженияПС.СтатусПС) КАК СтатусПС,
	            															  |	ДвиженияПС.НоминалПС
	            															  |ИЗ
	            															  |	РегистрСведений.ДвиженияПС КАК ДвиженияПС
	            															  |ГДЕ
	            															  |	НЕ ДвиженияПС.ЭлектронныйПС
	            															  |	И ДвиженияПС.ШК_ПС <> ""1112222222200""
	            															  |	И ДвиженияПС.Период >= &Период";
																		  
	Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()-3*24*60*60));																		  
	ТаблицаРезультат														= Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультат.Количество()=0 Тогда     		Возврат Ложь;		КонецЕсли;
	
	НомМагазина    															= СокрЛП(Константы.осн_КассаККМ.Получить().НомерМагазина);
	НомерФискальника 														= СокрЛП(Константы.осн_КассаККМ.Получить());
	
	Для Каждого СтрокаТЗ Из ТаблицаРезультат Цикл 
		Если ПустаяСтрока(СокрЛП(СтрокаТЗ.НомерМагазина)) Или ПустаяСтрока(СокрЛП(СтрокаТЗ.СерийныйНомерФР)) Тогда 
			Продолжить;	
		КонецЕсли;	
		
		Если ПустаяСтрока(СокрЛП(СтрокаТЗ.СтатусПС)) Или ПустаяСтрока(СокрЛП(СтрокаТЗ.ШК_ПС)) Тогда 
			Продолжить;
		КонецЕсли;	
		
        Элемент																= ФабрикаXDTO.Создать(ТоварТип);
		ЗаполнитьЗначенияСвойств(Элемент, СтрокаТЗ);
		Корень.СтрокаСоставнойТип.Добавить(Элемент);
	КонецЦикла;	
	
	Запись																	= Новый ЗаписьXML;
	Запись.ОткрытьФайл(ИмяФайла);
	ФабрикаXDTO.ЗаписатьXML(Запись,Корень,,,,НазначениеТипаXML.Явное);
	Запись.Закрыть();
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область РегистрыСведений

Функция ЗаписатьПродажи_В_РС_ЖурналРРО() Экспорт
	
	// ++VS 18.12.2013 Проверяем были ли продажи сегодня
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
					|	ЧекККМ.Ссылка
					|ИЗ
					|	Документ.ЧекККМ КАК ЧекККМ
					|ГДЕ
					|	ЧекККМ.Проведен
					|	И ЧекККМ.СостояниеЧекаККМ В(&СостояниеЧекаККМ)
					|	И ЧекККМ.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
				
	Запрос.УстановитьПараметр("КонецПериода", 		КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СостояниеЧекаККМ", 	Перечисления.СостояниеЧека.Закрыт);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка_ЧекиККМ = РезультатЗапроса.Выбрать();
	ПризнакНаличияПродажТекущегоДня = Выборка_ЧекиККМ.Следующий();
	
	// ++VS 04.10.2013 Делаем запись в внутренем журнале РРО
	//!17.12.12
	НаборЗаписей															= РегистрыСведений.ЖурналРРО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаСмены.Установить(НачалоДня(ТекущаяДата()));	
	НаборЗаписей.Прочитать(); 
	Таблица																	= НаборЗаписей.Выгрузить();
	                                        
	Если Таблица.Количество() = 0 Тогда 
		МенеджерЖурналРРО 			= РегистрыСведений.ЖурналРРО.СоздатьМенеджерЗаписи();
		МенеджерЖурналРРО.ДеньСмены = ДеньГода(ТекущаяДата());
		МенеджерЖурналРРО.ДатаСмены = НачалоДня(ТекущаяДата());
		МенеджерЖурналРРО.Время 	= ТекущаяДата();
		МенеджерЖурналРРО.ZОтчет 	= Истина;
		МенеджерЖурналРРО.ПустойЧек = Ложь;
		МенеджерЖурналРРО.Записать(Ложь);
		
		Логирование.ДобавитьЗаписьЖурнала(, "КнопкаZотчетНажатие()", "ТекущийZОтчет_Обновлен_В_ЖурналРРО", Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");	 
	Иначе
		Попытка
			Для Каждого СтрокаТаблицы Из Таблица Цикл
				Если НЕ СтрокаТаблицы.ZОтчет Тогда 
					СтрокаТаблицы.ZОтчет 									= Истина; 
					СтрокаТаблицы.Время  									= ТекущаяДата(); 
					//СтрокаТаблицы.НомерZОтчета          					= НомерЗет
				КонецЕсли;
			КонецЦикла;	
			НаборЗаписей.Очистить();                     
			НаборЗаписей.Записать();
			НаборЗаписей.Загрузить(Таблица); 
			НаборЗаписей.Записать(Ложь);
			
			Логирование.ДобавитьЗаписьЖурнала(, "КнопкаZотчетНажатие()", "ТекущийZОтчет_Обновлен_В_ЖурналРРО", Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");	 
		Исключение
			Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "КнопкаZотчетНажатие()", "ТекущийZОтчет_НЕ_ЗАПИСАН_В_ЖурналРРО", Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");	 
			Если ПризнакНаличияПродажТекущегоДня Тогда  
				Предупреждение("Ошибка записи Z-отчета в регистр 'ЖурналРРО' !!! Сообщите в офис !!!",,"ВНИМАНИЕ ОШИБКА!!!");
			КонецЕсли;	
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПризнакНаличияПродажТекущегоДня;
	
КонецФункции

#КонецОбласти

#Область WebСервисы

Процедура ОтправитьДанныеПоВебСервису() Экспорт
	// VS++ 07.12.2016 отправим данные на Веб-сервер
	ВебСервисыЧековаяСтатистика.РОЗНИЦА_ОправитьНомерВерсииКонфигурацииУФР1(ПараметрыФР);
	
	Попытка
		//Мулько 10.03.2020
		Если Константы.ПередаватьЧекиВРТК.Получить() Тогда
			ВебСервисыРТК.BAS_РОЗНИЦА_ОправитьSALE();
		Иначе	
			ВебСервисыЧековаяСтатистика.РОЗНИЦА_ОправитьSALE();
		КонецЕсли;	
	Исключение
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "ВебСервисыЧековаяСтатистика.РОЗНИЦА_ОправитьSALE()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщийМодуль.ЗакрытиеСмены");
	КонецПопытки;	
	
	Попытка
		ВебСервисыЧековаяСтатистика.РОЗНИЦА_ОтправитьДанныеНеудачнойРегистрацииКлиентов();
	Исключение
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "ВебСервисыЧековаяСтатистика.РОЗНИЦА_ОтправитьДанныеНеудачнойРегистрацииКлиентов()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщийМодуль.ЗакрытиеСмены");
	КонецПопытки;	
	
	Попытка
		ВебСервисыЧековаяСтатистика.РОЗНИЦА_ОтправитьЗарегистрированныеБонусныеКарты();
	Исключение
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "ВебСервисыЧековаяСтатистика.РОЗНИЦА_ОтправитьЗарегистрированныеБонусныеКарты()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщийМодуль.ЗакрытиеСмены");
	КонецПопытки;	
	
	Попытка
		ПроверитьНеотправленныеЧекиВЧековуюСтатистику();
	Исключение
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "ПроверитьНеотправленныеЧекиВЧековуюСтатистику()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщийМодуль.ЗакрытиеСмены");
	КонецПопытки;	
	
	Попытка
		ТО_Терминал.ОткрытьПорт(ПараметрыPOSтерм, Истина);
		ТО_Терминал.ПолучитьСведенияОТерминале();
		ВебСервисыРТК.BAS_РОЗНИЦА_ПередатьДанныеОТерминале(Константы.ТО_POSтерминал_ВидОбработки.Получить(), ПараметрыPOSтерм.POSтерминал_СтрокаИнфо);
	Исключение
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "ВебСервисыРТК.BAS_РОЗНИЦА_ПередатьДанныеОТерминале()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщийМодуль.ЗакрытиеСмены");
	КонецПопытки;
	
	ОтправитьДанныеЖурналаZОтчетовФР();
	ОтправитьДанныеЖурналаZОтчетовТерминал();
	
КонецПроцедуры	

// Дьяченко 05.12.2019
Процедура ПроверитьНеотправленныеЧекиВЧековуюСтатистику()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМ.Ссылка,
		|	ЧекККМ.Дата КАК Дата
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	НЕ ЧекККМ.ОтправленНаСервер
		|	И ЧекККМ.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Дата < НачалоДня(ТекущаяДата()) Тогда 
			ТемаПисьма = "Неотправленные чеки " + Константы.осн_Подразделение.Получить();
			Текст = ("Количество чеков: " + Выборка.Количество() + ". Первый неотправленный чек: "
					+ Выборка.ССылка + " Касса " + Константы.осн_КассаККМ.Получить());
			ОбщегоНазначения.ОтправитьПоПочте(,"problem1Cstores@prostor.ua",ТемаПисьма,Текст);
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОтправитьДанныеЖурналаZОтчетовФР() Экспорт
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЖурналZОтчетов.ВидОбработки,
			|	ЖурналZОтчетов.ДатаСмены,
			|	ЖурналZОтчетов.ФР_ДатаВремяПоследнегоОтчета,
			|	ЖурналZОтчетов.ФР_СерийныйНомер,
			|	ЖурналZОтчетов.ФР_ФискальныйНомер,
			|	ЖурналZОтчетов.ФР_Номер_Z_Отчета,
			|	ЖурналZОтчетов.ФР_ОборотиПродаж,
			|	ЖурналZОтчетов.ФР_ОборотиПродаж_Нал,
			|	ЖурналZОтчетов.ФР_ОборотиПродаж_БезНал,
			|	ЖурналZОтчетов.ФР_ОборотиПродаж_ПС,
			|	ЖурналZОтчетов.ФР_ОборотиВозвратов,
			|	ЖурналZОтчетов.ФР_ОборотиВозвратов_Нал,
			|	ЖурналZОтчетов.ФР_ОборотиВозвратов_БезНал,
			|	ЖурналZОтчетов.ФР_ОборотиВозвратов_ПС,
			|	ЖурналZОтчетов.ФР_ОборотПродаж_А,
			|	ЖурналZОтчетов.ФР_ОборотПродаж_Б,
			|	ЖурналZОтчетов.ФР_ОборотПродаж_В,
			|	ЖурналZОтчетов.ФР_ОборотПродаж_Г,
			|	ЖурналZОтчетов.ФР_ОборотПродаж_Д,
			|	ЖурналZОтчетов.ФР_ОборотПродаж_Е,
			|	ЖурналZОтчетов.ФР_ОборотВозврат_А,
			|	ЖурналZОтчетов.ФР_ОборотВозврат_Б,
			|	ЖурналZОтчетов.ФР_ОборотВозврат_В,
			|	ЖурналZОтчетов.ФР_ОборотВозврат_Г,
			|	ЖурналZОтчетов.ФР_ОборотВозврат_Д,
			|	ЖурналZОтчетов.ФР_ОборотВозврат_Е,
			|	ЖурналZОтчетов.ФР_СтавкаНалога_А,
			|	ЖурналZОтчетов.ФР_СтавкаНалога_Б,
			|	ЖурналZОтчетов.ФР_СтавкаНалога_В,
			|	ЖурналZОтчетов.ФР_СтавкаНалога_Г,
			|	ЖурналZОтчетов.ФР_СтавкаНалога_Д,
			|	ЖурналZОтчетов.ФР_СтавкаНалога_Е,
			|	ЖурналZОтчетов.ФР_НДСПродаж_А,
			|	ЖурналZОтчетов.ФР_НДСПродаж_Б,
			|	ЖурналZОтчетов.ФР_НДСПродаж_В,
			|	ЖурналZОтчетов.ФР_НДСПродаж_Г,
			|	ЖурналZОтчетов.ФР_НДСПродаж_Д,
			|	ЖурналZОтчетов.ФР_НДСПродаж_Е,
			|	ЖурналZОтчетов.ФР_НДСВозврат_А,
			|	ЖурналZОтчетов.ФР_НДСВозврат_Б,
			|	ЖурналZОтчетов.ФР_НДСВозврат_В,
			|	ЖурналZОтчетов.ФР_НДСВозврат_Г,
			|	ЖурналZОтчетов.ФР_НДСВозврат_Д,
			|	ЖурналZОтчетов.ФР_НДСВозврат_Е,
			|	ЖурналZОтчетов.КолЧековПродаж,
			|	ЖурналZОтчетов.КолЧековВозврат,
			|	ЖурналZОтчетов.КолАнулЧековПродаж,
			|	ЖурналZОтчетов.КолАнулЧековВозврат,
			|	ЖурналZОтчетов.ФР_СуммаВнесение,
			|	ЖурналZОтчетов.ФР_СуммаИзъятие,
			|	ЖурналZОтчетов.ФР_СуммаВСейфе,
			|	ЖурналZОтчетов.ФР_СуммаВСейфе_БезНал,
			|	ЖурналZОтчетов.ФР_СуммаСкидокПродажа,
			|	ЖурналZОтчетов.ФР_СуммаСкидокВозврат,
			|	ЖурналZОтчетов.ДатаЗаписи
			|ИЗ
			|	РегистрСведений.ЖурналZОтчетовФР КАК ЖурналZОтчетов
			|ГДЕ
			|	ЖурналZОтчетов.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЖурналZОтчетов.ФР_ДатаВремяПоследнегоОтчета";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТЗОтчеты = РезультатЗапроса.Выгрузить();
	 
	    ОбъектТЗ = Новый ХранилищеЗначения(ТЗОтчеты, Новый СжатиеДанных(9));
		
		РезультатСервиса = ВебСервисыРТК.BAS_РОЗНИЦА_ПередатьДанныеОZОтчетахФР(Константы.Розница_КодКассы.Получить(), ОбъектТЗ);
		
		Если РезультатСервиса.Результат Тогда
			Для Каждого СтрокаТЗ ИЗ ТЗОтчеты Цикл
				
				МенеджерЖурналZОтчетов = РегистрыСведений.ЖурналZОтчетовФР.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЖурналZОтчетов, СтрокаТЗ);
				МенеджерЖурналZОтчетов.ДатаОтправки = ТекущаяДата();
				МенеджерЖурналZОтчетов.Записать();
		
			КонецЦикла;	
		Иначе
			Сообщить(РезультатСервиса.СтрокаСообщения);
		КонецЕсли;	
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки	
	
КонецПроцедуры	

Процедура ОтправитьДанныеЖурналаZОтчетовТерминал() Экспорт
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЖурналZОтчетовТерминал.ВидОбработки,
			|	ЖурналZОтчетовТерминал.ДатаОтчета КАК ДатаОтчета,
			|	ЖурналZОтчетовТерминал.СуммаПродажа,
			|	ЖурналZОтчетовТерминал.СуммаВозврат,
			|	ЖурналZОтчетовТерминал.СуммаАннуляция,
			|	ЖурналZОтчетовТерминал.КолЧековПродажа,
			|	ЖурналZОтчетовТерминал.КолЧековВозврат,
			|	ЖурналZОтчетовТерминал.КолЧековАннуляция,
			|	ЖурналZОтчетовТерминал.ДатаОтправки,
			|	ЖурналZОтчетовТерминал.ДатаЗаписи
			|ИЗ
			|	РегистрСведений.ЖурналZОтчетовТерминал КАК ЖурналZОтчетовТерминал
			|ГДЕ
			|	ЖурналZОтчетовТерминал.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаОтчета";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТЗОтчеты = РезультатЗапроса.Выгрузить();
	 
	    ОбъектТЗ = Новый ХранилищеЗначения(ТЗОтчеты, Новый СжатиеДанных(9));
		
		РезультатСервиса = ВебСервисыРТК.BAS_РОЗНИЦА_ПередатьДанныеОZОтчетахТерминал(Константы.Розница_КодКассы.Получить(), ОбъектТЗ);
		
		Если РезультатСервиса.Результат Тогда
			Для Каждого СтрокаТЗ ИЗ ТЗОтчеты Цикл
				
				МенеджерЖурналZОтчетов = РегистрыСведений.ЖурналZОтчетовТерминал.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЖурналZОтчетов, СтрокаТЗ);
				МенеджерЖурналZОтчетов.ДатаОтправки = ТекущаяДата();
				МенеджерЖурналZОтчетов.Записать();
		
			КонецЦикла;	
		Иначе
			Сообщить(РезультатСервиса.СтрокаСообщения);
		КонецЕсли;	
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки	
	
КонецПроцедуры	

#КонецОбласти

Процедура АнализРезультатаЗакрытияСмены(ПараметрыФР, ПризнакСозданияФайла_Z_Sale, ПризнакНаличияПродажТекущегоДня, ПризнакУcпехаFTP) Экспорт
	// Анализ результата закрытия смены 
	Если НЕ ПризнакСозданияФайла_Z_Sale И НЕ ПризнакНаличияПродажТекущегоДня Тогда 
		ТекстСообщения = "Файл продаж по Z-отчету №" + Строка(ПараметрыФР.ФР_НомерZОтчета) + " НЕ СОЗДАН!
						|Продаж за текущий день (" + Формат(НачалоДня(ТекущаяДата()),"ДФ=dd.MM.yyyy") +") НЕ БЫЛО или они НЕ ЗАПИСАНЫ в 1С !!!";
		Предупреждение(ТекстСообщения,,"ВНИМАНИЕ !!! ВОЗМОЖНО ПРОИЗОШЛА ОШИБКА!!!");			
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, "КнопкаZотчетНажатие()", ТекстСообщения, Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");
		Логирование.ДобавитьЗаписьЖурнала(, "КнопкаZотчетНажатие()", "ЗАВЕРШЕНИЕ РАБОТЫ 1С! Автоматический выход после Z-ОТЧЕТА !", Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");
		ПрекратитьРаботуСистемы(,);
	ИначеЕсли НЕ ПризнакСозданияФайла_Z_Sale и ПризнакНаличияПродажТекущегоДня Тогда 
		ТекстСообщения = "Файл продаж по Z-отчету №" + Строка(ПараметрыФР.ФР_НомерZОтчета) + " НЕ СОЗДАН! 
 						| Необходимо выполнить следующие действия:
						|
						| 1. Перейти на вкладку ПРОДАЖИ;
						| 2. Выбрать  Действие => Выгрузить продажи за период DBF;
						| 3. В появившемся окне установить текущую дату 
						|    и признаки выгрузки файлов (z-отчет, аварийные и анулированые чеки)
						|    (устнановить все галочки);
						| 4. Выгрузить;
						| 5. Дождаться сообщения 'Выгрузка завершена успешно !!!';
						| 6. Выход с 1С! Можно идти на маркет дальше закрывать смену.
						|
						|	Сообщите в офис или вашему системному администратору !!!"; 
		Предупреждение(ТекстСообщения,,"ВНИМАНИЕ ОШИБКА!!! СМЕНА НЕ ЗАКРЫТА !!!");
		
		// запускаем обработчик ожидания "выход по бездействию на кассе"
		ВремяНачалаНеактивности 											= ТекущаяДата();    // Процедура   КнопкаZотчетНажатие() 				
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, "КнопкаZотчетНажатие()", "Файл продаж по Z-отчету №" + Строка(ПараметрыФР.ФР_НомерZОтчета) + " НЕ СОЗДАН!", Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");
        Возврат;
		
	ИначеЕсли ПризнакСозданияФайла_Z_Sale И Не ПризнакУcпехаFTP тогда
		
		ТекстСообщения = "Файл продаж по Z-отчету №" + Строка(ПараметрыФР.ФР_НомерZОтчета) + " сформирован НО НЕ ОТПРАВЛЕН В ОФИС! Программа 1С завершает свою работу!!! 
						|
						|	Сообщите в офис или вашему системному администратору !!!";
		Предупреждение(ТекстСообщения,,"ВНИМАНИЕ ОШИБКА!!! СМЕНА ЗАКРЫТА НЕ КОРРЕКТНО !!!");					
					
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, "КнопкаZотчетНажатие()", "Файл продаж по Z-отчету №" + Строка(ПараметрыФР.ФР_НомерZОтчета) + " сформирован НО НЕ ОТПРАВЛЕН В ОФИС! Программа 1С завершает свою работу!!!", Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");
		Логирование.ДобавитьЗаписьЖурнала(, "КнопкаZотчетНажатие()", "ЗАВЕРШЕНИЕ РАБОТЫ 1С! Автоматический выход после Z-ОТЧЕТА !", Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");
		ПрекратитьРаботуСистемы(,);
		
	ИначеЕсли ПризнакСозданияФайла_Z_Sale И ПризнакУcпехаFTP тогда
		ТекстСообщения														= "Файл продаж по Z-отчету №" + Строка(ПараметрыФР.ФР_НомерZОтчета) + " сформирован и отправлен в офис! Программа 1С завершает свою работу!!!";                                                                                                     
		Предупреждение(ТекстСообщения,,"ПОЗДРАВЛЯЮ !!! СМЕНА ЗАКРЫТА КОРРЕКТНО !!!  :0)");
		
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, "КнопкаZотчетНажатие()", ТекстСообщения, Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");
		Логирование.ДобавитьЗаписьЖурнала(, "КнопкаZотчетНажатие()", "ЗАВЕРШЕНИЕ РАБОТЫ 1С! Автоматический выход после Z-ОТЧЕТА !", Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");
		
		//Мулько К.П.
		//--------------
		Попытка
			ПолучитьОбработкуТО().ЗакрытьПорт();
			СОМСоединительУТ					= Неопределено;
			//СОМ_Объект_АльтернативногоСервера   = Неопределено;
			//СОМ_Объект_ДополнительногоСервера	= Неопределено;
		Исключение
		КонецПопытки;	
	    //--------------

		ПрекратитьРаботуСистемы(,);	
		
	КонецЕсли;	

КонецПроцедуры	