#Область Розница_интерфейс

//Мулько 10.03.2020
//Процедура РОЗНИЦА_ОправитьSALE(ВсеЧекиЗаДень = Неопределено) Экспорт
Процедура РОЗНИЦА_ОправитьSALE(ВсеЧекиЗаДень = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ ПЕРВЫЕ 30
        |   *,
   		|	ПРЕДСТАВЛЕНИЕ(ЧекККМ.АкционнаяСистема) КАК АкционнаяСистема,
		|	ПРЕДСТАВЛЕНИЕ(ЧекККМ.СостояниеЧекаККМ) КАК СостояниеЧекаККМ,
   		|	ПРЕДСТАВЛЕНИЕ(ЧекККМ.ВидОперацииЧекаККМ) КАК ВидОперацииЧекаККМ,
		|	ПРЕДСТАВЛЕНИЕ(ЧекККМ.FISHKA_СостояниеЧекаККМ) КАК FISHKA_СостояниеЧекаККМ,
   		|	ПРЕДСТАВЛЕНИЕ(ЧекККМ.BPMonline_СостояниеЧекаККМ) КАК BPMonline_СостояниеЧекаККМ
   		|ИЗ
   		|	Документ.ЧекККМ КАК ЧекККМ
   		|ГДЕ
   		|	НЕ ЧекККМ.ОтправленНаСервер
   		|	И ЧекККМ.Проведен";
					
	Если ВсеЧекиЗаДень = Истина Тогда 
		Текст = СтрЗаменить(Текст,"ПЕРВЫЕ 30","");
		Текст = Текст +	"
						|	И ЧекККМ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания"; 
	КонецЕсли;

	Текст = Текст +	    "
						|	УПОРЯДОЧИТЬ ПО ЧекККМ.Дата
					    |";
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ТекущаяДата()));
	
	Запрос.Текст = Текст;				
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТипОбъектаСписокЧековККМ = ФабрикаXDTO.Тип("http://prostor.ua/roznica", "СписокЧековККМ");
	ОбъектСписокЧековККМ = ФабрикаXDTO.Создать(ТипОбъектаСписокЧековККМ);
	
	ТипОбъектаЧекККМ = ФабрикаXDTO.Тип("http://prostor.ua/roznica", "ЧекККМ");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектЧекККМ = ФабрикаXDTO.Создать(ТипОбъектаЧекККМ);
		ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, ВыборкаДетальныеЗаписи);
		ОбъектЧекККМ.ПодразделениеКод = СокрЛП(Константы.осн_Подразделение.Получить().Код);
		
		СтрокаGUID = ЗначениеВСтрокуВнутр(ВыборкаДетальныеЗаписи.Ссылка);
		СтрокаGUID = Сред(СтрокаGUID,найти(СтрокаGUID,":")+1, СтрДлина(СтрокаGUID));
	 	СтрокаGUID = Сред(СтрокаGUID,25,8)+"-"+Сред(СтрокаGUID,21,4)+"-"+Сред(СтрокаGUID,17,4)+"-"+Сред(СтрокаGUID,1,4)+"-"+Сред(СтрокаGUID,5,12);
		ОбъектЧекККМ.UUID_ЧекаККМ_ИзУФР = СтрокаGUID;
		
		// Выгрузим  ТЧ_Товары
		ТипОбъектаТЧ_Товары = ФабрикаXDTO.Тип("http://prostor.ua/roznica", "ТЧ_Товары");
		
		ТЧ_Товары = ОбщегоНазначения.ПолучитьТЧ_ТоварыЧекаККМ_ОтправитьНаСервер(ВыборкаДетальныеЗаписи.Ссылка);
		Для Каждого СтрокаТЧ Из ТЧ_Товары Цикл 
			ОбъектТЧ_Товары = ФабрикаXDTO.Создать(ТипОбъектаТЧ_Товары);
			ЗаполнитьЗначенияСвойств(ОбъектТЧ_Товары, СтрокаТЧ);
			ОбъектЧекККМ.ТЧ_Товары.Добавить(ОбъектТЧ_Товары); 
		КонецЦикла;	
		
		// Выгрузим  ТЧ_ЖурналСкидок
		ТипОбъектаТЧ_ЖурналСкидок = ФабрикаXDTO.Тип("http://prostor.ua/roznica", "ТЧ_ЖурналСкидок");
		
		ТЧ_ЖурналСкидок = ОбщегоНазначения.ПолучитьТЧ_ЖурналСкидокЧекаККМ_ОтправитьНаСервер(ВыборкаДетальныеЗаписи.Ссылка);
		Для Каждого СтрокаТЧ Из ТЧ_ЖурналСкидок Цикл 
			ОбъектТЧ_ЖурналСкидок = ФабрикаXDTO.Создать(ТипОбъектаТЧ_ЖурналСкидок);
			ЗаполнитьЗначенияСвойств(ОбъектТЧ_ЖурналСкидок, СтрокаТЧ);
			ОбъектЧекККМ.ТЧ_ЖурналСкидок.Добавить(ОбъектТЧ_ЖурналСкидок); 
		КонецЦикла;
		
		// Выгрузим  ТЧ_ДвиженияПС
		ТипОбъектаТЧ_ДвиженияПС = ФабрикаXDTO.Тип("http://prostor.ua/roznica", "ТЧ_ДвиженияПС");
			
		ТЧ_ДвиженияПС = ОбщегоНазначения.ПолучитьТЧ_ДвиженияПСЧекаККМ_ОтправитьНаСервер(ВыборкаДетальныеЗаписи.Ссылка);
		Для Каждого СтрокаТЧ Из ТЧ_ДвиженияПС Цикл 
			ОбъектТЧ_ДвиженияПС = ФабрикаXDTO.Создать(ТипОбъектаТЧ_ДвиженияПС);
			ЗаполнитьЗначенияСвойств(ОбъектТЧ_ДвиженияПС, СтрокаТЧ);
			ОбъектЧекККМ.ТЧ_ДвиженияПС.Добавить(ОбъектТЧ_ДвиженияПС); 
		КонецЦикла;
		
		// Выгрузим  ТЧ_СобытияПоЧеку
		ТипОбъектаТЧ_СобытияПоЧеку = ФабрикаXDTO.Тип("http://prostor.ua/roznica", "ТЧ_СобытияПоЧеку");
			
		ТЧ_СобытияПоЧеку = ОбщегоНазначения.ПолучитьТЧ_СобытияПоЧекуЧекаККМ_ОтправитьНаСервер(ВыборкаДетальныеЗаписи.Ссылка);
		Для Каждого СтрокаТЧ Из ТЧ_СобытияПоЧеку Цикл 
			ОбъектТЧ_СобытияПоЧеку = ФабрикаXDTO.Создать(ТипОбъектаТЧ_СобытияПоЧеку);
			ЗаполнитьЗначенияСвойств(ОбъектТЧ_СобытияПоЧеку, СтрокаТЧ);
			ОбъектЧекККМ.ТЧ_СобытияПоЧеку.Добавить(ОбъектТЧ_СобытияПоЧеку); 
		КонецЦикла;
		
		ОбъектСписокЧековККМ.ЧекККМ.Добавить(ОбъектЧекККМ);  
	КонецЦикла;
	
	Если ОбъектСписокЧековККМ.ЧекККМ.Количество()=0	Тогда 					Возврат;	КонецЕсли;
	
	Прокси = ПодключитьПрокси("Sale?Wsdl", СокрЛП("http://prostor.ua/sale"), "Sale", 30);
	ТЗ_Ответ = Прокси.PutCheckSaleWithSearch(ОбъектСписокЧековККМ);
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ТЗ_Ответ_XDTO = Сериализатор.ПрочитатьXDTO(ТЗ_Ответ);
	
	Для Каждого СтрокаТЗ Из ТЗ_Ответ_XDTO Цикл 
		НовыйGUID = Новый УникальныйИдентификатор(СтрокаТЗ.UUID_ЧекаККМ_ИзУФР );
	    Ссылка = Документы["ЧекККМ"].ПолучитьСсылку(НовыйGUID);
		ОбъектЧекККМ = Ссылка.ПолучитьОбъект();
		ОбъектЧекККМ.UUID_ЧекаККМ_ИзРозница = СтрокаТЗ.UUID_ЧекаККМ_ИзРозница;
		ОбъектЧекККМ.ОтправленНаСервер = СтрокаТЗ.УспехЗаписи;
		Попытка
			ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, "Запись чека в рознице.", "Не перезаписан чек " + Ссылка.НомерЧекаККМ + ". ОШИБКА: "+ОписаниеОшибки(), Неопределено, Неопределено, "ВебСервисы");
		КонецПопытки;
	
	КонецЦикла;	
	
КонецПроцедуры

Функция РОЗНИЦА_ПолучитьЧекиККМ_ДляПерезаписи() Экспорт
	
	ПодразделениеКод														= СокрЛП(Константы.осн_Подразделение.Получить().Код);
	СерийныйНомерФР    														= СокрЛП(Константы.осн_КассаККМ.Получить().Наименование);
	НомерМагазина                                                           = Число(Константы.осн_КассаККМ.Получить().НомерМагазина);
	
	Параметры																= Новый Структура;
	Параметры.Вставить("ПодразделениеКод", 									ПодразделениеКод);
	Параметры.Вставить("СерийныйНомерФР", 									СерийныйНомерФР);	
	Параметры.Вставить("НомерМагазина", 									НомерМагазина);	

	Сериализатор 															= Новый СериализаторXDTO(ФабрикаXDTO);
	Param 																	= Сериализатор.ЗаписатьXDTO(Параметры);
	
	Попытка
		// Оправим данные
		Прокси																= ПодключитьПрокси("Sale?Wsdl", СокрЛП("http://prostor.ua/sale"), "Sale", 5);		
		ТЗ_Ответ															= Прокси.OverwriteCheckSale(Param);
		
		Сериализатор 														= Новый СериализаторXDTO(ФабрикаXDTO);
		ТЗ_Ответ_XDTO														= Сериализатор.ПрочитатьXDTO(ТЗ_Ответ);

	
		Запрос 																= Новый Запрос;
		Запрос.Текст 														= 
																			"ВЫБРАТЬ
																			|	ЧекККМ.Ссылка
																			|ИЗ
																			|	Документ.ЧекККМ КАК ЧекККМ
																			|ГДЕ
																			|	ЧекККМ.UUID_ЧекаККМ_ИзРозница В(&UUID_ЧекаККМ_ИзРозница)
																			|	И ЧекККМ.Проведен";
		
		Запрос.УстановитьПараметр("UUID_ЧекаККМ_ИзРозница", ТЗ_Ответ_XDTO.ВыгрузитьКолонку("UUID_ЧекаККМ_ИзРозница"));
		РезультатЗапроса 													= Запрос.Выполнить();		
		ЧекиККМ 															= РезультатЗапроса.Выбрать();
		Пока ЧекиККМ.Следующий() Цикл
			ОбъектЧекККМ													= ЧекиККМ.Ссылка.ПолучитьОбъект();
			ОбъектЧекККМ.ОтправленНаСервер                                  = Ложь;
			ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;

		
	Исключение
		Сообщить(ОписаниеОшибки());
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ПолучитьЧекиККМ_ДляПерезаписи()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщиеМодули.ВебСервисы");
		Возврат Ложь
	КонецПопытки;	
	
	Возврат Истина

КонецФункции

Функция РОЗНИЦА_ПолучитьНастройкиШаблонаЧека() Экспорт 
	ВебСервисыЧековаяСтатистика.РОЗНИЦА_ПолучитьЧекиККМ_ДляПерезаписи();
	РабочееМестоКассира.УстановитьГраницуПараметраКассыККМ(Перечисления.ВидыПараметровКассыККМ.НастройкиШаблонаЧека, ТекущаяДата());
КонецФункции	

Функция РОЗНИЦА_ПолучитьРС_ТекстовоеСообщениеНаЧеке() Экспорт
	
	// Оправим данные
	Прокси		= ПодключитьПрокси("TextToServiceCheck?Wsdl", СокрЛП("http://prostor.ua/sale"), "TextToServiceCheck", 30);
	ТЗ_Ответ 	= Прокси.Prediction();
	
	Сериализатор 	= Новый СериализаторXDTO(ФабрикаXDTO);
	ТЗ_Ответ_XDTO 	= Сериализатор.ПрочитатьXDTO(ТЗ_Ответ);
	
	НаборРегистра = РегистрыСведений.ТекстовоеСообщениеНаЧеке.СоздатьНаборЗаписей();
	НаборРегистра.Прочитать();
	НаборРегистра.Очистить();
	НаборРегистра.Загрузить(ТЗ_Ответ_XDTO);
	НаборРегистра.Записать(Истина);
	
	Возврат Истина;
КонецФункции

Функция РОЗНИЦА_ОправитьНомерВерсииКонфигурацииУФР() Экспорт 	
	
	ТО_МодельФР																= Константы.ТО_МодельФР.Получить();	
		
	НомМаг    																= СокрЛП(Константы.осн_КассаККМ.Получить().НомерМагазина);
	СерийныйНомерФР    														= СокрЛП(Константы.осн_КассаККМ.Получить().Наименование);
      		
	Параметры																= Новый Структура;
	Параметры.Вставить("НомерМагазина", 			НомМаг);
	Параметры.Вставить("СерийныйНомерФР", 			СерийныйНомерФР);
	Параметры.Вставить("Версия1С",               	Метаданные.Версия);
	Параметры.Вставить("МодельДрайвераФР", 			СокрЛП(ТО_МодельФР) + "_BPM7");
	
	Если ПустаяСтрока(Параметры.СерийныйНомерФР) Или ПустаяСтрока(Параметры.НомерМагазина) Тогда 
		Возврат Ложь	
	КонецЕсли;
	
	Сериализатор 															= Новый СериализаторXDTO(ФабрикаXDTO);
	Param 																	= Сериализатор.ЗаписатьXDTO(Параметры);
	
	Попытка
		ВремяСтартаЗапроса													= ТекущаяДата();
		
		// Оправим данные
		Прокси																= ПодключитьПрокси("UpdateParam?Wsdl", СокрЛП("http://prostor.ua/sale"), "UpdateParam", 5);
		Ответ																= Прокси.AskVersion_1C(Param);
		
		Логирование.ДобавитьЗаписьЖурнала(, "РОЗНИЦА_ОправитьНомерВерсииКонфигурацииУФР().TimeOUT",  "TimeOUT(секунды): " + СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "Обработки.РМК.МодульМенеджера");
	Исключение
		Сообщить(ОписаниеОшибки());
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ОправитьНомерВерсииКонфигурацииУФР().TimeOUT_ERROR",  "TimeOUT(секунды): " + СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "Обработки.РМК.МодульМенеджера");
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ОправитьНомерВерсииКонфигурацииУФР()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщиеМодули.ВебСервисы");
		
		Возврат Ложь
	КонецПопытки;	
	
	Возврат Истина
КонецФункции	

Функция РОЗНИЦА_ОправитьНомерВерсииКонфигурацииУФР1(ПараметрыФР) Экспорт 	
	
	//ТО_МодельФР																= Константы.ТО_МодельФР.Получить();
	Попытка	
		ТО_МодельФР = ПараметрыФР.ФР_МиниФП82_РевизияДрайвера;
	Исключение
		ТО_МодельФР = 0;
	КонецПопытки;	
	
		
	НомМаг 			= СокрЛП(Константы.осн_КассаККМ.Получить().НомерМагазина);
	СерийныйНомерФР = СокрЛП(Константы.осн_КассаККМ.Получить().Наименование);
      		
	Параметры = Новый Структура;
	Параметры.Вставить("НомерМагазина", 			НомМаг);
	Параметры.Вставить("СерийныйНомерФР", 			СерийныйНомерФР);
	Параметры.Вставить("Версия1С",               	Метаданные.Версия);
	Параметры.Вставить("МодельДрайвераФР", 			ПараметрыФР.ФР_ВерсияБиблиотекиDLL);
	Параметры.Вставить("ДоступЗакрыт_BPMonline",   	Константы.BPMonline_НеИспользовать.Получить());
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	Param = Сериализатор.ЗаписатьXDTO(Параметры);
	
	Попытка
		ВремяСтартаЗапроса = ТекущаяДата();
		
		// Оправим данные
		Прокси = ПодключитьПрокси("UpdateParam?Wsdl", СокрЛП("http://prostor.ua/sale"), "UpdateParam", 5);
		Ответ = Прокси.AskVersion_1C(Param);
		
		Логирование.ДобавитьЗаписьЖурнала(, "РОЗНИЦА_ОправитьНомерВерсииКонфигурацииУФР().TimeOUT",  "TimeOUT(секунды): " + СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "Обработки.РМК.МодульМенеджера");
	Исключение
		Сообщить(ОписаниеОшибки());
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ОправитьНомерВерсииКонфигурацииУФР().TimeOUT_ERROR",  "TimeOUT(секунды): " + СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "Обработки.РМК.МодульМенеджера");
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ОправитьНомерВерсииКонфигурацииУФР()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщиеМодули.ВебСервисы");
		
		Возврат Ложь
	КонецПопытки;	
	
	Возврат Истина
КонецФункции	

Функция РОЗНИЦА_ПолучитьОбновленияДляКонфигурацииУФР(ПериодическаяПроверкаОбновлений = Ложь) Экспорт 
	
	ПодразделениеКод														= СокрЛП(Константы.осн_Подразделение.Получить().Код);
	СерийныйНомерФР    														= СокрЛП(Константы.осн_КассаККМ.Получить().Наименование);
      		
	Параметры																= Новый Структура;
	Параметры.Вставить("ПодразделениеКод", 			ПодразделениеКод);
	Параметры.Вставить("СерийныйНомерФР", 			СерийныйНомерФР);
	Параметры.Вставить("ВерсияКонфигурации",        Метаданные.Версия);
	
	Сериализатор 															= Новый СериализаторXDTO(ФабрикаXDTO);
	Param 																	= Сериализатор.ЗаписатьXDTO(Параметры);
	
	РезультатФункции														= Новый Структура;
	РезультатФункции.Вставить("УстановкаОбновлений", 				Ложь);
	РезультатФункции.Вставить("ИмяФайлаОбновлений", 				"");
	РезультатФункции.Вставить("НомерНовойВерсии", 					"");
	РезультатФункции.Вставить("ПодтверждениеКассира", 				Ложь);
	
	Попытка
		ВремяСтартаЗапроса													= ТекущаяДата();
		
		// Оправим данные
		Прокси																= ПодключитьПрокси("UpdateParam?Wsdl", СокрЛП("http://prostor.ua/sale"), "UpdateParam", 30);
		Ответ																= Прокси.UpdateConfig_UFR(Param);
		
		Сериализатор 														= Новый СериализаторXDTO(ФабрикаXDTO);
		Ответ_XDTO 															= Сериализатор.ПрочитатьXDTO(Ответ);
		// Дьяченко 03.12.2019 
		// проверка обновлений во время выгрузки данных на сервер
		Если ПериодическаяПроверкаОбновлений = Истина Тогда 
			Если НЕ ПустаяСтрока(Ответ_XDTO.ХранилищеДанных) Тогда
				РезультатПроверкиВерсии = Новый Структура;
				РезультатПроверкиВерсии.Вставить("НомерНовойВерсии", Ответ_XDTO.НомерНовойВерсии);
				Возврат РезультатПроверкиВерсии;
			Иначе 
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;	
		// Дьяченко		
		Если НЕ ПустаяСтрока(Ответ_XDTO.ХранилищеДанных) Тогда 
			УдалитьФайлы(КаталогВременныхФайлов() + Ответ_XDTO.Имя);
			
			ДвоичныеДанные 													= Ответ_XDTO.ХранилищеДанных.Получить();
			ДвоичныеДанные.Записать(КаталогВременныхФайлов() + Ответ_XDTO.Имя);
			
			РезультатФункции												= Новый Структура;
			РезультатФункции.Вставить("УстановкаОбновлений", 				Истина);
			РезультатФункции.Вставить("ИмяФайлаОбновлений", 				Ответ_XDTO.Имя);
			РезультатФункции.Вставить("НомерНовойВерсии", 					Ответ_XDTO.НомерНовойВерсии);
			РезультатФункции.Вставить("ПодтверждениеКассира", 				Ответ_XDTO.ПодтверждениеКассира);
			
			Сообщить("Для этой кассы ДОСТУПНЫ ОБНОВЛЕНИЯ на сервере ..."); 
			Сообщить(Метаданные.Версия + " => " + Ответ_XDTO.НомерНовойВерсии); 
		КонецЕсли;

				
		Логирование.ДобавитьЗаписьЖурнала(, "РОЗНИЦА_ПолучитьОбновленияДляКонфигурацииУФР().TimeOUT",  "TimeOUT(секунды): " + СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "Обработки.РМК.МодульМенеджера");
	Исключение
		Сообщить(ОписаниеОшибки());
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ПолучитьОбновленияДляКонфигурацииУФР().TimeOUT_ERROR",  "TimeOUT(секунды): " + СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "Обработки.РМК.МодульМенеджера");
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ПолучитьОбновленияДляКонфигурацииУФР()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщиеМодули.ВебСервисы");
		
		Возврат РезультатФункции
	КонецПопытки;	
	
	Возврат РезультатФункции
КонецФункции

Процедура РОЗНИЦА_УстановитьОбщиеНастройкиУФР() Экспорт
	ПодразделениеКод														= СокрЛП(Константы.осн_Подразделение.Получить().Код);
	СерийныйНомерФР    														= СокрЛП(Константы.осн_КассаККМ.Получить().Наименование);
	//Кудря 210619 Отключаем загрузку параметров для тестовой кассы
	Если Константы.ТестоваяКасса.Получить() Тогда
		Возврат;
	КонецЕсли;
	//Кудря
	Параметры																= Новый Структура;
	Параметры.Вставить("ПодразделениеКод", 			ПодразделениеКод);
	Параметры.Вставить("СерийныйНомерФР", 			СерийныйНомерФР);
	
	Сериализатор 															= Новый СериализаторXDTO(ФабрикаXDTO);
	Param 																	= Сериализатор.ЗаписатьXDTO(Параметры);
	
	РезультатФункции														= Новый Структура;
	РезультатФункции.Вставить("Результат", 									Ложь);
	
	Попытка
		ВремяСтартаЗапроса													= ТекущаяДата();
		
		// Оправим данные
		Прокси																= ПодключитьПрокси("UpdateParam?Wsdl", СокрЛП("http://prostor.ua/sale"), "UpdateParam", 5);
		Ответ																= Прокси.SetParam_UFR(Param);
		
		Сериализатор 														= Новый СериализаторXDTO(ФабрикаXDTO);
		Ответ_XDTO 															= Сериализатор.ПрочитатьXDTO(Ответ);
			
		РезультатФункции													= Новый Структура;
		РезультатФункции.Вставить("Результат", 								Истина);
		РезультатФункции.Вставить("ЗакрытьДоступ_BPMonline", 				Ответ_XDTO.ЗакрытьДоступ_BPMonline);
		РезультатФункции.Вставить("BPM_Версия", 							Ответ_XDTO.BPM_Версия);
		РезультатФункции.Вставить("ТО_POSтерминал_НовыйВидВозврата", 		Ответ_XDTO.ТО_POSтерминал_НовыйВидВозврата);
		РезультатФункции.Вставить("FISHKA",									Ответ_XDTO.FISHKA);
		РезультатФункции.Вставить("Fishka_New_API",							Ответ_XDTO.Fishka_New_API);
		РезультатФункции.Вставить("Fishka_URL",								Ответ_XDTO.Fishka_URL);
		РезультатФункции.Вставить("Fishka_МинимальнаяСумма",				Ответ_XDTO.Fishka_МинимальнаяСумма);
		РезультатФункции.Вставить("BPM_ОтправлятьВсеЧеки",					Ответ_XDTO.КонтрольОстатков);
		РезультатФункции.Вставить("Розница_Сервер",							Ответ_XDTO.Розница_Сервер);
		РезультатФункции.Вставить("РегистрацияВПроцессинге",				Ответ_XDTO.РегистрацияВПроцессинге);
		
		Константы.BPMonline_НеИспользовать.Установить(РезультатФункции.ЗакрытьДоступ_BPMonline);
		Константы.ТО_POSтерминал_НовыйВидВозврата.Установить(РезультатФункции.ТО_POSтерминал_НовыйВидВозврата);
		//Дьяченко А.
		//Константы.FISHKA_НовыйAPI.Установить(РезультатФункции.Fishka_New_API);
		Константы.FISHKA_URL.Установить(РезультатФункции.Fishka_URL);
		Константы.FISHKA_МинимальнаяСумма.Установить(РезультатФункции.Fishka_МинимальнаяСумма);
		Константы.BPM_ОтправлятьВсеЧеки.Установить(РезультатФункции.BPM_ОтправлятьВсеЧеки);
		Константы.BPM_РегистрацияВПроцессинге.Установить(РезультатФункции.BPM_РегистрацияВПроцессинге);
		
		Если РезультатФункции.Розница_Сервер <> "" Тогда
			Константы.Розница_Сервер.Установить(РезультатФункции.Розница_Сервер);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Константы.Розница_КодКассы.Получить()) Тогда
			Константы.Розница_КодКассы.Установить(Константы.осн_КассаККМ.Получить().Код);
		КонецЕсли;
		
		Логирование.ДобавитьЗаписьЖурнала(, "РОЗНИЦА_ПолучитьОбщиеНастройкиУФР().TimeOUT",  "TimeOUT(секунды): " + СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "Обработки.РМК.МодульМенеджера");
	Исключение
		Сообщить(ОписаниеОшибки());
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ПолучитьОбщиеНастройкиУФР().TimeOUT_ERROR",  "TimeOUT(секунды): " + СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "Обработки.РМК.МодульМенеджера");
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ПолучитьОбщиеНастройкиУФР()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщиеМодули.ВебСервисы");
		
	КонецПопытки;	
	
КонецПроцедуры

Функция РОЗНИЦА_ОтправитьLogFile(ДатаВыгрузки) Экспорт 
			
	РезультатФункции														= Новый Структура;
	РезультатФункции.Вставить("Результат", 			Ложь);
	РезультатФункции.Вставить("ТекстСообщения", 	"");
	
	ПараметрыАрхива															= СоздатьLogFile(ДатаВыгрузки);
	
	ХранилищеДанных 														= Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПараметрыАрхива.ПолныйАдресАрхива), Новый СжатиеДанных(9));
	
	Параметры																= Новый Структура;
	Параметры.Вставить("ИмяПодкаталога", 			Формат(ДатаВыгрузки, "ДФ=ггггММдд"));
	Параметры.Вставить("ИмяФайла", 					ПараметрыАрхива.ИмяАрхива);
	
	Сериализатор 															= Новый СериализаторXDTO(ФабрикаXDTO);
	Param																	= Сериализатор.ЗаписатьXDTO(Параметры);
	
	Попытка
		ВремяСтартаЗапроса													= ТекущаяДата();
		
		// Оправим данные
		Прокси																= ПодключитьПрокси("UpdateParam?Wsdl", СокрЛП("http://prostor.ua/sale"), "UpdateParam", 15);
		Ответ																= Прокси.PutLogFile(ХранилищеДанных, Param);
		
		Логирование.ДобавитьЗаписьЖурнала(, "РОЗНИЦА_ОтправитьLogFile().TimeOUT",  "TimeOUT(секунды): " + СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "Обработки.РМК.МодульМенеджера");
		Логирование.ДобавитьЗаписьЖурнала(, "РОЗНИЦА_ОтправитьLogFile()",  "Файл отправлен: " + ПараметрыАрхива.ИмяАрхива, Неопределено, Неопределено, "Обработки.РМК.МодульМенеджера");
	Исключение
		Сообщить(ОписаниеОшибки());
		
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ОтправитьLogFile().TimeOUT_ERROR",  "TimeOUT(секунды): " + СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "Обработки.РМК.МодульМенеджера");
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ОтправитьLogFile()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщиеМодули.ВебСервисы");

		РезультатФункции.Результат											= Ложь;
		РезультатФункции.ТекстСообщения										= ОписаниеОшибки();
	
		Возврат РезультатФункции
	КонецПопытки;	
	
	РезультатФункции.Результат												= Истина;
	РезультатФункции.ТекстСообщения											= Ответ;
	
	Возврат РезультатФункции

	
КонецФункции	

Функция РОЗНИЦА_ПолучитьТекущийСтатусПС(ШК_ПС) Экспорт
	
	Попытка
		// Оправим данные
		Прокси																= ПодключитьПрокси("Certificate?Wsdl", СокрЛП("http://prostor.ua/sale"), "Certificate", 5);
		ТЗ_Ответ															= Прокси.GetCertificateInfo(ШК_ПС);
		
		Сериализатор 														= Новый СериализаторXDTO(ФабрикаXDTO);
		ТЗ_Ответ_XDTO														= Сериализатор.ПрочитатьXDTO(ТЗ_Ответ);
	
		Если ТЗ_Ответ_XDTO.Свойство("СтатусПС") И НЕ ПустаяСтрока(ТЗ_Ответ_XDTO.СтатусПС) Тогда 
			Результат														= Новый Структура;
			Результат.Вставить("Период", 			ТЗ_Ответ_XDTO.Период);
			Результат.Вставить("ШК_ПС", 			ШК_ПС);
			Результат.Вставить("НоминалПС", 		ТЗ_Ответ_XDTO.НоминалПС);
			Результат.Вставить("СтатусПС",			ТЗ_Ответ_XDTO.СтатусПС);
		Иначе 	
		   	Результат														= Новый Структура;
			Результат.Вставить("Период", 			Дата(1,1,1));
			Результат.Вставить("ШК_ПС", 			ШК_ПС);
			Результат.Вставить("НоминалПС", 		0);
			Результат.Вставить("СтатусПС",			"");
		КонецЕсли;	
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "ПолучитьТекущийСтатусПС()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщиеМодули.ВебСервисы");
		
		Результат														= Новый Структура;
		Результат.Вставить("Период", 			Дата(1,1,1));
		Результат.Вставить("ШК_ПС", 			ШК_ПС);
		Результат.Вставить("НоминалПС", 		0);
		Результат.Вставить("СтатусПС",			"");
	КонецПопытки;	


	Возврат Результат
	
КонецФункции	

Процедура РОЗНИЦА_ОтправитьДанныеНеудачнойРегистрацииКлиентов()Экспорт 
	Прокси = ОбщегоНазначения.ПолучитьПрокси("http://cl-as-03/roznica/ws/bpm.1cws?wsdl","Store","Webservice19","BPM","BPM"); 
	URI = "bpm";
	ТипContactArray = Прокси.ФабрикаXDTO.Тип(URI,"ContactArray");
	ТипContactInfo = Прокси.ФабрикаXDTO.Тип(URI,"ContactInfo");
	ContactArray = Прокси.ФабрикаXDTO.Создать(ТипContactArray);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрационныеДанныеКлиентов.НомерТелефона,
	|	РегистрационныеДанныеКлиентов.ШКБонуснойКарты,
	|	РегистрационныеДанныеКлиентов.ФИО,
	|	РегистрационныеДанныеКлиентов.ДатаРождения,
	|	РегистрационныеДанныеКлиентов.Пол,
	|	РегистрационныеДанныеКлиентов.ПодразделениеКод
	|ИЗ
	|	РегистрСведений.РегистрационныеДанныеКлиентов КАК РегистрационныеДанныеКлиентов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ContactInfo = Прокси.ФабрикаXDTO.Создать(ТипContactInfo);
		ContactInfo.Phone = Выборка.НомерТелефона;
		ContactInfo.Card = Выборка.ШКБонуснойКарты;
		ContactInfo.ContactFIO = Выборка.ФИО;
		ContactInfo.Birthday = Выборка.ДатаРождения;
		ContactInfo.Gender = Выборка.Пол;
		Попытка
			ContactInfo.StoreCode = Выборка.ПодразделениеКод;
		Исключение
			Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "РОЗНИЦА_ОтправитьДанныеНеудачнойРегистрацииКлиентов()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщиеМодули.ВебСервисы");
		КонецПопытки;
		ContactArray.Contacts.Добавить(ContactInfo);
	КонецЦикла;
	Попытка
		НачатьТранзакцию();
		РезультатSetContacts = Прокси.SetContacts(ContactArray);
		
		Если РезультатSetContacts = Истина Тогда 
			ЗаписиОчистить = РегистрыСведений.РегистрационныеДанныеКлиентов.СоздатьНаборЗаписей();
			ЗаписиОчистить.Записать();
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
		
КонецПроцедуры

Процедура РОЗНИЦА_ОтправитьЗарегистрированныеБонусныеКарты() Экспорт 
	
	Прокси = ОбщегоНазначения.ПолучитьПрокси("http://cl-as-03/roznica/ws/bpm.1cws?wsdl","Store","Webservice19","BPM","BPM"); 
	URI = "bpm";
	ТипCardsArray = Прокси.ФабрикаXDTO.Тип(URI,"CardsArray");
	ТипCardsInfo = Прокси.ФабрикаXDTO.Тип(URI,"CardsInfo");
	CardsArray = Прокси.ФабрикаXDTO.Создать(ТипCardsArray);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарегистрированныеБонусныеКарты.ШК_БонуснойКарты,
		|	ЗарегистрированныеБонусныеКарты.ПодразделениеКод,
		|	ЗарегистрированныеБонусныеКарты.ДатаРегистрации
		|ИЗ
		|	РегистрСведений.ЗарегистрированныеБонусныеКарты КАК ЗарегистрированныеБонусныеКарты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		CardsInfo = Прокси.ФабрикаXDTO.Создать(ТипCardsInfo);
		CardsInfo.CardNum = Выборка.ШК_БонуснойКарты;
		CardsInfo.StoreCode =  Выборка.ПодразделениеКод;
		CardsInfo.DateRegistration = Выборка.ДатаРегистрации;
		CardsArray.Cards.Добавить(CardsInfo)
	КонецЦикла;
	Попытка
		НачатьТранзакцию();
		РезультатSetBonusCards = Прокси.SetBonusCards(CardsArray);
		
		Если РезультатSetBonusCards = Истина Тогда 
			ЗаписиОчистить = РегистрыСведений.ЗарегистрированныеБонусныеКарты.СоздатьНаборЗаписей();
			ЗаписиОчистить.Записать();
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры	

Функция РОЗНИЦА_ПолучитьЧекИзЧековойСтатистики(НомерЧека, ДатаЧека) Экспорт 
	
	ПодразделениеКод 	= СокрЛП(Константы.осн_Подразделение.Получить().Код);
	СерийныйНомерФР 	= СокрЛП(Константы.осн_КассаККМ.Получить().Наименование);
	НомерМагазина 		= Число(Константы.осн_КассаККМ.Получить().НомерМагазина);
	
	Попытка
		Прокси		= ПодключитьПрокси("Sale?Wsdl", СокрЛП("http://prostor.ua/sale"), "Sale", 5);		
		//ТЗ_Ответ	= Прокси.ПолучитьЧекККМ("00044", "ПР8201100532", НомерЧека, ДатаЧека);//ВРЕМЕННО
		ТЗ_Ответ	= Прокси.ПолучитьЧекККМ(ПодразделениеКод, СерийныйНомерФР, НомерЧека, ДатаЧека);
		
		Если НЕ ТЗ_Ответ.Результат Тогда
			Сообщить(ТЗ_Ответ.ТекстСообщения, СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаШапка = ТЗ_Ответ.Шапка.Получить();
		ДокЧекККМОбъект = Документы.ЧекККМ.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокЧекККМОбъект, ТаблицаШапка[0]);
		ДокЧекККМОбъект.УстановитьНовыйНомер();
		ДокЧекККМОбъект.НомерЧекаККМ_ТекущейСмены = ТаблицаШапка[0].НомерЧекаККМ_ТекущейСмены;
		ДокЧекККМОбъект.ОтправленНаСервер = Истина;
		
		ДокЧекККМОбъект.КассаККМ = Константы.осн_КассаККМ.Получить();
		ДокЧекККМОбъект.Подразделение = Константы.осн_Подразделение.Получить();
		
		ДокЧекККМОбъект.BPMonline_СостояниеЧекаККМ 	= ОбщегоНазначения.ПолучитьПеречислениеПоСинониму("СостояниеBPMonline", ТаблицаШапка[0].BPMonline_СостояниеЧекаККМ);
		ДокЧекККМОбъект.FISHKA_СостояниеЧекаККМ 	= ОбщегоНазначения.ПолучитьПеречислениеПоСинониму("FISHKA_СостояниеЧекаККМ", ТаблицаШапка[0].FISHKA_СостояниеЧекаККМ);
		ДокЧекККМОбъект.ВидОперацииЧекаККМ			= ОбщегоНазначения.ПолучитьПеречислениеПоСинониму("ВидыОперацийЧекККМ", ТаблицаШапка[0].ВидОперацииЧекаККМ);
		ДокЧекККМОбъект.СостояниеЧекаККМ 			= ОбщегоНазначения.ПолучитьПеречислениеПоСинониму("СостояниеЧека", ТаблицаШапка[0].СостояниеЧекаККМ);
		
		ТаблицаТовары = ТЗ_Ответ.ТЧ_Товары.Получить();
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			НоваяСтрокаТовары = ДокЧекККМОбъект.ТЧ_Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
			НоваяСтрокаТовары.ВидОперации = ОбщегоНазначения.ПолучитьПеречислениеПоСинониму("ВидыОперацийЧекККМ", СтрокаТовары.ВидОперации);
			НоваяСтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;//нет в чековой
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("CODE", ОбщегоНазначения.УбратьИзКодаВедущиеНули(НоваяСтрокаТовары.Код));
	 		//СтруктураОтбора.Вставить("CODE", НоваяСтрокаТовары.Код);
	 		ТаблицаДанных = РегистрыСведений.Прайс.СрезПоследних(ДокЧекККМОбъект.Дата, СтруктураОтбора);
	
			Если ТаблицаДанных.Количество() <> 0 Тогда
				НоваяСтрокаТовары.ШК = ТаблицаДанных[0].BAR;
			КонецЕсли;	
	
		КонецЦикла;	
		
		ТаблицаСкидки = ТЗ_Ответ.ТЧ_ЖурналСкидок.Получить();
		ДокЧекККМОбъект.ТЧ_ЖурналСкидок.Загрузить(ТаблицаСкидки);
		
		ТаблицаПС = ТЗ_Ответ.ТЧ_ДвиженияПС.Получить();
		ДокЧекККМОбъект.ТЧ_ДвиженияПС.Загрузить(ТаблицаПС);
		
		ДокЧекККМОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Сообщить("Записан документ " + ДокЧекККМОбъект);
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Информация, "Запись чека в рознице.", "Записан новый (утеряный) чек по данным из чековой статистики " + ДокЧекККМОбъект.НомерЧекаККМ, Неопределено, Неопределено, "ОбщийМодуль.ВебСервисыЧековаяСтатистика.РОЗНИЦА_ПолучитьЧекИзЧековойСтатистики()");
		
		Возврат Истина;
		
	Исключение
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "Ошибка записи чека в рознице.", "Не удалось записан новый (утеряный) чек по данным из чековой статистики №" + НомерЧека + " от " + ДатаЧека, Неопределено, Неопределено, "ОбщийМодуль.ВебСервисыЧековаяСтатистика.РОЗНИЦА_ПолучитьЧекИзЧековойСтатистики()");
	КонецПопытки;	
	
КонецФункции
	
#КонецОбласти

#Область Розница_вспомогательные

Функция ПодключитьПрокси(WSDL, URIПространстваИменСервиса, ИмяСервиса, Таймаут)
																				
	НастройкаОбменаДанными = Новый Структура;
	//НастройкаОбменаДанными.Вставить("WSАдрес",				"http://1c.prostor.ua/roznica/ws/" + WSDL);//ВРЕМЕННО тест
	НастройкаОбменаДанными.Вставить("WSАдрес",				"http://test-as-02/checksTEST/ws/" + WSDL);
	НастройкаОбменаДанными.Вставить("WSПользователь",		"Web");
	НастройкаОбменаДанными.Вставить("WSПароль",				"Web2016");
    НастройкаОбменаДанными.Вставить("WSПространствоИмен", 	"http://prostor.ua/sale");
    НастройкаОбменаДанными.Вставить("WSНаименование",		ИмяСервиса);
		
	
	Определение = Новый WSОпределения(	СокрЛП(НастройкаОбменаДанными.WSАдрес), 
										СокрЛП(НастройкаОбменаДанными.WSПользователь), 
										СокрЛП(НастройкаОбменаДанными.WSПароль), 
										Таймаут);
			
	Прокси = Новый WSПрокси(Определение, 
							СокрЛП(НастройкаОбменаДанными.WSПространствоИмен),
							СокрЛП(НастройкаОбменаДанными.WSНаименование), 
							СокрЛП(НастройкаОбменаДанными.WSНаименование) + "Soap", 
							Таймаут);
			
	Прокси.Пользователь = СокрЛП(НастройкаОбменаДанными.WSПользователь);
	Прокси.Пароль = СокрЛП(НастройкаОбменаДанными.WSПароль);

	Возврат	Прокси
КонецФункции	

Функция СоздатьLogFile(ДатаВыгрузки)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("_$PerformError$_");
	МассивСтрок.Добавить("_$Session$_.Start");
	МассивСтрок.Добавить("_$Session$_.Finish");
    МассивСтрок.Добавить("_$Session$_.Authentication");
    МассивСтрок.Добавить("_$Session$_.AuthenticationError");
    МассивСтрок.Добавить("_$User$_.Delete");
    МассивСтрок.Добавить("_$User$_.New");
    МассивСтрок.Добавить("_$User$_.Update");
	МассивСтрок.Добавить("_$Job$_.Cancel");
    МассивСтрок.Добавить("_$Job$_.Fail");
    МассивСтрок.Добавить("_$Job$_.Start");
    МассивСтрок.Добавить("_$Job$_.Succeed");
    МассивСтрок.Добавить("_$User$_.New");
    МассивСтрок.Добавить("_$User$_.Update");
	МассивСтрок.Добавить("_$Access$_.Access");
    МассивСтрок.Добавить("_$Access$_.AccessDenied");
	//МассивСтрок.Добавить("_$Data$_.Delete");
	//МассивСтрок.Добавить("_$Data$_.New");
	//МассивСтрок.Добавить("_$Data$_.Update");
    МассивСтрок.Добавить("_$InfoBase$_.ConfigUpdate");
	МассивСтрок.Добавить("_$InfoBase$_.DBConfigUpdate");
    МассивСтрок.Добавить("_$InfoBase$_.EventLogSettingsUpdate");
    МассивСтрок.Добавить("_$InfoBase$_.InfoBaseAdmParamsUpdate");
    МассивСтрок.Добавить("_$InfoBase$_.MasterNodeUpdate");
    МассивСтрок.Добавить("_$InfoBase$_.RegionalSettingsUpdate");
    МассивСтрок.Добавить("_$InfoBase$_.TARImportant");
    МассивСтрок.Добавить("_$InfoBase$_.TARInfo");
    МассивСтрок.Добавить("_$InfoBase$_.TARMess");
	МассивСтрок.Добавить("Comment");   //РабочееМестоРозничногоПродавца
    
	МассивСтрок.Добавить("Обработки.РМК.Формы.Форма");
    МассивСтрок.Добавить("Обработки.РМК.Формы.ФормаПередОткрытием");
	МассивСтрок.Добавить("Обработки.РМК.Формы.Форма_СканированиеБК");
    МассивСтрок.Добавить("Обработки.РМК.Формы.ФормаОплатыЧека");
    //МассивСтрок.Добавить("Обработки.РМК.Формы.ВыгрузкаXML");
    МассивСтрок.Добавить("Обработки.РМК.Формы.ФормаВозврат");
    МассивСтрок.Добавить("Обработки.РМК.Формы.Форма.BPM7_АктивацияЧерезСМС");	
	МассивСтрок.Добавить("Обработки.РМК.Формы.Форма.BPM7_РегистрацияЧерезСМС");	
	МассивСтрок.Добавить("Обработки.РМК.Формы.Форма.FISHKA_ОплатаЧерезСМС");
	
	МассивСтрок.Добавить("ОбщиеФормы.ФормаКонстантФискальногоРегистратора");  
	МассивСтрок.Добавить("ОбщиеФормы.ФормаОПрограмме");
	МассивСтрок.Добавить("ОбщиеФормы.Выгрузка");
	
	МассивСтрок.Добавить("ОбщиеМодули.BPM");  
	МассивСтрок.Добавить("ОбщиеМодули.Fishka");	
	МассивСтрок.Добавить("ОбщиеМодули.ВебСервисыРТК");
	МассивСтрок.Добавить("ОбщиеМодули.ВебСервисыЧековаяСтатистика");
	МассивСтрок.Добавить("ОбщиеМодули.ЗакрытиеСмены");
	МассивСтрок.Добавить("ОбщиеМодули.МеханизмыСкидокИАкций");
	МассивСтрок.Добавить("ОбщиеМодули.ОбновлениеБД");
	МассивСтрок.Добавить("ОбщиеМодули.ОткрытиеСмены");
	МассивСтрок.Добавить("ОбщиеМодули.РаботаСПользователями");
	МассивСтрок.Добавить("ОбщиеМодули.ОткрытиеСмены");
	МассивСтрок.Добавить("ОбщиеМодули.РаботаСЧеком");
	МассивСтрок.Добавить("ОбщиеМодули.РабочееМестоКассира");  
	МассивСтрок.Добавить("ОбщиеМодули.ТО_Терминал");  
	МассивСтрок.Добавить("ОбщиеМодули.ТО_ФР");  
	МассивСтрок.Добавить("Обработки.ТО_IKC_E260T");
    МассивСтрок.Добавить("Обработки.ТО_MINI_FP82");
	МассивСтрок.Добавить("Обработки.ТО_IKC_E810T");
	МассивСтрок.Добавить("Обработки.ТО_Datecs_FP_3530T");
	МассивСтрок.Добавить("Обработки.ТО_POSтерминал_ПриватБанк");
	МассивСтрок.Добавить("Обработки.ТО_POSтерминал_ПУМБ");
	МассивСтрок.Добавить("Обработки.ТО_POSтерминал_ОщадБанк");

	
	МассивСтрок.Добавить("Обработки.РМК.МодульМенеджера");
	МассивСтрок.Добавить("Обработки.РМК.МодульОбъекта");
		
	НомерМагазина		= СокрЛП(Константы.осн_КассаККМ.Получить().НомерМагазина);
	СерийныйНомерФР		= СокрЛП(Константы.осн_КассаККМ.Получить().СерийныйНомерФР_латиница);	
	
	ИмяПодкаталога 		= "LogFile";
	ПолныйАдресКаталога = глПуть + ИмяПодкаталога + "\";	
	
	ИмяАрхива			= НомерМагазина+"_"+СерийныйНомерФР+"_"+ Формат(ДатаВыгрузки, "ДФ=ггггММдд")+"LogFile.zip";
	ПолныйАдресАрхива	= ПолныйАдресКаталога + ИмяАрхива;

	ИмяФайлаXML			= НомерМагазина+"_"+СерийныйНомерФР+"_"+ Формат(ДатаВыгрузки, "ДФ=ггггММдд")+"LogFile.xml";
	МаскаФайлаXML		= НомерМагазина+"_"+СерийныйНомерФР+"_"+ Формат(ДатаВыгрузки, "ДФ=ггггММдд")+"*.xml";
	ПолныйАдресФайлаXML	= ПолныйАдресКаталога + ИмяФайлаXML;
	
	СоздатьКаталог(ПолныйАдресКаталога);												
	
	Отбор = Новый Структура("ДатаНачала, ДатаОкончания, Событие", НачалоДня(ДатаВыгрузки), КонецДня(ДатаВыгрузки), МассивСтрок);
	ПоляТаблицы = "Level, Date, User, Computer, Comment, UserName, ApplicationPresentation, EventPresentation, Session";						
	ВыгрузитьЖурналРегистрации(ПолныйАдресФайлаXML, Отбор, ПоляТаблицы,,);

	Архив = Новый ЗаписьZipФайла(ПолныйАдресАрхива, РаботаСПользователями.ПолучитьПараметры("Почтальон"));
	Архив.Добавить(ПолныйАдресФайлаXML);	
	Архив.Записать();
	
	УдалитьФайлы(ПолныйАдресКаталога,  МаскаФайлаXML);
	// Дьяченко 29.11.2019	
	ПроверитьВыгрузкуЛогФайла(ДатаВыгрузки, ИмяПодкаталога, ПолныйАдресКаталога);
	
	ПараметрыАрхива = Новый Структура;
	ПараметрыАрхива.Вставить("Резульат", Истина);
	ПараметрыАрхива.Вставить("ИмяАрхива", ИмяАрхива);
	ПараметрыАрхива.Вставить("ПолныйАдресАрхива", ПолныйАдресАрхива);
	
	Возврат ПараметрыАрхива;
	
КонецФункции	

Процедура ПроверитьВыгрузкуЛогФайла(ДатаВыгрузки, ИмяПодкаталога, ПолныйАдресКаталога)
	//ПолныйАдресКаталога = глПуть + ИмяПодкаталога+"\";	
	МаскаФайлаXML = "*" + Формат(ДатаВыгрузки, "ДФ=ггггММдд") + "LogFile.xml";
	Найденныйфайл = НайтиФайлы(ПолныйАдресКаталога, МаскаФайлаXML);	
	АдресПолучателя = "support@prostor.ua";
	Если Найденныйфайл.Количество() > 0 Тогда
		магПодразделение = Константы.осн_Подразделение.Получить();
		ОбщегоНазначения.ОтправитьПоПочте(,АдресПолучателя,магПодразделение,"Не выгружен Лог файл за " + Формат(ДатаВыгрузки, "ДФ=dd.MM.yyyy"));
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти
