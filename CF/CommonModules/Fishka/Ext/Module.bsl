// ОСНОВНЫЕ ПРОЦЕДУРЫ по работе с бонусной системой(БС) FISHKA
#Область Основные
Процедура ИнициализироватьПараметры(ОчиститьОбьект = Истина, ОчиститьШК = Истина) Экспорт
	
	СтарыеПараметрыFISHKA = ПараметрыFISHKA;
	
	// Таблици для хранения результатов после запросов BPMonline
	FISHKA_productListOUT = Новый ТаблицаЗначений;
	FISHKA_productListOUT.Колонки.Добавить("productCode");	// Добавить("code");
	FISHKA_productListOUT.Колонки.Добавить("quantity");
	FISHKA_productListOUT.Колонки.Добавить("amount");
	FISHKA_productListOUT.Колонки.Добавить("finalDiscountAmount");
	FISHKA_productListOUT.Колонки.Добавить("finalAmount");
	FISHKA_productListOUT.Колонки.Добавить("paidByPointsDiscount");
	// Дьяченко
	FISHKA_productListOUT.Колонки.Добавить("code");
	FISHKA_productListOUT.Колонки.Добавить("source");
	FISHKA_productListOUT.Колонки.Добавить("name");

	
	
	ПараметрыFISHKA = Новый Структура;
	
	ПараметрыFISHKA.Вставить("АдресСервера", 					Константы.FISHKA_URL.Получить());//"test.myfishka.com"); 
	ПараметрыFISHKA.Вставить("apiUser", 						"PROSTOR");
	ПараметрыFISHKA.Вставить("apiToken", 						"x6d6g4vf4vfbtww8dc3lsuzujajbpkmx28nfxp34");
	ПараметрыFISHKA.Вставить("posKey", 							Константы.осн_Подразделение.Получить().posCodeFISHKA);//"URLXYDT2BW4R6JW2");
	ПараметрыFISHKA.Вставить("HTTPСоединение", 					?(ОчиститьОбьект,Неопределено,СтарыеПараметрыFISHKA.HTTPСоединение));	
	ПараметрыFISHKA.Вставить("HTTPЗапрос", 						?(ОчиститьОбьект,Неопределено,СтарыеПараметрыFISHKA.HTTPЗапрос));
	ПараметрыFISHKA.Вставить("КодОшибки", 						?(ОчиститьОбьект,1,СтарыеПараметрыFISHKA.КодОшибки));  // 0 - ВСЕ ОК; НЕ 0 - ОШИБКА;   
	ПараметрыFISHKA.Вставить("ОписаниеОшибки", 					?(ОчиститьОбьект,"",СтарыеПараметрыFISHKA.ОписаниеОшибки));
	ПараметрыFISHKA.Вставить("ЗапросJSON", 						?(ОчиститьОбьект,"",СтарыеПараметрыFISHKA.ЗапросJSON));
	ПараметрыFISHKA.Вставить("ОтветJSON", 						?(ОчиститьОбьект,Новый Соответствие(),СтарыеПараметрыFISHKA.ОтветJSON));		
	ПараметрыFISHKA.Вставить("ПолныйРезультат", 				?(ОчиститьОбьект,"",СтарыеПараметрыFISHKA.ПолныйРезультат));
		
	ПараметрыFISHKA.Вставить("FISHKA_ver",						"2");
	ПараметрыFISHKA.Вставить("FISHKA_lng", 						"ua");
	ПараметрыFISHKA.Вставить("FISHKA_partnerCode", 				"043");
	ПараметрыFISHKA.Вставить("FISHKA_placeCode", 				?((СокрЛП(Константы.осн_Подразделение.Получить().Код)= "6"), "DEFAULT", СокрЛП(Константы.осн_Подразделение.Получить().Код)));
	//ПараметрыFISHKA.Вставить("FISHKA_transactionDate", 			Строка((МестноеВремя(ТекущаяУниверсальнаяДата(),"Europe/Kiev") - Дата(1970,1,1)) * 1000));
	//ПараметрыFISHKA.Вставить("FISHKA_transactionDate", 			Строка((ТекущаяУниверсальнаяДата() - Дата(1970,1,1)) * 1000));
	ПараметрыFISHKA.Вставить("FISHKA_transactionDate", 			Строка((ТекущаяУниверсальнаяДата() - Дата(1970,1,1))));

    ПараметрыFISHKA.Вставить("FISHKA_ШК", 						?(ОчиститьШК, "", СтарыеПараметрыFISHKA.FISHKA_ШК));	
	
	ПараметрыFISHKA.Вставить("FISHKA_money", 					?(ОчиститьШК, 		0,  СтарыеПараметрыFISHKA.FISHKA_money));
	ПараметрыFISHKA.Вставить("FISHKA_status", 					?(ОчиститьШК, 		"", СтарыеПараметрыFISHKA.FISHKA_status));
	ПараметрыFISHKA.Вставить("FISHKA_typeCard", 				?(ОчиститьШК, 		"", СтарыеПараметрыFISHKA.FISHKA_typeCard));
	
	ПараметрыFISHKA.Вставить("FISHKA_СостояниеЧекаККМ", 		?(ОчиститьШК, 		Перечисления.FISHKA_СостояниеЧекаККМ.ПростойЧек, Перечисления.FISHKA_СостояниеЧекаККМ.ПросканированнаБК));
	
	ПараметрыFISHKA.Вставить("FISHKA_trnNoPOSFZS", 					"");
	ПараметрыFISHKA.Вставить("FISHKA_trnNoPOSAdd", 					""); //для совместимости с предыдущим апи
	ПараметрыFISHKA.Вставить("FISHKA_documentNo", 					"");
	ПараметрыFISHKA.Вставить("FISHKA_online", 						"0");
	ПараметрыFISHKA.Вставить("FISHKA_pass", 						"");
	ПараметрыFISHKA.Вставить("FISHKA_correctPIN", 					ЛОЖЬ);	
	ПараметрыFISHKA.Вставить("FISHKA_productList", 					Обработки.РМК.Создать().Продажа);	
	ПараметрыFISHKA.Вставить("FISHKA_productListOUT", 				FISHKA_productListOUT);	
	ПараметрыFISHKA.Вставить("FISHKA_payByPoints", 					0);	
	
	//ПараметрыFISHKA.Вставить("FISHKA_ДатаОтправкиЗапроса",					Дата(1,1,1));
	//ПараметрыFISHKA.Вставить("FISHKA_ДатаПолученияОтвета",					Дата(1,1,1));
	
	
КонецПроцедуры	

Функция ПроверкаСвязи() Экспорт
	
	ПараметрыFISHKA.КодОшибки 				= 1;	
	ПараметрыFISHKA.ОписаниеОшибки			= "";
	
	АдресРесурса = "/IntApi/api/tx/ping";
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("lng",ПараметрыFISHKA.FISHKA_lng);
	
	ВыполнитьЗапрос(АдресРесурса, ПараметрыЗапроса);
	
	Если ПараметрыFISHKA.КодОшибки = "0" Тогда
		Возврат Истина;
	Иначе
		ПараметрыFISHKA.HTTPСоединение = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции	

Функция ПроверкаБаланса() Экспорт
		
	ПараметрыFISHKA.КодОшибки 				= 1;	
	ПараметрыFISHKA.ОписаниеОшибки			= "";
	ПараметрыFISHKA.FISHKA_СостояниеЧекаККМ	= Перечисления.FISHKA_СостояниеЧекаККМ.Офлайн;
	
	АдресРесурса = "/IntApi/api/tx/checkCard";
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ver",ПараметрыFISHKA.FISHKA_ver);
	ПараметрыЗапроса.Вставить("lng",ПараметрыFISHKA.FISHKA_lng);
	ПараметрыЗапроса.Вставить("placeCode",ПараметрыFISHKA.FISHKA_placeCode);
	ПараметрыЗапроса.Вставить("partnerCode",ПараметрыFISHKA.FISHKA_partnerCode);
	ПараметрыЗапроса.Вставить("date",ПараметрыFISHKA.FISHKA_transactionDate);
	ПараметрыЗапроса.Вставить("cardNo",ПараметрыFISHKA.FISHKA_ШК);
	ПараметрыЗапроса.Вставить("apiUser",ПараметрыFISHKA.apiUser);
	ПараметрыЗапроса.Вставить("apiToken",ПараметрыFISHKA.apiToken);
	
	СоставСигнатуры = ПараметрыFISHKA.FISHKA_partnerCode + ПараметрыFISHKA.FISHKA_placeCode + ПараметрыFISHKA.FISHKA_ШК;
	ПараметрыЗапроса.Вставить("signature",СформироватьСигнатуру(ПараметрыFISHKA.posKey,СоставСигнатуры));		

	ВыполнитьЗапрос(АдресРесурса,ПараметрыЗапроса);
	Если ПараметрыFISHKA.КодОшибки = "0" Тогда
		Данные = ПараметрыFISHKA.ОтветJSON.Получить("response");
		ПараметрыFISHKA.FISHKA_money											= Число(Данные.Получить("balanceAfter"))/100;
		ПараметрыFISHKA.FISHKA_status											= Данные.Получить("walletStatus");
		ПараметрыFISHKA.FISHKA_typeCard											= "Основная";
		ПараметрыFISHKA.FISHKA_СостояниеЧекаККМ								= Перечисления.FISHKA_СостояниеЧекаККМ.ПросканированнаБК;				
		Логирование.ДобавитьЗаписьЖурнала(, "FISHKA Перевірка балансу", "FISHKA Стан чека ККМ: "+ПараметрыFISHKA.FISHKA_СостояниеЧекаККМ + "; FISHKA_ШК: "+ПараметрыFISHKA.FISHKA_ШК+ "; FISHKA_money: "+ПараметрыFISHKA.FISHKA_money, Неопределено, Неопределено, "ОбщиеМодули.Fishka");		
		Возврат Истина;
	Иначе
		ПараметрыFISHKA.HTTPСоединение = Неопределено;
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

Функция ОперацияПродажа() Экспорт
	Возврат Операция();
КонецФункции

Функция ОперацияОтмена() Экспорт
	Возврат Операция(Истина);
КонецФункции

Функция Операция(ВозвратнаяОперация = Ложь)
	
	ПараметрыFISHKA.КодОшибки	   = 1;	
	ПараметрыFISHKA.ОписаниеОшибки = "";
	
	АдресРесурса = "/IntApi/api/tx/sale";
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ver",ПараметрыFISHKA.FISHKA_ver);
	ПараметрыЗапроса.Вставить("lng",ПараметрыFISHKA.FISHKA_lng);
	ПараметрыЗапроса.Вставить("placeCode",ПараметрыFISHKA.FISHKA_placeCode);
	ПараметрыЗапроса.Вставить("partnerCode",ПараметрыFISHKA.FISHKA_partnerCode);
	ПараметрыЗапроса.Вставить("date",ПараметрыFISHKA.FISHKA_transactionDate);
	ПараметрыЗапроса.Вставить("cardNo",ПараметрыFISHKA.FISHKA_ШК);
	ПараметрыЗапроса.Вставить("reverse",ВозвратнаяОперация);
	ПараметрыЗапроса.Вставить("apiUser",ПараметрыFISHKA.apiUser);
	ПараметрыЗапроса.Вставить("apiToken",ПараметрыFISHKA.apiToken);
	ПараметрыЗапроса.Вставить("attemptNo",ПараметрыFISHKA.FISHKA_online); 	
	ПараметрыЗапроса.Вставить("no", ПараметрыFISHKA.FISHKA_trnNoPOSFZS);			
	Если НЕ ВозвратнаяОперация Тогда
		ПараметрыЗапроса.Вставить("documentNo",ПараметрыFISHKA.FISHKA_documentNo);
		ПараметрыЗапроса.Вставить("paidByPoints",ПараметрыFISHKA.FISHKA_payByPoints);
		Если ЗначениеЗаполнено(ПараметрыFISHKA.FISHKA_pass) Тогда
			ПараметрыЗапроса.Вставить("pass",ПараметрыFISHKA.FISHKA_pass);
		КонецЕсли;
	
		ТаблицаПродажа = Новый ТаблицаЗначений;
		ТаблицаПродажа.Колонки.Добавить("productCode");
		ТаблицаПродажа.Колонки.Добавить("quantity",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3,0)));
		ТаблицаПродажа.Колонки.Добавить("amountGross",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ТаблицаПродажа.Колонки.Добавить("unitPriceGross",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ТаблицаПродажа.Колонки.Добавить("notPromoted",Новый ОписаниеТипов("Булево"));
		ТаблицаПродажа.Колонки.Добавить("skipCB",Новый ОписаниеТипов("Булево"));
		ТаблицаПродажа.Колонки.Добавить("skipDD",Новый ОписаниеТипов("Булево"));
		ТаблицаПродажа.Колонки.Добавить("skipRD",Новый ОписаниеТипов("Булево"));
		
		Для Каждого СтрокаТЧ ИЗ ПараметрыFISHKA.FISHKA_productList Цикл
			Если СтрокаТЧ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Аннуляция 
				ИЛИ СтрокаТЧ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Аннуляция_ТестАкций
				ИЛИ СтрокаТЧ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОтменаНачисленияБонусов	= (СтрокаТЧ.Акционный = 9);
			// Дьяченко - 0.1 оставляем 10 коп на округление
			ЦенаДляFISHKA = (СтрокаТЧ.Цена - СтрокаТЧ.СкидкаСумма/СтрокаТЧ.Количество) - 0.1;
			
			НовСтрока = ТаблицаПродажа.Добавить();
			НовСтрока.productCode 		= Формат(Число(СтрокаТЧ.Код), "ЧЦ=6; ЧН=; ЧВН=; ЧГ=0");
			НовСтрока.quantity			= СтрокаТЧ.Количество;
			НовСтрока.amountGross 		= ЦенаДляFISHKA * СтрокаТЧ.Количество;
			НовСтрока.unitPriceGross 	= ЦенаДляFISHKA;
			НовСтрока.notPromoted	 	= ОтменаНачисленияБонусов;
			НовСтрока.skipCB 			= ОтменаНачисленияБонусов;
			НовСтрока.skipDD 			= ОтменаНачисленияБонусов;
			НовСтрока.skipRD 			= ОтменаНачисленияБонусов;																		
		КонецЦикла;	
		ПараметрыЗапроса.Вставить("basket",ТаблицаПродажа);
	КонецЕсли;
	СоставСигнатуры = ПараметрыFISHKA.FISHKA_partnerCode + ПараметрыFISHKA.FISHKA_placeCode + ПараметрыFISHKA.FISHKA_transactionDate 
					+ ПараметрыFISHKA.FISHKA_trnNoPOSFZS + ?(ВозвратнаяОперация,"1",ПараметрыFISHKA.FISHKA_documentNo) + ПараметрыFISHKA.FISHKA_ШК;
	ПараметрыЗапроса.Вставить("signature",СформироватьСигнатуру(ПараметрыFISHKA.posKey,СоставСигнатуры));
	ПараметрыЗапроса.Вставить("debugSignatureExplain",Истина);
	ВыполнитьЗапрос(АдресРесурса, ПараметрыЗапроса);
	Попытка
		Данные = ПараметрыFISHKA.ОтветJSON.Получить("response");
	Исключение
		ПараметрыFISHKA.ОписаниеОшибки = "Неверный ответ: " +  ПараметрыFISHKA.ПолныйРезультат;
		Возврат Ложь;
	КонецПопытки;
	
	Если ПараметрыFISHKA.КодОшибки = "0" Тогда
		Корзина = Данные.Получить("basket");
		Для Каждого стр Из Корзина Цикл
			СкидкаПоСтроке = стр.Получить("discounts");
			Если СкидкаПоСтроке = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			//НоваяСтрока	= ПараметрыFISHKA.FISHKA_productListOUT.Добавить();
			//НоваяСтрока.code = стр.Получить("productCode");
			//НоваяСтрока.quantity = стр.Получить("quantity");
			//Кудря 09.09.19 скидки по строке с видом BC
			//НоваяСтрока.finalDiscountAmount	= СкидкаПоСтроке[0].Получить("amount");
			суммаСкидки = 0;
			Для Каждого скидка Из СкидкаПоСтроке Цикл
				//ВидСкидки = скидка.Получить("source");
				//Если ВидСкидки = "BC" Тогда
					//суммаСкидки = скидка.Получить("amount");
				//	Прервать;
				//КонецЕсли;
				//РазмерСкидки = скидка.Получить("amount");
				//суммаСкидки  = суммаСкидки + РазмерСкидки;
				// Дьяченко
				НоваяСтрока	= ПараметрыFISHKA.FISHKA_productListOUT.Добавить();
				ВидСкидки = скидка.Получить("source");
				РазмерСкидки = скидка.Получить("amount");
				
				НоваяСтрока.productCode = стр.Получить("productCode");
				НоваяСтрока.quantity = стр.Получить("quantity");
				НоваяСтрока.amount = РазмерСкидки;
				НоваяСтрока.code = скидка.Получить("code");
				НоваяСтрока.source = ВидСкидки;
				НоваяСтрока.name = скидка.Получить("name");
				суммаСкидки  = суммаСкидки + РазмерСкидки;
			КонецЦикла;
			НоваяСтрока.finalDiscountAmount	= суммаСкидки;
			//Кудря
		КонецЦикла;
		ПараметрыFISHKA.FISHKA_СостояниеЧекаККМ	= Перечисления.FISHKA_СостояниеЧекаККМ.Записан;		
		ПараметрыFISHKA.FISHKA_correctPIN = Истина;
		//Логирование.ДобавитьЗаписьЖурнала(, "FISHKA продаж", "FISHKA Стан чека ККМ: "+ПараметрыFISHKA.FISHKA_СостояниеЧекаККМ + "; Повна відповідь: "+ПараметрыFISHKA.ПолныйРезультат, Неопределено, Неопределено, "ОбщиеМодули.Fishka");
		Возврат Истина;
	ИначеЕсли ПараметрыFISHKA.КодОшибки = "AUTH_FAILED_SECRET_REQUIRED" Тогда //Нужно ввести код из смс
		//Логирование.ДобавитьЗаписьЖурнала(, "FISHKA продаж", "FISHKA Вимога введення смс: "+ПараметрыFISHKA.ОписаниеОшибки + "; Повна відповідь: "+ПараметрыFISHKA.ПолныйРезультат, Неопределено, Неопределено, "ОбщиеМодули.Fishka");
		Возврат Истина;
	ИначеЕсли ПараметрыFISHKA.КодОшибки = "AUTH_FAILED_INVALID_SECRET" Тогда
		//Логирование.ДобавитьЗаписьЖурнала(, "FISHKA продаж", "FISHKA Невiрний пароль з смс: "+ПараметрыFISHKA.ОписаниеОшибки + "; Повна відповідь: "+ПараметрыFISHKA.ПолныйРезультат, Неопределено, Неопределено, "ОбщиеМодули.Fishka");
		ПараметрыFISHKA.FISHKA_correctPIN = ЛОЖЬ;
		Возврат Ложь;
	Иначе
		ПараметрыFISHKA.HTTPСоединение	= Неопределено;
		Возврат Ложь;
	КонецЕсли;	
		
КонецФункции	

Процедура СообщитьОбОшибке() Экспорт
	Форма												= ПолучитьОбщуюФорму("ОшибкаFISHKA");
	Форма.Result										= ПараметрыFISHKA.КодОшибки;
	Форма.ОписаниеОшибки								= ПараметрыFISHKA.ОписаниеОшибки;
	Форма.ЗапросТекст                                   = ПараметрыFISHKA.ЗапросJSON;
	Форма.ЗапросРезультат		                        = ПараметрыFISHKA.ПолныйРезультат;
	
	Если Не Форма.Открыта() Тогда
    	Форма.ОткрытьМодально();
	КонецЕсли; 
КонецПроцедуры	

#КонецОбласти

#Область Вспомогательные

Процедура ВыполнитьЗапрос(АдресРесурса, ПараметрыЗапроса)
	Попытка
		ПараметрыFISHKA.ЗапросJSON = СформироватьJSONстроку(ПараметрыЗапроса);
	Исключение
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, "ПроверкаСвязи FISHKA", "ЗапросJSON: " + ОписаниеОшибки(), Неопределено, Неопределено, "ОбщиеМодули.Fishka");
		Возврат;
	КонецПопытки;
	
	Попытка
		ВремяСтартаЗапроса	= ТекущаяДата();
		МассивСтрок = СтрРазделить(АдресРесурса,"/");
		Операция = МассивСтрок.Получить(МассивСтрок.Количество()-1);
		Если Операция = "ping" Тогда
			ИмяПроцедуры = "Перевірка зв`язку з FISHKA";
		ИначеЕсли Операция = "checkCard" Тогда
			ИмяПроцедуры = "Перевірка балансу на FISHKA";
		ИначеЕсли Операция = "sale" Тогда
			ИмяПроцедуры = "Продаж на FISHKA";
		ИначеЕсли Операция = "saleRefund" Тогда
			ИмяПроцедуры = "Повернення на FISHKA";
		Иначе
			ИмяПроцедуры = "ПОМИЛКА: невідома процедура: " + Операция;
		КонецЕсли;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", 	"application/json");
		
		ПроксиСервер = Новый ИнтернетПрокси;
		ПроксиСервер.Установить("https","dp-squid-01.office.styled.dp.ua", 3128);
		
		ПараметрыFISHKA.HTTPСоединение	= Новый HTTPСоединение(ПараметрыFISHKA.АдресСервера, 4104,,,ПроксиСервер,5,Новый ЗащищенноеСоединениеOpenSSL());
		ПараметрыFISHKA.HTTPЗапрос 		= Новый HTTPЗапрос(АдресРесурса, Заголовки);	
		ПараметрыFISHKA.HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыFISHKA.ЗапросJSON,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
		HTTPОтвет = ПараметрыFISHKA.HTTPСоединение.ОтправитьДляОбработки(ПараметрыFISHKA.HTTPЗапрос);
		ПараметрыFISHKA.ПолныйРезультат = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ПараметрыFISHKA.ПолныйРезультат);
		ПараметрыFISHKA.ОтветJSON 		= ПрочитатьJSON(ЧтениеJSON, Истина);
		ПараметрыFISHKA.КодОшибки 		= ПараметрыFISHKA.ОтветJSON.Получить("errorCode");
		ПараметрыFISHKA.ОписаниеОшибки 	= ПараметрыFISHKA.ОтветJSON.Получить("msg") + " ";
		Если HTTPОтвет.КодСостояния = 200 Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Примечание;
			ЭтоОшибка = Ложь;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
			ЭтоОшибка = Истина;
		КонецЕсли;
	Исключение
		ПараметрыFISHKA.ОписаниеОшибки 	= "ПОМИЛКА: Не відпрацював запит " + Операция + " FISHKA !!! (немає зв'язку із сервером) (" + ОписаниеОшибки() + ")";
		УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		ЭтоОшибка = Истина;  
	КонецПопытки;
	
	Если ЭтоОшибка Тогда
		ПараметрыFISHKA.HTTPСоединение 		= Неопределено;
		ПараметрыFISHKA.HTTPЗапрос 			= Неопределено;
		ПараметрыFISHKA.ОтветJSON 			= "";
	КонецЕсли;
	ОпределитьОшибку();
	
	Логирование.ДобавитьЗаписьЖурнала(УровеньЖурнала, ИмяПроцедуры, "ЗапитJSON: " + ПараметрыFISHKA.ЗапросJSON, Неопределено, Неопределено, "ОбщиеМодули.Fishka");
	Логирование.ДобавитьЗаписьЖурнала(УровеньЖурнала, ИмяПроцедуры, "Повна відповідь: "+ПараметрыFISHKA.ПолныйРезультат, Неопределено, Неопределено, "ОбщиеМодули.Fishka");
	Логирование.ДобавитьЗаписьЖурнала(УровеньЖурнала, ИмяПроцедуры, "TimeOUT(секунды): " + СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "ОбщиеМодули.Fishka");
	Логирование.ДобавитьЗаписьЖурнала(УровеньЖурнала, ИмяПроцедуры, "КодПомилки: "+ПараметрыFISHKA.КодОшибки + "; Опис помилки: "+ПараметрыFISHKA.ОписаниеОшибки, Неопределено, Неопределено, "ОбщиеМодули.Fishka");	
	
КонецПроцедуры

Функция СформироватьJSONстроку(СтруктураПараметров)
	СтрокаJSON = "{";
	ПерваяСтрока = Истина;
	Для Каждого парам Из СтруктураПараметров Цикл
		Если ТипЗнч(парам.Значение) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + ?(ПерваяСтрока,"",",") + "
			|""" + парам.Ключ + """: """ + парам.Значение + """";
		ИначеЕсли ТипЗнч(парам.Значение) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + ?(ПерваяСтрока,"",",") + "
			|""" + парам.Ключ + """: " + ?(парам.Значение,"true","false") + "";
		ИначеЕсли ТипЗнч(парам.Значение) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + ?(ПерваяСтрока,"",",") + "
			|""" + парам.Ключ + """: " + Формат(парам.Значение,"ЧДЦ=2; ЧРД=.; ЧН=0") + "";
		ИначеЕсли ТипЗнч(парам.Значение) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + ?(ПерваяСтрока,"",",") + "
			|""" + парам.Ключ + """:[";
			ПерваяСтрокаКорзины = Истина;
			Для Каждого стр Из парам.Значение Цикл
				СтрокаJSON = СтрокаJSON + ?(ПерваяСтрокаКорзины,"",",") + "
				|{";
				ПерваяКолонкаКорзины = Истина;
				Для нк = 0 По парам.Значение.колонки.Количество() - 1 Цикл
					Если ТипЗнч(стр[нк]) = Тип("Строка") Тогда
						СтрокаJSON = СтрокаJSON + ?(ПерваяКолонкаКорзины,"",",") + "
						|""" + парам.Значение.Колонки[нк].Имя + """: """ + стр[нк] + """";
					ИначеЕсли ТипЗнч(стр[нк]) = Тип("Булево") Тогда
						СтрокаJSON = СтрокаJSON + ?(ПерваяКолонкаКорзины,"",",") + "
						|""" + парам.Значение.Колонки[нк].Имя + """: " + ?(стр[нк],"true","false") + "";
					ИначеЕсли ТипЗнч(стр[нк]) = Тип("Число") Тогда
						СтрокаJSON = СтрокаJSON + ?(ПерваяКолонкаКорзины,"",",") + "
						|""" + парам.Значение.Колонки[нк].Имя + """: " + Формат(стр[нк],"ЧРД=.") + "";
					КонецЕсли;
					ПерваяКолонкаКорзины = Ложь;
				КонецЦикла;
				СтрокаJSON = СтрокаJSON + "
				|}";
				ПерваяСтрокаКорзины = Ложь;
			КонецЦикла;
			СтрокаJSON = СтрокаJSON + "
				|]";
		Иначе
		КонецЕсли;
		ПерваяСтрока = Ложь;
	КонецЦикла;
	СтрокаJSON = СтрокаJSON + "
	|}";

	Возврат СтрокаJSON;
КонецФункции

Функция СформироватьСигнатуру(posKey,СтрокаДляХеширования)
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеширование.Добавить(СтрокаДляХеширования);
	СтрокаДляПовторногоХеширования = НРег(СтрЗаменить(Хеширование.ХешСумма," ","")) + posKey;
	
	Сигнатура = Новый ХешированиеДанных(ХешФункция.SHA256);
	Сигнатура.Добавить(СтрокаДляПовторногоХеширования);
	Возврат НРег(СтрЗаменить(Сигнатура.ХешСумма," ",""));
КонецФункции

Процедура ОпределитьОшибку()
	Если ПараметрыFISHKA.КодОшибки = "0" Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= "";
	КонецЕсли;	
	Возврат;
	
	Если ПараметрыFISHKA.КодОшибки=0 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= "ВСЕ ОК !!!"; 		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=101 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Партнера з даним кодом в системі програми лояльності не знайдено."; 			
	ИначеЕсли ПараметрыFISHKA.КодОшибки=106 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Клієнт вводить неправильний ПІН-код більше разів, ніж дозволено системою."; 		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=109 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Торговий об’єкт з даним кодом в системі програми лояльності не знайдено.";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=111 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Даний номер картки лояльності не відповідає схемі нумерування карток програми."; 	
	ИначеЕсли ПараметрыFISHKA.КодОшибки=112 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Даний код не використовується, замінений кодами: 1121, 1122, 1123
										|Трансакція отоварення вимагає ПІН-коду, проте ПІН-код не введений";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=1121 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Відсутній ПІН-код – код з SMS вимагається"; 	
	ИначеЕсли ПараметрыFISHKA.КодОшибки=1122 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Відсутній ПІН-код – звичайний ПІН-код вимагається";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=1123 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Відсутній ПІН-код – останні 4 цифри номеру телефону вимагаються";	
	ИначеЕсли ПараметрыFISHKA.КодОшибки=113 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Цей код помилки виникає, коли клієнт намагається отоварити бали і пред’являє додаткову картку. За правилами програми така операція заборонена.";	
	ИначеЕсли ПараметрыFISHKA.КодОшибки=114 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Рахунок даного клієнта не персоналізований, тому отоварення за пред’явленою карткою не дозволяється. Для отоварення балів клієнту потрібно заповнити анкету і надати свої дані. "; 	
	ИначеЕсли ПараметрыFISHKA.КодОшибки=115 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Отоварення за даним рахунком не дозволяється, оскільки що клієнт подав в анкеті неправильні дані або не заповнив обов’язкові поля. Клієнту слід подзвонити на гарячу лінію і надати правильні дані.";	
	ИначеЕсли ПараметрыFISHKA.КодОшибки=117 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Отоварення не дозволяється,  операція не відповідає правилам обміну.";	
	ИначеЕсли ПараметрыFISHKA.КодОшибки=120 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Отоварення не дозволяється, нетипове використання картки.";	
	ИначеЕсли ПараметрыFISHKA.КодОшибки=121 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Отоварення даної винагороди вимагає попереднього замовлення, яке повинно здійснюватися через персональну сторінку клієнта або гарячу лінію. Замовлення даної винагороди для даної картки не знайдено."; 	
	ИначеЕсли ПараметрыFISHKA.КодОшибки=122 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Винагорода потребує попереднього замовлення. Замовлення в системі знайдено, проте винагороди в чеку несумісні. Наприклад, касова трансакція містить також інші винагороди.";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=123 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Винагорода потребує попереднього замовлення. Замовлення вже було реалізовано (винагорода продана).";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=124 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Винагорода потребує попереднього замовлення. Замовлення в системі знайдено, проте термін дії замовлення закінчився.";			
	ИначеЕсли ПараметрыFISHKA.КодОшибки=125 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Отоварення не дозволено: в трансакції містяться винагороди різного типу – на замовлення і звичайна. Інша причина: винагороду на замовлення пов’язана з правилом отоварення, яке не виконалося";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=126 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Введений ПІН-код – неправильний.";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=180 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Для отоварення на рахунку клієнта недостатньо балів.";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=181 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Основний рахунок, на який зареєстрована дана картка, заблоковано.";			
	ИначеЕсли ПараметрыFISHKA.КодОшибки=182 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Картка за даним номером заблокована";			
	ИначеЕсли ПараметрыFISHKA.КодОшибки=183 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Рахунок тримача даної картки заблокований.";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=185 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Винагорода з даною схемою обміну відсутня в системі програми лояльності.";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=186 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Закінчився термін, протягом якого можна було обміняти винагороди з даною схемою.";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=190 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Коли з точки продажу відсилається транзакція нарахування балів за відсутності інтернету, файлом, і payByPoints містить ненульове число.";			
	ИначеЕсли ПараметрыFISHKA.КодОшибки=191 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Транзакцію повернення не знайдено, неправильний номер транзакції яку потрібно відмінити або вона не існує.";			
	ИначеЕсли ПараметрыFISHKA.КодОшибки=192 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Продукт не існує в транзакції повернення або точка продажу хоче повернути більше ніж було в транзакції яку потрібно відмінити(також враховуються випадки мультиповерення – сума продуктів які потрібно повернути більша за справжню).";			
	ИначеЕсли ПараметрыFISHKA.КодОшибки=193 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Вихід за визначений максимальний період повернення. Визначений порядок значення змінної:
										|1.	Значення, визначене на рівні партнера
										|2.	Значення, визначене на системному рівні
										|3.	Значення за замовчуванням, у випадку коли на інших рівнях воно не було визначене (14 днів)";			
	ИначеЕсли ПараметрыFISHKA.КодОшибки=904 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"Формат повідомлення не чинний, або виникли інші внутрішні помилки, які роблять повторне відправлення повідомлення неможливим.";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=907 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ОписаниеОшибки + " Деталі помилки: "+"В даний момент неможливо обробити трансакцію лояльності, проте вона буде відправлена в режимі оф-лайн.";		
	ИначеЕсли ПараметрыFISHKA.КодОшибки=1001 Тогда 
		ПараметрыFISHKA.ОписаниеОшибки	= ПараметрыFISHKA.ErrorDescription + " Деталі помилки: "+"Цей код вказує, що каса намагається відправити трансакцію з номером, що вже зареєстрований в системі програми лояльності в режимі он-лайн. Ця помилка не виникає при відправленні оф-лайн трансакцій, що збережені у буфері. Якщо трансакція, яка відправляється, зареєстрована в режимі оф-лайн, а її номер вже існує в базі процесингу ПЛ, то процесинг просто відповість з кодом помилки 0. Важливо, що в цьому випадку процесинг не створює нову трансакцію, а підтверджує, що трансакція вже існує. Реєстрація двох трансакцій з однаковими номерами неможлива (POSFZS + POSADD)";			
	КонецЕсли;	
КонецПроцедуры	

Функция ИдентифицироватьКлиентаФишки(Fishka_НомерТелефона) Экспорт 
	
	ИнициализироватьПараметры();
		
	ПараметрыFISHKA.FISHKA_ШК				= Fishka_НомерТелефона;
	ПараметрыFISHKA.FISHKA_СостояниеЧекаККМ	= Перечисления.FISHKA_СостояниеЧекаККМ.Офлайн;

	//получим текущий номер чека ПРОДАЖИ в смене
	НомерЧека = РаботаСЧеком.ПолучитьНомерЧекаТекущейСмены(ПараметрыЧекаККМ.ДокЧекККМ, Константы.осн_КассаККМ.Получить().НомерZОтчета, Перечисления.ВидыОперацийЧекККМ.Продажа);
	
	ФискальныйНомер_строка		= Формат( Число(Константы.осн_КассаККМ.Получить().ФискальныйНомер), "ЧЦ=10; ЧВН=; ЧГ=0");
	НомерZОтчета				= Формат( Константы.осн_КассаККМ.Получить().НомерZОтчета, "ЧЦ=4; ЧВН=; ЧГ=0");
	НомерЧекаСмены				= Формат( НомерЧека, "ЧЦ=4; ЧВН=; ЧГ=0");
	FISHKA_НомПопыткиТранзакции	= "00";
	КодОперации_ПродажаВозврат	= "0";
	//сформируем первый номер транзакции на случай аварии
	ПараметрыFISHKA.FISHKA_trnNoPOSFZS	= ФискальныйНомер_строка + НомерZОтчета + КодОперации_ПродажаВозврат + НомерЧекаСмены + FISHKA_НомПопыткиТранзакции;
	
	Если НЕ Fishka.ПроверкаСвязи() Тогда
		Возврат Ложь;
	КонецЕсли;																		
	
	Если НЕ ПроверкаБаланса() Тогда	
		СообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;                                                                    	
	
	Возврат Истина;
	
КонецФункции	

#КонецОбласти

Процедура ВыполнитьОтменуОперации() Экспорт
	
	ФискальныйНомер_строка 							= Формат(Число(Константы.осн_КассаККМ.Получить().ФискальныйНомер), "ЧЦ=10; ЧВН=; ЧГ=0");
	НомерZОтчета 									= Формат(Константы.осн_КассаККМ.Получить().НомерZОтчета, "ЧЦ=4; ЧВН=; ЧГ=0");
	НомерЧекаСмены 									= Формат(ПараметрыЧекаККМ.НомерЧекаККМ_ТекущейСмены, "ЧЦ=4; ЧВН=; ЧГ=0");																				
	FISHKA_НомПопыткиТранзакции 					= Формат(ПараметрыЧекаККМ.FISHKA_НомПопыткиТранзакции, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=0");
	FISHKA_НомПопыткиТранзакции_orginalTrnNoPOSFZS 	= Формат(ПараметрыЧекаККМ.FISHKA_НомПопыткиТранзакции - 1, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=0");
	КодОперации_ПродажаВозврат 						= Формат(ПараметрыЧекаККМ.ВидОперацииКод, "ЧЦ=1; ЧН=; ЧО=0");
																		
	НомерТранзакции 								= ФискальныйНомер_строка + НомерZОтчета + КодОперации_ПродажаВозврат + НомерЧекаСмены + FISHKA_НомПопыткиТранзакции;
	НомерТранзакции_orginalTrnNoPOSFZS 				= ФискальныйНомер_строка + НомерZОтчета + КодОперации_ПродажаВозврат + НомерЧекаСмены + FISHKA_НомПопыткиТранзакции_orginalTrnNoPOSFZS;

	// ПараметрыFISHKA.FISHKA_transactionDate 			= Строка((ПараметрыЧекаККМ.ДатаОперации - Дата(1970,1,1)) * 1000);
	ПараметрыFISHKA.FISHKA_transactionDate 			= Строка(((ПараметрыЧекаККМ.ДатаОперации - 60*60*2) - Дата(1970,1,1))*1000); 
	ПараметрыFISHKA.FISHKA_trnNoPOSFZS				= НомерТранзакции_orginalTrnNoPOSFZS;
	
	Если НЕ ОперацияОтмена() Тогда	
		СообщитьОбОшибке();
	КонецЕсли;
	Логирование.ДобавитьЗаписьЖурнала(, "FISHKA ОТМЕНА ОПЕРАЦИИ", "FISHKA Состояние чека: " + ПараметрыFISHKA.FISHKA_СостояниеЧекаККМ 
					+ "; FISHKA_ШК: " + ПараметрыFISHKA.FISHKA_ШК + " ; FISHKA_номер транзакции: "
					+ ПараметрыFISHKA.FISHKA_trnNoPOSFZS, Неопределено, Неопределено, "ОбщиеМодули.Fishka");		
		
КонецПроцедуры	

Функция ОтменитьПредыдущиеПопытки() Экспорт 
	Для НомПопытки = 0 По ПараметрыЧекаККМ.ДокЧекККМ.FISHKA_НомПопыткиТранзакции - 1 Цикл
		
		ФискальныйНомер_строка							= Формат(Число(Константы.осн_КассаККМ.Получить().ФискальныйНомер), "ЧЦ=10; ЧВН=; ЧГ=0");
		НомерZОтчета									= Формат(Константы.осн_КассаККМ.Получить().НомерZОтчета, "ЧЦ=4; ЧВН=; ЧГ=0");
		НомерЧекаСмены									= Формат(ПараметрыЧекаККМ.ДокЧекККМ.НомерЧекаККМ_ТекущейСмены, "ЧЦ=4; ЧВН=; ЧГ=0");
		FISHKA_НомПопыткиТранзакции						= Формат(НомПопытки, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=0");
		КодОперации_ПродажаВозврат                      = Формат(ПараметрыЧекаККМ.ВидОперацииКод, "ЧЦ=1; ЧН=; ЧО=0");
		
		ПараметрыFISHKA.FISHKA_trnNoPOSFZS				= ФискальныйНомер_строка + НомерZОтчета + КодОперации_ПродажаВозврат + НомерЧекаСмены + FISHKA_НомПопыткиТранзакции;													 	
		
		Если НЕ Fishka.ОперацияОтмена() Тогда	
			Fishka.СообщитьОбОшибке();
			Возврат Ложь;
		КонецЕсли;
		Логирование.ДобавитьЗаписьЖурнала(, "FISHKA отмена предыдущих попыток", "FISHKA Состояние чека: " + ПараметрыFISHKA.FISHKA_СостояниеЧекаККМ 
		+ "; FISHKA_ШК: " + ПараметрыFISHKA.FISHKA_ШК + " ; FISHKA_номер транзакции: "
		+ ПараметрыFISHKA.FISHKA_trnNoPOSFZS, Неопределено, Неопределено, "ОбщиеМодули.Fishka");
		
	КонецЦикла;
	Возврат Истина;
КонецФункции

