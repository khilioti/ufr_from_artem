#Область ПараметрыЧекаККМ

Процедура ПараметрыЧекаККМ_Очистить() Экспорт 

	ПараметрыЧекаККМ = Новый Структура;
	ПараметрыЧекаККМ.Вставить("ДокЧекККМ", 					Документы.ЧекККМ.ПустаяСсылка());
	ПараметрыЧекаККМ.Вставить("НомерПоследНапечатЧекаККМ", 	Константы.глСчетчикЧеков.Получить());
	ПараметрыЧекаККМ.Вставить("НомерЧекаККМ", 				Константы.глСчетчикЧеков.Получить()+1);	
	ПараметрыЧекаККМ.Вставить("КассаККМ", 					Константы.осн_КассаККМ.Получить());
	
	ПараметрыЧекаККМ.Вставить("НомерЧекаККМ_ТекущейСмены", 		0);	
	ПараметрыЧекаККМ.Вставить("FISHKA_НомПопыткиТранзакции", 	0); // обнуляеться только если создался новый чек. Поэтому этот параметр сдесь а не параметрах FISHKA	
	ПараметрыЧекаККМ.Вставить("УникальныйНомерЧекаККМ", 		"");
	
	ПараметрыЧекаККМ.Вставить("СостояниеЧека", 				Перечисления.СостояниеЧека.Новый);
	
	ПараметрыЧекаККМ.Вставить("ВидСканБК", 					""); //""; "BPM"; "FISHKA";
	
	ПараметрыЧекаККМ.Вставить("НомерZОтчета", 				Константы.осн_КассаККМ.Получить().НомерZОтчета);
	ПараметрыЧекаККМ.Вставить("СерийныйНомерФР", 			Константы.осн_КассаККМ.Получить().Наименование);
	
	ПараметрыЧекаККМ.Вставить("ДатаОперации", 				ТекущаяДата());
	ПараметрыЧекаККМ.Вставить("ВидОперации",				Перечисления.ВидыОперацийЧекККМ.ПустаяСсылка());
	ПараметрыЧекаККМ.Вставить("ВидОперацииКод",				-1);
    ПараметрыЧекаККМ.Вставить("ВидОплаты", 					Перечисления.ВидыОплатЧекаККМ.ПустаяСсылка());
	ПараметрыЧекаККМ.Вставить("ВидОплатыКод", 				-1);
	
	ПараметрыЧекаККМ.Вставить("ЭтоЧекПродажи", 				Ложь);
	ПараметрыЧекаККМ.Вставить("ЭтоЧекВозврата", 			Ложь);                      
	ПараметрыЧекаККМ.Вставить("ЭтоЧекАннуляции", 			Ложь);
	
	ПараметрыЧекаККМ.Вставить("ОплатаНал", 					Ложь);
	ПараметрыЧекаККМ.Вставить("ОплатаБезНал", 				Ложь);
	
	ПараметрыЧекаККМ.Вставить("ФР_ЧекНАПЕЧТАН",				Ложь);
	ПараметрыЧекаККМ.Вставить("ФР_ТекстДляВыводаНаЧекККМ",	Новый Массив);
	ПараметрыЧекаККМ.Вставить("ФР_ОбротыДоЧека", 			0);
	ПараметрыЧекаККМ.Вставить("ФР_ОбротыПослеЧека", 		0);
	
	ПараметрыЧекаККМ.Вставить("ФО_ОстатокДенегВКассе_Нал", 		0);
	ПараметрыЧекаККМ.Вставить("ФО_ОстатокДенегВКассе_БезНал",	0);

	ПараметрыЧекаККМ.Вставить("ФО_СуммаНалички", 			0);
	ПараметрыЧекаККМ.Вставить("ФО_СуммаПоКарте",	 		0);
    ПараметрыЧекаККМ.Вставить("ФО_СуммаСертификатом", 		0);
	ПараметрыЧекаККМ.Вставить("ФО_СуммаВаучером", 			0);
	ПараметрыЧекаККМ.Вставить("ФО_Сдача", 					0);
	ПараметрыЧекаККМ.Вставить("ФО_СдачаНаБК",				0);
	
	ПараметрыЧекаККМ.Вставить("ФО_СуммаЧека", 				0);
	ПараметрыЧекаККМ.Вставить("ФО_СуммаЧекаСоСкидкой",		0);
	ПараметрыЧекаККМ.Вставить("ФО_СуммаЧекаИтого", 			0);
	
	ПараметрыЧекаККМ.Вставить("ФО_СуммаБонусами",			0);
	ПараметрыЧекаККМ.Вставить("ФО_СуммаСкидкиПоБК", 		0);
	
	ПараметрыЧекаККМ.Вставить("ФО_ОтоваренныеШК_ПС", 		"");
	
	ПараметрыЧекаККМ.Вставить("POSтерминал_Объект", 		Неопределено);
	ПараметрыЧекаККМ.Вставить("POSтерминал_RRN",			"");
	ПараметрыЧекаККМ.Вставить("POSтерминал_ВидТранзакции", 	"");
	ПараметрыЧекаККМ.Вставить("POSтерминал_СуммаТранзакции","");
	ПараметрыЧекаККМ.Вставить("POSтерминал_ПодписьКлиента", Ложь);
	ПараметрыЧекаККМ.Вставить("POSтерминал_ВладелецКарты", 	"");
	ПараметрыЧекаККМ.Вставить("POSтерминал_НомерКарты", 	"");
	ПараметрыЧекаККМ.Вставить("POSтерминал_ВидКарты", 		"");
	ПараметрыЧекаККМ.Вставить("POSтерминал_ТерминалаID", 	"");
	ПараметрыЧекаККМ.Вставить("POSтерминал_Точка",			"");
	ПараметрыЧекаККМ.Вставить("POSтерминал_ДатаЧека",		Дата(1,1,1));
	ПараметрыЧекаККМ.Вставить("POSтерминал_НомерЧека",		"");
	ПараметрыЧекаККМ.Вставить("POSтерминал_КодАвторизации",	"");
	ПараметрыЧекаККМ.Вставить("POSтерминал_TerminalInfo",	"");
	
	ПараметрыЧекаККМ.Вставить("POSтерминал_ТранзакцияВыполнена", 	Ложь);
	ПараметрыЧекаККМ.Вставить("POSтерминал_ТекстДляЧекаФР",	Новый Массив);
	
	ПараметрыЧекаККМ.Вставить("POSтерминал_ТекстОшибки",	"");
	
	ПараметрыЧекаККМ.Вставить("Возврат_ЧекККМ", 			Документы.ЧекККМ.ПустаяСсылка());
	ПараметрыЧекаККМ.Вставить("Возврат_ДатаОперации", 		Дата(1,1,1));
	ПараметрыЧекаККМ.Вставить("Возврат_КодТТ", 				"");
	ПараметрыЧекаККМ.Вставить("Возврат_СерийныйНомерФР", 	"");
	ПараметрыЧекаККМ.Вставить("Возврат_НомерЧекаККМ", 		0); 
	ПараметрыЧекаККМ.Вставить("Возврат_RRN", 				"");
	ПараметрыЧекаККМ.Вставить("Возврат_КодАвторизации", 	"");
	ПараметрыЧекаККМ.Вставить("Возврат_ШК_БК", 				"");
	
	ПараметрыЧекаККМ.Вставить("ТестАкцииНаКассе", 			Ложь);	
	
	//Кудря 22.07.19 Единый чек
	ПараметрыЧекаККМ.Вставить("ОшибкаОплатыТерминала", Ложь);				
	//Кудря
	// Дьяченко Перенос акций в BPM
	ПараметрыЧекаККМ.Вставить("АкционнаяСистема", Перечисления.АкционнаяСистема.ПустаяСсылка());
	// Дьяченко
	
	ТЧ_СобытияПоЧеку = Документы.ЧекККМ.ПустаяСсылка().ТЧ_СобытияПоЧеку.ВыгрузитьКолонки();	
	ПараметрыЧекаККМ.Вставить("ТЧ_СобытияПоЧеку", ТЧ_СобытияПоЧеку);
	
КонецПроцедуры	

Процедура ПараметрыЧекаККМ_ВидОперацииУстановить(ВидОперации) Экспорт 
																		
	ПараметрыЧекаККМ.ДатаОперации = ТекущаяДата();

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда 
		
		ПараметрыЧекаККМ.ВидОперации		= ВидОперации;
		ПараметрыЧекаККМ.ВидОперацииКод		= 0;
		
		ПараметрыЧекаККМ.ЭтоЧекПродажи 		= Истина;
		ПараметрыЧекаККМ.ЭтоЧекВозврата 	= Ложь;
		ПараметрыЧекаККМ.ЭтоЧекАннуляции	= Ложь;

		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда  
		
		ПараметрыЧекаККМ.ВидОперации		= ВидОперации;
		ПараметрыЧекаККМ.ВидОперацииКод		= 1;
		
		ПараметрыЧекаККМ.ЭтоЧекПродажи 		= Ложь;
		ПараметрыЧекаККМ.ЭтоЧекВозврата 	= Истина;
		ПараметрыЧекаККМ.ЭтоЧекАннуляции	= Ложь;

		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЧекККМ.Аннуляция
		Или ВидОперации = Перечисления.ВидыОперацийЧекККМ.Аннуляция_ТестАкций Тогда 
		
		ПараметрыЧекаККМ.ВидОперации		= ВидОперации;
		ПараметрыЧекаККМ.ВидОперацииКод		= -1;
		
		ПараметрыЧекаККМ.ЭтоЧекПродажи 		= Ложь;
		ПараметрыЧекаККМ.ЭтоЧекВозврата 	= Ложь;
		ПараметрыЧекаККМ.ЭтоЧекАннуляции	= Истина;
		
		
	Иначе 
		
		ПараметрыЧекаККМ.ВидОперации		= Перечисления.ВидыОперацийЧекККМ.ПустаяСсылка();
		ПараметрыЧекаККМ.ВидОперацииКод		= -1;
		
		ПараметрыЧекаККМ.ЭтоЧекПродажи 		= Ложь;
		ПараметрыЧекаККМ.ЭтоЧекВозврата 	= Ложь;
		ПараметрыЧекаККМ.ЭтоЧекАннуляции	= Ложь;
		
	КонецЕсли;	
																																					
КонецПроцедуры	

Процедура ПараметрыЧекаККМ_ВидОплатыУстановить(ВидОплаты) Экспорт 
	
	Если ВидОплаты=Перечисления.ВидыОплатЧекаККМ.Нал Тогда 
		ПараметрыЧекаККМ.ДатаОперации							= ТекущаяДата();
		ПараметрыЧекаККМ.ВидОплаты								= Справочники.ВидыОплатЧекаККМ.Наличные;
		ПараметрыЧекаККМ.ВидОплатыКод							= 1;
		
		ПараметрыЧекаККМ.ОплатаНал 								= Истина;
		ПараметрыЧекаККМ.ОплатаБезНал 							= Ложь;

	ИначеЕсли ВидОплаты=Перечисления.ВидыОплатЧекаККМ.БезНал  Тогда  
		ПараметрыЧекаККМ.ДатаОперации							= ТекущаяДата();
		ПараметрыЧекаККМ.ВидОплаты								= Справочники.ВидыОплатЧекаККМ.БанковскаяКарта;
		ПараметрыЧекаККМ.ВидОплатыКод							= 0;

		
		ПараметрыЧекаККМ.ОплатаНал 								= Ложь;
		ПараметрыЧекаККМ.ОплатаБезНал 							= Истина;
		
	Иначе 
		ПараметрыЧекаККМ.ДатаОперации							= ТекущаяДата();
		ПараметрыЧекаККМ.ВидОплаты								= Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
		ПараметрыЧекаККМ.ВидОплатыКод							= -1;
		
		ПараметрыЧекаККМ.ОплатаНал 								= Ложь;
		ПараметрыЧекаККМ.ОплатаБезНал 							= Ложь;
	
	КонецЕсли;	
																																					
КонецПроцедуры	

Процедура ПараметрыЧекаККМ_СгенерироватьУникальныйНомерЧекаККМ() Экспорт 
	// Генерируем НОМЕР ТРАНЗАКЦИИ
	Если ПараметрыЧекаККМ.ЭтоЧекПродажи Тогда 
		НомерЧека	= ПолучитьНомерЧекаТекущейСмены(ПараметрыЧекаККМ.ДокЧекККМ, Константы.осн_КассаККМ.Получить().НомерZОтчета, Перечисления.ВидыОперацийЧекККМ.Продажа);
		КодОперации	= 1;																	
	ИначеЕсли ПараметрыЧекаККМ.ЭтоЧекВозврата Тогда
		НомерЧека 	= ПолучитьНомерЧекаТекущейСмены(ПараметрыЧекаККМ.ДокЧекККМ, Константы.осн_КассаККМ.Получить().НомерZОтчета, Перечисления.ВидыОперацийЧекККМ.Возврат);
		КодОперации = 2;
	ИначеЕсли ПараметрыЧекаККМ.ЭтоЧекАннуляции Тогда 
		НомерЧека 	= ПолучитьНомерЧекаТекущейСмены(ПараметрыЧекаККМ.ДокЧекККМ, Константы.осн_КассаККМ.Получить().НомерZОтчета, Перечисления.ВидыОперацийЧекККМ.Продажа);
		КодОперации	= 3;
	Иначе 
		НомерЧека	= ПолучитьНомерЧекаТекущейСмены(ПараметрыЧекаККМ.ДокЧекККМ, Константы.осн_КассаККМ.Получить().НомерZОтчета, Перечисления.ВидыОперацийЧекККМ.Продажа);
		КодОперации	= 0;
	КонецЕсли;	
		
	ФискальныйНомер_строка = Формат( Число(Константы.осн_КассаККМ.Получить().ФискальныйНомер), "ЧЦ=10; ЧВН=; ЧГ=0");
	НомерZОтчета	= Формат( Константы.осн_КассаККМ.Получить().НомерZОтчета, "ЧЦ=4; ЧВН=; ЧГ=0");
	НомерЧекаСмены	= Формат( НомерЧека, "ЧЦ=4; ЧВН=; ЧГ=0");

	ПараметрыЧекаККМ.УникальныйНомерЧекаККМ = ФискальныйНомер_строка + НомерZОтчета + КодОперации + НомерЧекаСмены + "0";											
КонецПроцедуры	

#КонецОбласти

#Область ОперацииСДокументомЧекККМ

Функция Отредактировать_Записать_ДокументЧекККМ(ПараметрыЧекаККМ, ПараметрыBPM7, ПараметрыFISHKA, Объект) Экспорт; 
	
	Если ПараметрыЧекаККМ.ДокЧекККМ = Документы.ЧекККМ.ПустаяСсылка() Тогда 
		ДокЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
	Иначе
		ДокЧекККМ = ПараметрыЧекаККМ.ДокЧекККМ.ПолучитьОбъект();	
		ДокЧекККМ.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокЧекККМ, ПараметрыЧекаККМ);               
	ЗаполнитьЗначенияСвойств(ДокЧекККМ, ПараметрыFISHKA);
	ЗаполнитьЗначенияСвойств(ДокЧекККМ, ПараметрыBPM7);
	
	ДокЧекККМ.Подразделение = Константы.осн_Подразделение.Получить();
	ДокЧекККМ.КассаККМ 		= Константы.осн_КассаККМ.Получить();
	ДокЧекККМ.Кассир		= глТекущийПользователь;

	ДокЧекККМ.Дата 					= ПараметрыЧекаККМ.ДатаОперации;
	ДокЧекККМ.ВидОперацииЧекаККМ 	= ПараметрыЧекаККМ.ВидОперации;
	
	ДокЧекККМ.СостояниеЧекаККМ		= ПараметрыЧекаККМ.СостояниеЧека;
	
	ДокЧекККМ.АкционнаяСистема = ?(BPM.РаботаетАкционнаяСистемаБПМ(),Перечисления.АкционнаяСистема.BPMonline,Перечисления.АкционнаяСистема.Простор);
	
	ДокЧекККМ.СуммаПоЧекуККМ 		= ПараметрыЧекаККМ.ФО_СуммаЧекаИтого;
	ДокЧекККМ.СуммаОплаты_Нал		= ПараметрыЧекаККМ.ФО_СуммаНалички-ПараметрыЧекаККМ.ФО_Сдача;
	ДокЧекККМ.СуммаОплаты_БезНал	= ПараметрыЧекаККМ.ФО_СуммаПоКарте;
	ДокЧекККМ.СуммаОплаты_ПС		= ПараметрыЧекаККМ.ФО_СуммаСертификатом;
	ДокЧекККМ.СуммаОплаты_Ваучер	= ПараметрыЧекаККМ.ФО_СуммаВаучером;

	ДокЧекККМ.ФР_ОбротыДоЧека		= ПараметрыЧекаККМ.ФР_ОбротыДоЧека;
	ДокЧекККМ.ФР_ОбротыПослеЧека	= ПараметрыЧекаККМ.ФР_ОбротыПослеЧека;
	
	ДокЧекККМ.ТЧ_Товары.Очистить();
	Для Каждого СтрокаТЧ Из Объект.Продажа Цикл 
		НоваяСтрока	= ДокЧекККМ.ТЧ_Товары.Добавить();
		НоваяСтрока.Акционный			= СтрокаТЧ.Акционный;
		НоваяСтрока.ВидОперации			= СтрокаТЧ.ВидОперации;
		НоваяСтрока.Код					= СтрокаТЧ.Код;
		НоваяСтрока.ШК					= СтрокаТЧ.Штрихкод;
		НоваяСтрока.Наименование		= СтрокаТЧ.DATASTR2;
		НоваяСтрока.Цена				= СтрокаТЧ.Цена;
		НоваяСтрока.Количество			= СтрокаТЧ.Количество;
		НоваяСтрока.Сумма				= СтрокаТЧ.Сумма;
		НоваяСтрока.СкидкаБК			= СтрокаТЧ.СкидкаБК;
		НоваяСтрока.СкидкаСумма			= СтрокаТЧ.СкидкаСумма;
		НоваяСтрока.Ответственный 		= СтрокаТЧ.Ответственный;
		НоваяСтрока.СтавкаНДС 			= СтрокаТЧ.СтавкаНДС;
		НоваяСтрока.Возврат_НомерСтроки = СтрокаТЧ.Возврат_НомерСтроки;
	КонецЦикла;	
	                                                                                       
	ДокЧекККМ.ТЧ_ЖурналСкидок.Очистить();
	Для Каждого СтрокаТЧ Из Объект.ТЧ_ЖурналСкидок Цикл 
		НоваяСтрока = ДокЧекККМ.ТЧ_ЖурналСкидок.Добавить();
		НоваяСтрока.НомСтрокиЧекаККМ 		= СтрокаТЧ.НомСтрокиЧекаККМ;
		НоваяСтрока.Код 					= СтрокаТЧ.Код;
		НоваяСтрока.Количество 				= СтрокаТЧ.Количество;
		НоваяСтрока.Цена 					= СтрокаТЧ.Цена;
		НоваяСтрока.СкидкаСумма 			= СтрокаТЧ.СкидкаСумма;
		НоваяСтрока.ШК_Акции 				= СтрокаТЧ.ШК_Акции;
		НоваяСтрока.ТипАкции 				= СтрокаТЧ.ТипАкции;
		НоваяСтрока.НомерАкции 				= СтрокаТЧ.НомерАкции;
		НоваяСтрока.ТоварГрВыдачи 			= СтрокаТЧ.ТоварГрВыдачи;
		НоваяСтрока.БлокЛистовок_Код 		= СтрокаТЧ.БлокЛистовок_Код;
		НоваяСтрока.БлокЛистовок_UUID_ИзУТ 	= СтрокаТЧ.БлокЛистовок_UUID_ИзУТ;
		// Дьяченко 290819
		НоваяСтрока.ИДАкцииBPM 				= СтрокаТЧ.ИДАкцииBPM;
		// Дьяченко
	КонецЦикла;	
	
	ДокЧекККМ.ТЧ_ДвиженияПС.Очистить();
	Для Каждого СтрокаТЧ Из Объект.ТЧ_ДвиженияПС Цикл 
		НоваяСтрока = ДокЧекККМ.ТЧ_ДвиженияПС.Добавить();
		НоваяСтрока.СтатусПС 		= СтрокаТЧ.СтатусПС;	
		НоваяСтрока.ШК_ПС 			= СтрокаТЧ.ШК_ПС;
		НоваяСтрока.НоминалПС 		= СтрокаТЧ.НоминалПС;
		НоваяСтрока.ЭлектронныйПС 	= СтрокаТЧ.ЭлектронныйПС;
		НоваяСтрока.ИнфоКарта_ШК 	= СтрокаТЧ.ИнфоКарта_ШК;
	КонецЦикла;	
	                                         
	//ДокЧекККМ.ТЧ_СобытияПоЧеку.Очистить();
	//Для Каждого СтрокаТЧ Из ПараметрыЧекаККМ.ТЧ_СобытияПоЧеку Цикл 
	//	НоваяСтрока															= ДокЧекККМ.ТЧ_СобытияПоЧеку.Добавить();
	//	НоваяСтрока.ДатаСобытия												= СтрокаТЧ.ДатаСобытия;	
	//	НоваяСтрока.ВидСобытия												= СтрокаТЧ.ВидСобытия;
	//КонецЦикла;	
	                                                        
	Попытка
		ДокЧекККМ.Записать(РежимЗаписиДокумента.Запись);
		ПараметрыЧекаККМ.ДокЧекККМ = ДокЧекККМ.Ссылка;
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;	
	
	ПараметрыЧекаККМ.НомерЧекаККМ_ТекущейСмены = ПараметрыЧекаККМ.ДокЧекККМ.НомерЧекаККМ_ТекущейСмены;
	
	Возврат	Истина;                                                   
КонецФункции

Функция ПровестиДокументЧекККМ(Объект) Экспорт;
	
	Попытка		
		ДокЧекККМ = ПараметрыЧекаККМ.ДокЧекККМ.ПолучитьОбъект();
		
		ДокЧекККМ.ОтправленНаСервер 				= Ложь;
		ДокЧекККМ.BPMonline_СкарбничкаОтправленна 	= ПараметрыBPM7.BPMonline_СкарбничкаОтправленна;
		ДокЧекККМ.BPMonline_СостояниеЧекаККМ 		= ПараметрыBPM7.BPMonline_СостояниеЧекаККМ;
		
		ДокЧекККМ.Записать(РежимЗаписиДокумента.Проведение);
		ПараметрыЧекаККМ.ДокЧекККМ = ДокЧекККМ.Ссылка;
		
		Возврат Истина;
		
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;	
КонецФункции	

#КонецОбласти

#Область РаботаСТабличнойЧастью

Процедура Добавить_ПС_В_ТабличнуюЧасть(Объект) Экспорт
	
	Объект.ТЧ_ДвиженияПС.Очистить();
	Для Каждого СтрокаТЧ Из Объект.Продажа Цикл 
		Если СтрокаТЧ.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Продажа  Тогда 			Продолжить;		КонецЕсли;
			
		Если РаботаСПС.ЭтоПодарочныйСертификат(СтрокаТЧ.Код) Тогда
			НоваяСтрока 				= Объект.ТЧ_ДвиженияПС.Добавить();
			НоваяСтрока.НомерЧека 		= глНомерПоследнегоЧека_VS+1;
			НоваяСтрока.НомерМагазина 	= Константы.осн_КассаККМ.Получить().НомерМагазина;
			НоваяСтрока.СерийныйНомерФР = СокрЛП(Константы.осн_КассаККМ.Получить().Наименование);
			НоваяСтрока.СтатусПС 		= "Продан";
			НоваяСтрока.ШК_ПС 			= СтрокаТЧ.Штрихкод;
			НоваяСтрока.НоминалПС 		= СтрокаТЧ.Цена;
			НоваяСтрока.ИнфоКарта_ШК 	= СтрокаТЧ.Штрихкод;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОчиститьСкарбничка(Объект) Экспорт
	
	МасссивСтрок = Объект.Продажа.НайтиСтроки(Новый Структура ("Код", "132458"));
	Для Каждого ЭлемМассива Из МасссивСтрок Цикл 
		Объект.Продажа.Удалить(ЭлемМассива);
	КонецЦикла;	
		
КонецПроцедуры	

Процедура Очистить_Акцию_ОПЛАТА_БОНУСАМИ(Объект) Экспорт
	
	n = Объект.ТЧ_ЖурналСкидок.Количество()-1;	
	Пока n >= 0 Цикл 
		Если Объект.ТЧ_ЖурналСкидок[n].ТипАкции = "ОПЛАТА_БОНУСАМИ" Тогда 	
			Объект.ТЧ_ЖурналСкидок.Удалить(n);	
		КонецЕсли;	
		n = n-1;
	КонецЦикла;	
	
КонецПроцедуры	

Функция ДобавитьСтрокуВЧек(Объект, СтрокаДанных) Экспорт 
		
	глНомерПоследнегоЧека_VS = Константы.глСчетчикЧеков.Получить();	
		
	//МассивДобавленныхТоваров = Объект.Продажа.НайтиСтроки(Новый Структура("Штрихкод", СтрокаДанных.BAR));
	
	СтрокаТовар = Объект.Продажа.Добавить();
	СтрокаТовар.Код 			= СтрокаДанных.CODE;
	СтрокаТовар.НоменклатураКод = Формат(Число(СтрокаДанных.CODE), "ЧЦ=6; ЧВН=; ЧГ=0");
   	СтрокаТовар.Штрихкод 		= СтрокаДанных.BAR;
	
	СтрокаТовар.Количество = 1;
    
	// СтрокаТовар.DATASTR1= СтрокаДанных.CODE + " " + СтрокаДанных.DATASTR1;
	СтрокаТовар.DATASTR1 		= СтрокаДанных.DATASTR1; // 12.03.2013 Было прав("000000"+СтрокаДанных.CODE,6)
	СтрокаТовар.DATASTR2 		= УстановитьDATASTR2(СтрокаДанных.CODE, СтрокаДанных.DATASTR1);
	// Дьяченко Перенос акций в BPM
	СтрокаТовар.Цена 			= ?(BPM.РаботаетАкционнаяСистемаБПМ(), СтрокаДанных.FULLPRICE, СтрокаДанных.PRICE);
	// Дьяченко
	СтрокаТовар.СуммаБезСкидки 	= СтрокаТовар.Количество * СтрокаТовар.Цена;
	СтрокаТовар.Сумма 			= СтрокаТовар.Количество * СтрокаТовар.Цена;
	
	// VS++ 03.09.2013 Заполним реквизит Таб.части НомерZОтчета. Для заполнения регистра Продажи лог работы
	СтрокаТовар.НомерZОтчета 	= ПараметрыФР.ФР_НомерZОтчета;
	СтрокаТовар.НомерЧека 		= глНомерПоследнегоЧека_VS + 1;
	
	СтрокаТовар.Акционный 		= СтрокаДанных.CODE_PREF;  //25.03.2013 Прог
	СтрокаТовар.ВидОперации 	= ?(Не РежимВозвратаЧека, Перечисления.ВидыОперацийЧекККМ.Продажа, Перечисления.ВидыОперацийЧекККМ.Возврат);
    СтрокаТовар.Касса 			= Прав(Константы.осн_КассаККМ.Получить().Код,2);
	СтрокаТовар.Кассир 			= глТекущийПользователь;
	
	ЗаполнитьСтавкуНДСВСтроке(СтрокаТовар, СтрокаДанных);

	СтрокаТовар.ДатаВремяСтроки = ТекущаяДата();
	
	Возврат СтрокаТовар;
	
КонецФункции

Процедура ЗаполнитьСтавкуНДСВСтроке(СтрокаТЧ, СтрокаДанных) Экспорт
	
	Если СтрокаДанных.NALOG = 1 Тогда 
		СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли СтрокаДанных.NALOG = 2 Тогда
		СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли СтрокаДанных.NALOG = 3 Тогда
		СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;
	ИначеЕсли СтрокаДанных.NALOG = 4 Тогда
		СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.Акциз5_НДС20;
	КонецЕсли;	
	
КонецПроцедуры	

Функция УстановитьЦену_ДобавитьТовар_Скарбничка(Объект, Цена=0.01) Экспорт
	
	МасссивСтрок = Объект.Продажа.НайтиСтроки(Новый Структура ("Код", "132458"));
	Если МасссивСтрок.Количество() = 0 Тогда 
		НоваяСтрока = Объект.Продажа.Добавить();
	Иначе 
		НоваяСтрока = МасссивСтрок[0];
	КонецЕсли;
	
	Если Цена = 0 Тогда 
		Объект.Продажа.Удалить(НоваяСтрока);
		Возврат Ложь;
	КонецЕсли;	
	
	НоваяСтрока.Код				= 132458;
	НоваяСтрока.НоменклатураКод = 132458;
	НоваяСтрока.Штрихкод		= 2000001324585;
	НоваяСтрока.DATASTR1		= "Скарбничка";
	НоваяСтрока.DATASTR2		= УстановитьDATASTR2(132458, "Скарбничка");
	
	НоваяСтрока.Количество		= 1;
	
	НоваяСтрока.Цена			= Цена;
	НоваяСтрока.СуммаБезСкидки	= Цена;
	НоваяСтрока.Сумма			= Цена;
	
	НоваяСтрока.НомерZОтчета	= ПараметрыФР.ФР_НомерZОтчета;
	НоваяСтрока.НомерЧека		= глНомерПоследнегоЧека_VS+1;
	
	НоваяСтрока.Акционный		= 9; 
	НоваяСтрока.ВидОперации		= Перечисления.ВидыОперацийЧекККМ.Продажа;
	НоваяСтрока.Касса			= Прав(Константы.осн_КассаККМ.Получить().Код, 2);
	НоваяСтрока.Кассир			= глТекущийПользователь;
	
	НоваяСтрока.СтавкаНДС		= Перечисления.СтавкиНДС.НДС20;
	НоваяСтрока.ДатаВремяСтроки	= ПараметрыЧекаККМ.ДатаОперации;
	
	//++ФР РЕГИСТРАЦИЯ АРТИКУЛА В ФР ЧЕК ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Если НЕ ПолучитьОбработкуТО().РегистрацияАртикула_в_ФР(НоваяСтрока) Тогда
		Предупреждение("НЕ УДАЛОСЬ ЗАРЕГИСТРИРОВАТЬ ТОВАР В ПАМЯТИ ФР! ПЕРЕПОДКЛЮЧИТЕ ФР! ",,"ВНИМАНИЕ !!! ФР НЕ ОТВЕЧАЕТ НА КОМАНДЫ !!!");
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "КнопкаВыборНажатие()", "ОШИБКА: ПолучитьОбработкуТО().ПроверкаАртикула()", НоваяСтрока, Неопределено, "Обработки.РМК.Формы.Форма");
		Объект.Продажа.Удалить(НоваяСтрока);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции	

Процедура ОчиститьСкидкиПоБК(Объект) Экспорт //Мулько 09.01.2019
	// Удалить записи по Скидкам БК из ТЧ Скидки 
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипАкции", "БК");
	НайденныеСтроки = Объект.Скидки.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки <> Неопределено Тогда
		Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
			Объект.Скидки.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;	
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипАкции", "БК_СКИДКА");
	НайденныеСтроки = Объект.Скидки.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки <> Неопределено Тогда
		Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
			Объект.Скидки.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыАннуляцииЧека

Функция ПроверкаАннулированВесьЧек(Объект) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ануляция", Истина);
	МассивНайденныхСтрок = Объект.Продажа.НайтиСтроки(СтруктураОтбора);
	
	Возврат МассивНайденныхСтрок.Количество() = Объект.Продажа.Количество();
	
КонецФункции

Процедура АннуляцияВсегоЧека(Объект, РезультатФункции) Экспорт
	
	Для Каждого СтрокаТЧ Из Объект.Продажа Цикл 
		СтрокаТЧ.ВидОперации 	= РезультатФункции.ВидАнуляции;
		СтрокаТЧ.Кассир 		= глТекущийПользователь;
		СтрокаТЧ.Ответственный 	= РезультатФункции.пПользователь;
	КонецЦикла;	
	Объект.ТЧ_ДвиженияПС.Очистить();
	Объект.ТЧ_ЖурналСкидок.Очистить();
	
	ПараметрыЧекаККМ.СостояниеЧека = Перечисления.СостояниеЧека.Закрыт;
	ПараметрыЧекаККМ_ВидОперацииУстановить(РезультатФункции.ВидАнуляции);
	ПараметрыЧекаККМ_СгенерироватьУникальныйНомерЧекаККМ();
	Отредактировать_Записать_ДокументЧекККМ(ПараметрыЧекаККМ, ПараметрыBPM7, ПараметрыFISHKA, Объект);
	ПровестиДокументЧекККМ(Объект);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	МассивНефискальногоТекста = Новый Массив;
	МассивНефискальногоТекста.Добавить("!!! АНУЛЯЦІЯ !!!");
	МассивНефискальногоТекста.Добавить(" ");
    МассивНефискальногоТекста.Добавить("Відповідальный:");
	МассивНефискальногоТекста.Добавить("   " + РезультатФункции.пПользователь);
	МассивНефискальногоТекста.Добавить("Чек "+?(РежимВозвратаЧека, "повернення", "продажу"));
	МассивНефискальногоТекста.Добавить("№ " + СокрЛП(глНомерПоследнегоЧека_VS+1));
	МассивНефискальногоТекста.Добавить("----------------------");
	
	ТЗ_Продажа = Объект.Продажа.Выгрузить().Скопировать();
	ТЗ_Продажа.Свернуть("DATASTR2, Цена", "Количество");
	Для Каждого Строка Из ТЗ_Продажа Цикл
    	ДлинаСуммы = СтрДлина(СокрЛП(Строка.Цена));
		МассивНефискальногоТекста.Добавить(" Кол-во:"+Строка.Количество+" Цена:"+ СокрЛП(Строка.Цена));
		МассивНефискальногоТекста.Добавить(Лев(Строка.DATASTR2,23-ДлинаСуммы));
	КонецЦикла; 
    МассивНефискальногоТекста.Добавить("----------------------");
	
	Попытка	
   		ПолучитьОбработкуТО().ОткрытьЗакрытьНефискальныйЧек(глЭККР, Истина);
		ПолучитьОбработкуТО().НапечататьСтроки(глЭККР, МассивНефискальногоТекста, 34);
		ПолучитьОбработкуТО().ОткрытьЗакрытьНефискальныйЧек(глЭККР, Ложь);
	Исключение
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "КнопкаАннуляцияЧекаНажатие()", "Ошибка при печати чека аннуляции !!! "+Строка(ОписаниеОшибки()), Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");
		ПолучитьОбработкуТО().АннулироватьЧек(глЭККР);
	КонецПопытки;	
	
	Логирование.ДобавитьЗаписьЖурнала(, "КнопкаАннуляцияЧекаНажатие().ТоварАннулирован", "АННУЛЯЦИЯ ВСЕГО ЧЕКА ЗАВЕРШЕНА !!!", Неопределено, Объект.Продажа, "ОбщийМодуль.РаботаСЧеком()");

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//МодульTRASSIR.ТRASSIR_АННУЛЯЦИЯ_ВСЕГО_ЧЕКА(WS);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	глНомерПоследнегоЧека_VS = РабочееМестоКассира.УвеличитьГлобальныйСчетчикЧеков();
	
	ПараметрыЧекаККМ_Очистить();
	Fishka.ИнициализироватьПараметры(Ложь);
	BPM.ПараметрыBPM7_Очистить();
	
	Объект.Продажа.Очистить();
	Объект.ОстаткиСитемыЛоялности.Очистить();
	Объект.ТЧ_ДвиженияПС.Очистить();
	
КонецПроцедуры

Процедура АннуллироватьЧекПоТерминалу(Объект, ДокументЧекККМ, ПараметрыЧекаККМ) Экспорт
	//Перем ПараметрыPOSтерм;
	
		ОбъектЧекККМ = ДокументЧекККМ.ПолучитьОбъект();
		
		Если НЕ ДокументЧекККМ.Проведен Тогда
		
			ОбъектДокументЧекККМ = ДокументЧекККМ.ПолучитьОбъект();
			
			ЗаполнитьПараметрыРМК(Объект, ОбъектДокументЧекККМ, Ложь);
			 
		КонецЕсли;
		
		ФормаАннуляцияТерминал = ПолучитьФорму("ОбщаяФорма.СообщениеАннуляцияТерминал");
		ЭлементыАннуляцияТерминал = ФормаАннуляцияТерминал.ЭлементыФормы;
		ЭлементыАннуляцияТерминал.НадписьЗаголовок1.Заголовок = "ЧЕК №" + ДокументЧекККМ.НомерЧекаККМ + " ПРОБИТ ПО ТЕРМИНАЛУ И НЕ ПРОБИТ ПО ФР!!!";
		ФормаАннуляцияТерминал.ОткрытьМодально();
		
		ТО_Терминал.АннуляцияПоТерминалу(ПараметрыЧекаККМ, ОбъектЧекККМ);
		
КонецПроцедуры

#КонецОбласти

Функция ЗаписатьДанныеЧекаВРегистрыСведений(Объект) Экспорт
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////// ЗАПИШЕМ СТАТУСЫ ПС РЕГИСТР ДвиженияПС
	Если ПараметрыЧекаККМ.ЭтоЧекПродажи Тогда 
		
		ТЧ_ДвиженияПС_Копия = Объект.ТЧ_ДвиженияПС.Выгрузить().Скопировать(Новый Структура("ЭлектронныйПС", Истина), "ШК_ПС");
		ТЧ_ДвиженияПС_Копия.Колонки.Добавить("Период", 					Новый ОписаниеТипов("Дата"));
		ТЧ_ДвиженияПС_Копия.Колонки.Добавить("ОтправленНаBPMonline", 	Новый ОписаниеТипов("Булево"));	
		
		ТЧ_ДвиженияПС_Копия.ЗаполнитьЗначения(ПараметрыЧекаККМ.ДатаОперации, "Период");
		ТЧ_ДвиженияПС_Копия.ЗаполнитьЗначения(Ложь, "ОтправленНаBPMonline");
		
		Для Каждого СтрокаТЧ Из ТЧ_ДвиженияПС_Копия Цикл         												
			
			Попытка
				НоваяСтрокаРС = РегистрыСведений.ЭлектронныеПС.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРС, СтрокаТЧ);
				НоваяСтрокаРС.Записать(Истина);
			Исключение
				Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "ЗаписатьДанныеЧекаВРегистрыСведений()", ОписаниеОшибки(), Неопределено, Неопределено, "ОбщийМодуль.РаботаСЧеком");	
				Предупреждение(ОписаниеОшибки());
			КонецПопытки;	
        КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Объект.Скидки Цикл
			МенеджерЗаписиРС_ЖурналАкций = РегистрыСведений.ЖурналАкцийПоЧекамРРО.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписиРС_ЖурналАкций.Период 			= ПараметрыЧекаККМ.ДатаОперации;
			МенеджерЗаписиРС_ЖурналАкций.СерийныйНомерФР 	= Константы.осн_КассаККМ.Получить().Наименование;
			МенеджерЗаписиРС_ЖурналАкций.НомерЧека			= глНомерПоследнегоЧека_VS+1;
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиРС_ЖурналАкций, СтрокаТЧ);
			
			МенеджерЗаписиРС_ЖурналАкций.СуммаСкидкиПримАкций	= СтрокаТЧ.СкидкаСумма;						
			МенеджерЗаписиРС_ЖурналАкций.СуммаЧека				= ПараметрыЧекаККМ.ФО_СуммаЧекаИтого;
			МенеджерЗаписиРС_ЖурналАкций.СуммаЧекаБезСкидки		= ПараметрыЧекаККМ.ФО_СуммаЧека;
			Попытка
				МенеджерЗаписиРС_ЖурналАкций.Записать();
			Исключение
				Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "ЗаписатьДанныеЧекаВРегистрыСведений()", "ОписаниеОшибки: "+ОписаниеОшибки(), Неопределено, Неопределено, "ОбщийМодуль.РаботаСЧеком");
			КонецПопытки;	
		КонецЦикла;	
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПараметрыРМК(Объект, ДокументЧекККМ, ОчищатьПараметрыЧекаККМ = Истина) Экспорт  
	
	//Мулько 15.10.2019
	Если ОчищатьПараметрыЧекаККМ Тогда
		ПараметрыЧекаККМ_Очистить();
		BPM.ПараметрыBPM7_Очистить();
	КонецЕсли;	
	
	ПараметрыЧекаККМ_ВидОперацииУстановить(Перечисления.ВидыОперацийЧекККМ.Продажа);
	Fishka.ИнициализироватьПараметры();
	
	Если НЕ ОчищатьПараметрыЧекаККМ Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыBPM7, ДокументЧекККМ);
		ЗаполнитьЗначенияСвойств(ПараметрыFISHKA, ДокументЧекККМ);
		ПараметрыBPM7.BPMonline_СостояниеЧекаККМ = Перечисления.СостояниеBPMonline.Записан;
		ПараметрыЧекаККМ.ВидСканБК = "BPM7";
	КонецЕсли;	
	
	//Если ДокументЧекККМ.ВидОперацииЧекаККМ=Перечисления.ВидыОперацийЧекККМ.Возврат Тогда  
	//	ПараметрыЧекаККМ.Возврат_ДатаОперации                           = ДокументЧекККМ.Возврат_ДатаОперации;

	//	ПараметрыЧекаККМ.Возврат_НомерЧекаККМ                         	= ДокументЧекККМ.Возврат_НомерЧекаККМ;
	//	ПараметрыЧекаККМ.Возврат_СерийныйНомерФР                        = ДокументЧекККМ.Возврат_СерийныйНомерФР;
	//	ПараметрыЧекаККМ.Возврат_RRN                         			= ДокументЧекККМ.Возврат_RRN;
	//	ПараметрыЧекаККМ.Возврат_ШК_БК                         			= ДокументЧекККМ.Возврат_ШК_БК;
	//КонецЕсли;
	
	ТЗ_Товары = ДокументЧекККМ.ТЧ_Товары.Выгрузить();
	Для Каждого СтрокаТЗ Из ТЗ_Товары Цикл
		
		Если СтрокаТЗ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Аннуляция Или СтрокаТЗ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Аннуляция_ТестАкций Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаТЗ.Код="132458" Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("CODE", СтрокаТЗ.Код);
		Если НЕ РаботаСПС.ЭтоПодарочныйСертификат(СтрокаТЗ.Код) Тогда
			СтруктураОтбора.Вставить("BAR", СтрокаТЗ.ШК);
		КонецЕсли;	
		ТЗ_Прайс = РегистрыСведений.Прайс.СрезПоследних(ТекущаяДата(), СтруктураОтбора);
		Если ТЗ_Прайс.Количество()>0 Тогда 
			НоваяСтрокаЧека = ДобавитьСтрокуВЧек(Объект, ТЗ_Прайс[0]);	
		КонецЕсли;	
		
		НоваяСтрокаЧека.Штрихкод 			= СтрокаТЗ.ШК;
		НоваяСтрокаЧека.ВидОперации 		= СтрокаТЗ.ВидОперации;
		НоваяСтрокаЧека.Ответственный 		= СтрокаТЗ.Ответственный;
		
		НоваяСтрокаЧека.Возврат_НомерСтроки = СтрокаТЗ.Возврат_НомерСтроки;
		
		//Мулько 31.10.2019
		Если ДокументЧекККМ.СостояниеЧекаККМ = Перечисления.СостояниеЧека.Аварийный_ПробитТерминалНеПробитПоФР ИЛИ
			ДокументЧекККМ.СостояниеЧекаККМ = Перечисления.СостояниеЧека.Аварийный_НеПробитПоФР Тогда
			
			НоваяСтрокаЧека.СкидкаБК 	= СтрокаТЗ.СкидкаБК;
			НоваяСтрокаЧека.СкидкаСумма = СтрокаТЗ.СкидкаСумма;
			НоваяСтрокаЧека.Сумма 		= СтрокаТЗ.Сумма;
		КонецЕсли;
		
		//++ФР РЕГИСТРАЦИЯ АРТИКУЛА В ФР ЧЕК ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		Если НЕ ПолучитьОбработкуТО().РегистрацияАртикула_в_ФР(НоваяСтрокаЧека) Тогда
			Предупреждение("НЕ УДАЛОСЬ ЗАРЕГИСТРИРОВАТЬ ТОВАР В ПАМЯТИ ФР! ПЕРЕПОДКЛЮЧИТЕ ФР! ",,"ВНИМАНИЕ !!! ФР НЕ ОТВЕЧАЕТ НА КОМАНДЫ !!!");
			Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, "ЗаполнитьПараметрыРМК()", "ОШИБКА: ПолучитьОбработкуТО().ПроверкаАртикула()", НоваяСтрокаЧека, Неопределено, "РаботаСЧеком.ЗаполнитьПараметрыРМК");
			Объект.Продажа.Удалить(НоваяСтрокаЧека);
			Возврат;
		КонецЕсли;

		Логирование.ДобавитьЗаписьЖурнала(,"ПриОткрытии().ТоварВОСТАНОВЛЕН_АварийныйЧЕК", Неопределено, НоваяСтрокаЧека, Неопределено, "Обработки.РМК.МодульОбъекта");
	КонецЦикла;	
	
	Если ДокументЧекККМ.СостояниеЧекаККМ = Перечисления.СостояниеЧека.Новый И глНомерПоследнегоЧека_VS <= ДокументЧекККМ.НомерЧекаККМ Тогда 
		ПараметрыЧекаККМ.ДокЧекККМ = ДокументЧекККМ;
		ЗаполнитьЗначенияСвойств(ПараметрыЧекаККМ, ДокументЧекККМ);
	//Мулько 16.10.2019
	ИначеЕсли ДокументЧекККМ.СостояниеЧекаККМ = Перечисления.СостояниеЧека.Аварийный_ПробитТерминалНеПробитПоФР ИЛИ
			  ДокументЧекККМ.СостояниеЧекаККМ = Перечисления.СостояниеЧека.Аварийный_НеПробитПоФР Тогда
			
		ПараметрыЧекаККМ.ДокЧекККМ	= ДокументЧекККМ;
		ЗаполнитьЗначенияСвойств(ПараметрыЧекаККМ, ДокументЧекККМ);
		ПараметрыЧекаККМ.СостояниеЧека 			= ДокументЧекККМ.СостояниеЧекаККМ;
		ПараметрыЧекаККМ.ФО_СуммаПоКарте 		= ДокументЧекККМ.СуммаОплаты_БезНал;
		ПараметрыЧекаККМ.ФО_СуммаВаучером 		= ДокументЧекККМ.СуммаОплаты_Ваучер;
		ПараметрыЧекаККМ.ФО_СуммаНалички 		= ДокументЧекККМ.СуммаОплаты_Нал;
		ПараметрыЧекаККМ.ФО_СуммаСертификатом 	= ДокументЧекККМ.СуммаОплаты_ПС;
		//Мулько 04.11.2019
		Объект.ТЧ_ЖурналСкидок.Загрузить(ДокументЧекККМ.ТЧ_ЖурналСкидок.Выгрузить());
		Объект.ТЧ_ДвиженияПС.Загрузить(ДокументЧекККМ.ТЧ_ДвиженияПС.Выгрузить());
		
		Если глНомерПоследнегоЧека_VS < ДокументЧекККМ.НомерЧекаККМ Тогда 
			глНомерПоследнегоЧека_VS = РабочееМестоКассира.УвеличитьГлобальныйСчетчикЧеков(Ложь); 
		КонецЕсли;		
		ПараметрыЧекаККМ.НомерЧекаККМ = ДокументЧекККМ.НомерЧекаККМ;// глНомерПоследнегоЧека_VS+1;
		
		ПараметрыЧекаККМ.ФО_СуммаЧекаИтого = Объект.Продажа.Итог("Сумма") - Объект.Продажа.Итог("СкидкаБК");
		
		BPM.ВывестиИнфоПоБК_BPM7();
		
		Логирование.ДобавитьЗаписьЖурнала(,"ПриОткрытии().ЧЕК_ВОСТАНОВЛЕН_АварийныйЧЕК", Неопределено, НоваяСтрокаЧека, Неопределено, "Обработки.РМК.МодульОбъекта");
			
	Иначе 
		глНомерПоследнегоЧека_VS = РабочееМестоКассира.УвеличитьГлобальныйСчетчикЧеков(); 
		ПараметрыЧекаККМ.НомерЧекаККМ = глНомерПоследнегоЧека_VS + 1;
	КонецЕсли;	
	
КонецПроцедуры	

 //++ VS формируем DATASTR2 сами без прайса на основании DATASTR1 
Функция УстановитьDATASTR2(CODE, DATASTR1) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЧекККМТЧ_Товары.Наименование КАК DATASTR2
	            |ИЗ
				|	Документ.ЧекККМ.ТЧ_Товары КАК ЧекККМТЧ_Товары
				|ГДЕ
				|	ЧекККМТЧ_Товары.Код = &Код
				|	И ЧекККМТЧ_Товары.Ссылка.КассаККМ.Наименование = &СерийныйНомерФР
				|	И ЧекККМТЧ_Товары.Ссылка.Проведен
				|	И ЧекККМТЧ_Товары.Ссылка.СостояниеЧекаККМ В(&СостояниеЧекаККМ)
				|	И ЧекККМТЧ_Товары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЧекККМТЧ_Товары.Ссылка.Дата УБЫВ";
																			  
	СписокСостояниеЧекаККМ = Новый СписокЗначений;
	СписокСостояниеЧекаККМ.Добавить(Перечисления.СостояниеЧека.Закрыт);
	СписокСостояниеЧекаККМ.Добавить(Перечисления.СостояниеЧека.Аварийный_ПробитПоФР);

	Запрос.УстановитьПараметр("СостояниеЧекаККМ", 	СписокСостояниеЧекаККМ);																		  
	Запрос.УстановитьПараметр("Код", 				CODE);
	Запрос.УстановитьПараметр("СерийныйНомерФР", 	ПараметрыФР.ФР_СерийныйНомер);
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецПериода", 		КонецДня(ТекущаяДата()));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда 
		Возврат Результат.DATASTR2;
	Иначе 
		Возврат	Формат(Число(CODE),"ЧЦ=6;ЧДЦ=0;ЧГ=0") + ОбщегоНазначения.УбратьИзСтрокиСлужебныеСимволы(DATASTR1);
	КонецЕсли;	
	
КонецФункции

Функция Оплата(Объект, ФормаРМК = Неопределено) Экспорт	
	
	Логирование.ДобавитьЗаписьЖурнала(, "Оплата()", "Процедура ОПЛАТИТЬ()" , Неопределено, Неопределено, "ОбщийМодуль.РаботаСЧеком");
	
	// ПРОТЕСТИРУЕМ СВЯЗЬ С ФР + ПОЛУЧИМ ОБОРОТЫ ФР ДО ОПЛАТЫ ЧЕКА 
	Если НЕ ТО_ФР.ПротеститьПодключениеФР() Тогда 
		//ЭлементыФормы.КнопкаОплатить.Доступность = Истина;
		Возврат Ложь;
	КонецЕсли;	

	// ПРОВЕРИМ(и удалим) ЕСТЬ ЛИ 132458(СКАРБНИЧКА) С 0.00 ЦЕНОЙ
	МасссивСтрок = Объект.Продажа.НайтиСтроки(Новый Структура ("Код, Цена", "132458", 0));
	Для Каждого ЭлемМассива Из МасссивСтрок Цикл 
		Объект.Продажа.Удалить(ЭлемМассива);
	КонецЦикла;	
	
	// ПЕЧАТАЕМ ЧЕК НА ТЕРМИНАЛЕ 
	Если ПараметрыЧекаККМ.ФО_СуммаПоКарте > 0 И ПараметрыЧекаККМ.СостояниеЧека <> Перечисления.СостояниеЧека.Аварийный_ПробитТерминалНеПробитПоФР Тогда
		
		Если Константы.ТО_POSтерминал_ВидОбработки.Получить() > 0 Тогда
			Если ПараметрыPOSтерм.POSтерминал_Объект = Неопределено Тогда
				ТО_Терминал.ОткрытьПорт(ПараметрыPOSтерм);
			КонецЕсли;	
			Если НЕ ТО_Терминал.ПровестиОплатуПоТерминалу(ПараметрыPOSтерм, ПараметрыЧекаККМ, ФормаРМК) Тогда
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;
		//Изменим статус чека
		ПараметрыЧекаККМ.СостояниеЧека = Перечисления.СостояниеЧека.Аварийный_ПробитТерминалНеПробитПоФР;
		Отредактировать_Записать_ДокументЧекККМ(ПараметрыЧекаККМ, ПараметрыBPM7, ПараметрыFISHKA, Объект);
		
		// ПРОТЕСТИРУЕМ СВЯЗЬ С ФР																				
		Если НЕ ТО_ФР.ПротеститьПодключениеФР() Тогда
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
	// ЗАПИШЕМ ЧЕК СО ВСЕМИ СКИДКАМИ 	
	Для Каждого СтрокаТЧ Из Объект.Продажа Цикл 
		СтрокаТЧ.ДатаВремяСтроки 	= ПараметрыЧекаККМ.ДатаОперации;
		СтрокаТЧ.ВидОплаты		 	= ПараметрыЧекаККМ.ВидОплаты;
		СтрокаТЧ.ШК_ПС 			 	= ПараметрыЧекаККМ.ФО_ОтоваренныеШК_ПС;	
		СтрокаТЧ.СуммаОплаты_Нал	= ПараметрыЧекаККМ.ФО_СуммаЧекаИтого - ПараметрыЧекаККМ.ФО_СуммаСертификатом
									- ПараметрыЧекаККМ.ФО_СуммаПоКарте - ПараметрыЧекаККМ.ФО_СуммаВаучером;
		СтрокаТЧ.СуммаОплаты_БезНал	= ПараметрыЧекаККМ.ФО_СуммаПоКарте;
		СтрокаТЧ.СуммаОплаты_ПС		= ПараметрыЧекаККМ.ФО_СуммаСертификатом;
		СтрокаТЧ.СуммаОплаты_Ваучер	= ПараметрыЧекаККМ.ФО_СуммаВаучером;
	КонецЦикла;
	
	//Изменим статус чека
	Если ПараметрыЧекаККМ.СостояниеЧека <> Перечисления.СостояниеЧека.Аварийный_ПробитТерминалНеПробитПоФР Тогда
		ПараметрыЧекаККМ.СостояниеЧека = Перечисления.СостояниеЧека.Аварийный_НеПробитПоФР;
		Отредактировать_Записать_ДокументЧекККМ(ПараметрыЧекаККМ, ПараметрыBPM7, ПараметрыFISHKA, Объект);
	КонецЕсли;
	
	// ПЕЧАТАЕМ ЧЕК НА ФР		
	РезультатПечатиФР = ТО_ФР.ПечатьЧекаНаФР(Объект);
	
	Если РезультатПечатиФР = Неопределено Или НЕ РезультатПечатиФР Тогда
		Если ПараметрыЧекаККМ.СостояниеЧека = Перечисления.СостояниеЧека.Аварийный_ПробитТерминалНеПробитПоФР Тогда
			ОткрытьФормуМодально("ОбщаяФорма.СообщениеАварийныйЧекТерминал");
		Иначе	
			Отредактировать_Записать_ДокументЧекККМ(ПараметрыЧекаККМ, ПараметрыBPM7, ПараметрыFISHKA, Объект);
			ОткрытьФормуМодально("ОбщаяФорма.СообщениеАварийныйЧек");
		КонецЕсли;	
		
		//ПрекратитьРаботуСистемы(Истина);
		ПрекратитьРаботуСистемы();
	
	Иначе
	КонецЕсли;	
	
	Отредактировать_Записать_ДокументЧекККМ(ПараметрыЧекаККМ, ПараметрыBPM7, ПараметрыFISHKA, Объект);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьНомерЧекаТекущейСмены(Ссылка, НомерZОтчета, ВидОперацииЧекаККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				  |	СУММА(1) КАК КоличествоЧековВСмене
				  |ИЗ
				  |	Документ.ЧекККМ КАК ЧекККМ
				  |ГДЕ
				  |	ЧекККМ.Дата > &Дата
				  |	И ЧекККМ.НомерZОтчета = &НомерZОтчета
				  |	И ЧекККМ.Ссылка <> &Ссылка
				  |	И ЧекККМ.ВидОперацииЧекаККМ = &ВидОперацииЧекаККМ";
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("НомерZОтчета", НомерZОтчета);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидОперацииЧекаККМ", ВидОперацииЧекаККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.КоличествоЧековВСмене<>Null Тогда 
		НомерЧекаККМ_ТекущейСмены = Выборка.КоличествоЧековВСмене+1;
	Иначе 	
		НомерЧекаККМ_ТекущейСмены = 1;
	КонецЕсли;
	
	Возврат НомерЧекаККМ_ТекущейСмены;
	
КонецФункции 

#Область BPM

// Дьяченко Перенос акций в BPM для отладки
Функция ПрименитьАкцииBPM(Объект) Экспорт
	
	Логирование.ДобавитьЗаписьЖурнала(, "КнопкаПрименитьАкцииНажатие()", "НАЖАТА КНОПКА: ПрименитьАкции_BPM", Неопределено, Неопределено, "Обработки.РМК.Формы.Форма");
	ФормаРМК = Обработки.РМК.ПолучитьФорму("Форма");
				
	BPM.ПараметрыBPM7_Очистить(Истина, Ложь);
	
	СчетчикПопыток = 3;
	глАкционнаяСистемаBPM = Ложь;
	Пока СчетчикПопыток > 0 Цикл 
		Если BPM.BPM7_SetPurchaseInfo(Объект.Продажа) Тогда 
			Прервать;
		Иначе 
			СчетчикПопыток = СчетчикПопыток - 1;
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ BPM.РаботаетАкционнаяСистемаБПМ() Тогда 
		// пересчитать цены под акции Простор и установить БПМ статус чека = Офлайн И 
		Возврат Ложь;
	КонецЕсли;	
	
	СуммаБонусами	 = 0;
	СуммаСкидкиПоБК	 = 0;
	Если ПараметрыЧекаККМ.ЭтоЧекПродажи И ПараметрыBPM7.Result = 0 Тогда  
		Для Каждого СтрокаТЧ Из Объект.Продажа Цикл						
			НайденнаяСтрока = ПараметрыBPM7.BPMonline_ТЗ_Продажы.Найти(СтрокаТЧ.НомерСтроки, "Position");
			Если НайденнаяСтрока = Неопределено Тогда                         
				Продолжить; 	
			КонецЕсли;			
			СкидкаБК = НайденнаяСтрока.DiscountAmount * 0.01; 
			Если СтрокаТЧ.Сумма - СкидкаБК > 0.01 Тогда 				
				СтрокаТЧ.СкидкаБК = СкидкаБК;
			ИначеЕсли СтрокаТЧ.Сумма > 0.01 И СтрокаТЧ.Сумма - СкидкаБК <= 0.01 Тогда 
				СтрокаТЧ.СкидкаБК = СтрокаТЧ.Сумма - 0.01;
			КонецЕсли;
			Если НайденнаяСтрока.CampaignTitle <> Неопределено Тогда 
				ТекстДляДоскиСообщений = НайденнаяСтрока.ProductCode + ": "+ НайденнаяСтрока.CampaignTitle;
				РабочееМестоКассира.ВывестиТекстНаДоскуСообщений(ФормаРМК, ТекстДляДоскиСообщений, Истина);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
	
#КонецОбласти

#Область Акции
Функция ПрименитьАкции_ЕстьАкцииПросканироватьБК(Объект) Экспорт
	
	Объект.ТЧ_ЖурналСкидок.Очистить();
	
	////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////
	//                                                        //
	// ++VS Установим номера акции по извесным видам товара   //
	Для Каждого СтрокаТЧ Из Объект.Продажа Цикл 
		Если СтрокаТЧ.ВидОперации<>Перечисления.ВидыОперацийЧекККМ.Продажа Тогда   	Продолжить;	КонецЕсли;	
		
		// Акция применена к этой позиции применять повторно нельзя
		// Проведена переоцена товара на маркете (желтые ценники)
		Если СтрокаТЧ.Акционный = 1 Тогда 		
			СтрокаТЧ.НомерАкции												= 99997;	
		КонецЕсли;
		
		//Продавать акцизный товар со скидкой нельзя !!!
		Если СтрокаТЧ.Акционный = 2 Тогда 		
			СтрокаТЧ.НомерАкции												= 99998;	
		КонецЕсли;
		
		//Продавать СТОКОВЫЙ ТОВАР со скидкой нельзя !!!
		Если СтрокаТЧ.Акционный = 7 Тогда 		
			СтрокаТЧ.НомерАкции												= 99995;	
		КонецЕсли;
		
		// Продавать уцененный товар со скидкой нельзя!!!
		Если СтрокаТЧ.Акционный = 5 Тогда 		
			СтрокаТЧ.НомерАкции												= 99994;	
		КонецЕсли;

		
		//Продавать сертификат со скидкой нельзя !!!
		Если СтрокаТЧ.Акционный = 9 Тогда 		
			СтрокаТЧ.НомерАкции												= 99996;	
		КонецЕсли;
	КонецЦикла;
	
	ЕстьАкцииПросканироватьБК = Ложь;
	
	МеханизмыСкидокИАкций.фСкидкаНаБК(Объект);	
	МеханизмыСкидокИАкций.фСкидкаНаТовар_БРЕНД_СКИДКА(Объект);
    МеханизмыСкидокИАкций.фСкидкаНаТовар_ЗАКУПКА_ВЫДАЧА(Объект);
	МеханизмыСкидокИАкций.фСкидкаНаТовар_N_PLUS_N(Объект);
	МеханизмыСкидокИАкций.фСкидкаНаТовар_ДКО(Объект);
	МеханизмыСкидокИАкций.фСкидкаНаТовар_ДКД(Объект);	
	МеханизмыСкидокИАкций.фСкидкаНаТовар_ПОРОГ_ПОДАРОК(Объект);
	
	Возврат ЕстьАкцииПросканироватьБК;

КонецФункции

Процедура ОтменитьАкции(Объект) Экспорт
	
	Если РежимВозвратаЧека Тогда
		Возврат; 
	КонецЕсли;
																			
	Объект.Скидки.Очистить();
	
	ТЗ_Буффер = Объект.ТЧ_ДвиженияПС.Выгрузить().Скопировать(Новый Структура("СтатусПС", "Продан"));
	Объект.ТЧ_ДвиженияПС.Загрузить(ТЗ_Буффер);
	
	Для Каждого СтрокаТЧ Из Объект.Продажа Цикл
		// Дьяченко перенос акций в BPM
		СтрокаТЧ.СкидкаБК		= 0;
		// Дьяченко
		СтрокаТЧ.НомерАкции 	= 0;
		СтрокаТЧ.СкидкаСумма 	= 0;
        СтрокаТЧ.Сумма			= СтрокаТЧ.Количество * СтрокаТЧ.Цена;
		СтрокаТЧ.СуммаБезСкидки = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
		СтрокаТЧ.СуммаНДС		= 0;		
		СтрокаТЧ.ШК_ДКО 		= "";
		СтрокаТЧ.ШК_ДКД 		= "";
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ПолучитьТекстПечатиТерминал(ПараметрыЧекаККМ) Экспорт
	
	МассивТЕКСТ = Новый Массив;
	МассивТЕКСТ.Добавить("**********************");
	//Мулько 07.11.2019
	//Если ПараметрыЧекаККМ.POSтерминал_ВидТранзакции=0 Тогда
	Если ПараметрыЧекаККМ.POSтерминал_ВидТранзакции = Неопределено ИЛИ ПараметрыЧекаККМ.POSтерминал_ВидТранзакции = "" ИЛИ ПараметрыЧекаККМ.POSтерминал_ВидТранзакции="0" Тогда
		МассивТЕКСТ.Добавить("***    ОПЛАТА      ***");
	ИначеЕсли ПараметрыЧекаККМ.POSтерминал_ВидТранзакции="1" Тогда 	
		МассивТЕКСТ.Добавить("***  ПОВЕРНЕННЯ    ***");
		МассивТЕКСТ.Добавить("*** ЗБЕРЕЖІТЬ ЧЕК  ***");
	Иначе
		МассивТЕКСТ.Добавить("***   АНУЛЯЦИЯ     ***");
	КонецЕсли;
	
	//Мулько 06.11.2019
	//МассивТЕКСТ.Добавить("ТЕРМІНАЛ №: "+ПараметрыЧекаККМ.POSтерминал_ТерминалаID);
	ЭквайерТекст = ТО_Терминал.ПолучитьБанкТерминалаТекст();
	МассивТЕКСТ.Добавить(ЭквайерТекст + " №: "+ПараметрыЧекаККМ.POSтерминал_ТерминалаID);
	МассивТЕКСТ.Добавить("ЧЕК N: "+ПараметрыЧекаККМ.POSтерминал_НомерЧека);
	МассивТЕКСТ.Добавить("RRN: "+ПараметрыЧекаККМ.POSтерминал_RRN);
	МассивТЕКСТ.Добавить(ПараметрыЧекаККМ.POSтерминал_ВидКарты);
	МассивТЕКСТ.Добавить(ПараметрыЧекаККМ.POSтерминал_НомерКарты);
	МассивТЕКСТ.Добавить(ПараметрыЧекаККМ.POSтерминал_ВладелецКарты);
	МассивТЕКСТ.Добавить(СтрЗаменить("КОД АВТОРИЗ. "+ПараметрыЧекаККМ.POSтерминал_КодАвторизации, ";", ""));
	МассивТЕКСТ.Добавить( Формат(ПараметрыЧекаККМ.POSтерминал_ДатаЧека, "ДФ='dd/MM/yyyy HH:mm:ss'"));
	Если ПараметрыЧекаККМ.POSтерминал_ПодписьКлиента Тогда 
		МассивТЕКСТ.Добавить("Клієнт_______________" );
	Иначе 
		МассивТЕКСТ.Добавить("Підпис власника картки");
		МассивТЕКСТ.Добавить("не потрібен!");
	КонецЕсли;	
	МассивТЕКСТ.Добавить("**********************");
	
	ПараметрыЧекаККМ.POSтерминал_ТекстДляЧекаФР = МассивТЕКСТ;

КонецПроцедуры

#Область ПроверкиПриПродаже

Функция ПроверкаЧекаНаПодарочныйФонд(ТЧ_Продажа) Экспорт
		
	ПодарочныйФондПрисутствуетВЧеке = Ложь;		
	
	//ТЧ_Продажа = Продажа.Выгрузить().Скопировать(Новый Структура("НомерАкции, ВидОперации", 0, Перечисления.ВидыОперацийЧекККМ.Продажа));
	//ТЧ_Продажа.ВыгрузитьКолонку("Код");
	
	СписокТоваров = Новый СписокЗначений();
	Для Каждого СтрокаТЧ Из ТЧ_Продажа Цикл 
		СписокТоваров.Добавить(Формат(Число(СтрокаТЧ.Код), "ЧЦ=6; ЧН=; ЧВН=; ЧГ="));
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				  |	АкционныеТовары.ТипАкции,
				  |	АкционныеТовары.Акция,
				  |	АкционныеТовары.НомерАкции,
				  |	АкционныеТовары.КодТовара
				  |ИЗ
				  |	РегистрСведений.АкционныеТовары КАК АкционныеТовары
				  |ГДЕ
				  |	АкционныеТовары.ПодарочныйФонд
				  |	И АкционныеТовары.КодТовара В(&КодТовара)";
	
	Запрос.УстановитьПараметр("КодТовара", СписокТоваров);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = "ВНИМАНИЕ !!! В ЧЕКЕ НАЙДЕН ПОДАРОЧНЫЙ ФОНД(товар) КОТОРЫЙ ПРОДАЕТЬСЯ НЕ ПО УСЛОВИЮ АКЦИИ !!!" + Символы.ПС + Символы.ПС +
						//"НомерСтрокиЧека: " + СтрокаТЧ.НомерСтроки + Символы.ПС+
						"КОД ТОВАРА: " + Выборка.КодТовара + Символы.ПС + Символы.ПС+
						//"Наименование: " + СтрокаТЧ.DATASTR1 + Символы.ПС + Символы.ПС+
						"АННУЛИРУЙТЕ СТРОКУ ЧЕКА ИЛИ ВЫПОЛНИТЕ ВСЕ УСЛОВИЯ ПО АКЦИИ !!!";

		Предупреждение(ТекстСообщения,,"ВНИМАНИЕ !!! ЗАПРЕЩЕНО ПРОДАВАТЬ ПОДАРОЧНЫЙ ФОНД(товар) !!!");
		
		ПодарочныйФондПрисутствуетВЧеке = Истина;
		
	КонецЦикла;
	
	//Для Каждого СтрокаТЧ Из Продажа Цикл 
	//	Если СтрокаТЧ.НомерАкции<>0 Тогда 									Продолжить;		КонецЕсли;
	//	Если СтрокаТЧ.ВидОперации<>Перечисления.ВидыОперацийЧекККМ.Продажа Тогда	Продолжить;		КонецЕсли; 
	//		
	//	Если СтрокаТЧ.Код="132221" Тогда 					
	//		ТекстСообщения													= "ВНИМАНИЕ !!! В ЧЕКЕ НАЙДЕН ПОДАРОЧНЫЙ ФОНД(товар) КОТОРЫЙ ПРОДАЕТЬСЯ НЕ ПО УСЛОВИЮ АКЦИИ !!!"+ Символы.ПС+ Символы.ПС+
	//																		"НомерСтрокиЧека: " + СтрокаТЧ.НомерСтроки + Символы.ПС+
	//																		"Код: " + СтрокаТЧ.Код + Символы.ПС+
	//																		"Наименование: " + СтрокаТЧ.DATASTR1 + Символы.ПС + Символы.ПС+
	//																		"АННУЛИРУЙТЕ СТРОКУ ЧЕКА ИЛИ ВЫПОЛНИТЕ ВСЕ УСЛОВИЯ ПО АКЦИИ !!!";

	//        Предупреждение(ТекстСообщения,,"ВНИМАНИЕ !!! ЗАПРЕЩЕНО ПРОДАВАТЬ ПОДАРОЧНЫЙ ФОНД(товар) !!!");
	//		
	//		ПодарочныйФондПрисутствуетВЧеке									= Истина;
	//	КонецЕсли;	
	//КонецЦикла;	
		
	Возврат ПодарочныйФондПрисутствуетВЧеке;	
	
КонецФункции	

#КонецОбласти