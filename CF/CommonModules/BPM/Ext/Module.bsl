
Функция BPM7_GetCardBalanceInfo(ПараметрыBPM7) Экспорт
	
	ПараметрыBPM7.BPMonline_СостояниеЧекаККМ = Перечисления.СостояниеBPMonline.Офлайн;
	
	ПараметрыBPM7.Result					= 1;
	ПараметрыBPM7.ResultCodeDescription   	= "";
	ПараметрыBPM7.RequestBody				= "";
	ПараметрыBPM7.ResponceBody				= "";
	ПараметрыBPM7.ИмяПроцедуры				= "BPM7_GetCardBalanceInfo()";

	//Создаем начальные параметры HTTP-запроса  
	ПараметрыBPM7.ServiceURL = "GetCardBalanceInfo";
	
  	ПараметрыBPM7.Headers 	 = Новый Соответствие;
	ПараметрыBPM7.Headers.Вставить("Content-Type", "application/json;charset=utf-8"); 
	ПараметрыBPM7.Headers.Вставить("Authorization", "Basic U3VwZXJ2aXNvcjpTdXBlcnZpc29y");
			
	Попытка
		//Создаем структуру запроса
		RequestСтруктура = Новый Структура;
		RequestСтруктура.Вставить("OnDate", ТекущаяДата());
		RequestСтруктура.Вставить("CardAccountNumber", "");
		
		Если НЕ ПустаяСтрока(ПараметрыBPM7.BPMonline_Phone) Тогда 
			RequestСтруктура.Вставить("PhoneNumber", 	ПараметрыBPM7.BPMonline_Phone);
		ИначеЕсли НЕ ПустаяСтрока(ПараметрыBPM7.BPMonline_ШК) Тогда  
			RequestСтруктура.Вставить("CardNumber", 	ПараметрыBPM7.BPMonline_ШК);
		Иначе
			ПараметрыBPM7.Result				= 1;
			ПараметрыBPM7.ResultCodeDescription = "ОШИБКА: " + ПараметрыBPM7.ИмяПроцедуры 
						+ " Не удалось сформировать исходящий запрос!!!"
						+ Символы.ПС + ОписаниеОшибки();
			Возврат Ложь;
		КонецЕсли;	
				
		ПараметрыBPM7.RequestСтруктура = RequestСтруктура;			
	Исключение
		ПараметрыBPM7.Result = 1;
		ПараметрыBPM7.ResultCodeDescription = "ОШИБКА: " + ПараметрыBPM7.ИмяПроцедуры
						+ " Не удалось сформировать исходящий запрос !!!"
						+ Символы.ПС + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
		
	Если НЕ BPM7_Отправить_ЗапросHTTP() Тогда
		Если НЕ ПустаяСтрока(ПараметрыBPM7.BPMonline_Phone) Тогда 
			ПараметрыBPM7.ResultCodeDescription = "НАЧИСЛЕНИЕ бонусов будет выполнено позже (оффлайн)! Телефон: "
						+ ПараметрыBPM7.BPMonline_Phone + Символы.ПС + Символы.ПС
						+ ПараметрыBPM7.ResultCodeDescription;
        ИначеЕсли НЕ ПустаяСтрока(ПараметрыBPM7.BPMonline_ШК) Тогда  
			ПараметрыBPM7.ResultCodeDescription = "НАЧИСЛЕНИЕ бонусов будет выполнено позже (оффлайн)! ШК БК(бонусной карты): "
						+ ПараметрыBPM7.BPMonline_ШК + Символы.ПС + Символы.ПС 
						+ ПараметрыBPM7.ResultCodeDescription;
        КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;	
	
	
	ПараметрыBPM7.ResponceСтруктура.Свойство("Info", ПараметрыBPM7.ResultCodeDescription);
	ПараметрыBPM7.Result = ?(ПараметрыBPM7.ResultCodeDescription = "OK", 0, 1);
	
	Если ПустаяСтрока(ПараметрыBPM7.BPMonline_ШК) Тогда 
		ПараметрыBPM7.ResponceСтруктура.Свойство("CardNumber", ПараметрыBPM7.BPMonline_ШК);
		ПараметрыBPM7.BPMonline_ШК	= ?(ПараметрыBPM7.BPMonline_ШК=Неопределено, "", ПараметрыBPM7.BPMonline_ШК); 	
	КонецЕсли;
	
	ПараметрыBPM7.ResponceСтруктура.Свойство("CardStatus", 	ПараметрыBPM7.BPMonline_СтатусКарты);
	ПараметрыBPM7.ResponceСтруктура.Свойство("BonusesInfo", ПараметрыBPM7.BPMonline_BonusesInfo);	
	ПараметрыBPM7.BPMonline_BonusesInfo	= ?(ПараметрыBPM7.BPMonline_BonusesInfo = Неопределено, Новый Массив, ПараметрыBPM7.BPMonline_BonusesInfo);

	
	ПараметрыBPM7.BPMonline_ОбщБонусыВсегоДоступно		= 0;
	ПараметрыBPM7.BPMonline_ОбщБонусыНеактивне			= 0;
	ПараметрыBPM7.BPMonline_ОбщСпецБонусыВсегоДоступно	= 0;
	ПараметрыBPM7.BPMonline_ОбщСпецБонусыНеактивне		= 0;
	
	ПараметрыBPM7.BPMonline_ТЗ_BonusesInfo.Очистить();
	
	Для Каждого Элемент Из ПараметрыBPM7.BPMonline_BonusesInfo Цикл 
		Если НЕ Элемент.Свойство("BonusTypeCode") Тогда 
			Элемент.Вставить("BonusTypeCode", "");
		КонецЕсли;
		
		НоваяСтрока					= ПараметрыBPM7.BPMonline_ТЗ_BonusesInfo.Добавить();
		НоваяСтрока.BonusTypeCode	= Элемент.BonusTypeCode;
		НоваяСтрока.BonusStatusCode	= Элемент.BonusStatusCode;
		НоваяСтрока.BonusAmount		= Элемент.BonusAmount;
		
		Если Элемент.BonusTypeCode="Money" Тогда 
		//Если Элемент.Свойство("CampaignTitle") И Элемент.CampaignTitle="Базовые бонусы 3%" Тогда
			Если Элемент.BonusStatusCode="Active" Тогда  
				ПараметрыBPM7.BPMonline_ОбщБонусыВсегоДоступно = ПараметрыBPM7.BPMonline_ОбщБонусыВсегоДоступно + Элемент.BonusAmount*0.01;
			ИначеЕсли Элемент.BonusStatusCode="Inactive" Тогда  
				ПараметрыBPM7.BPMonline_ОбщБонусыНеактивне = ПараметрыBPM7.BPMonline_ОбщБонусыНеактивне + Элемент.BonusAmount*0.01;
			КонецЕсли;	
		Иначе			
			Если Элемент.BonusStatusCode="Active" Тогда  
				ПараметрыBPM7.BPMonline_ОбщСпецБонусыВсегоДоступно = ПараметрыBPM7.BPMonline_ОбщСпецБонусыВсегоДоступно 
					+ Элемент.BonusAmount * 0.01;
			ИначеЕсли Элемент.BonusStatusCode = "Inactive" Тогда   
				ПараметрыBPM7.BPMonline_ОбщСпецБонусыНеактивне = ПараметрыBPM7.BPMonline_ОбщСпецБонусыНеактивне
					+ Элемент.BonusAmount * 0.01;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	// перенос акций в BPM  если карта не найдена (Result = 1), но сервис живой (200)
	Если ПараметрыBPM7.Result = 1 И ПараметрыBPM7.Responce.КодСостояния = 200 Тогда
		глАкционнаяСистемаBPM = Истина
	КонецЕсли;	
	Если ПараметрыBPM7.Result = 1 Тогда 
		Возврат Ложь;
	КонецЕсли;	
	// Дьяченко Перенос акций в BPM
	глАкционнаяСистемаBPM = Истина;
	// Дьяченко
	ПараметрыBPM7.BPMonline_СостояниеЧекаККМ = Перечисления.СостояниеBPMonline.Авторизация;
	Возврат Истина;
КонецФункции	
 
Функция BPM7_Login() Экспорт 
	
	// без этого куска ошибка 404
	ПараметрыBPM7.HostName	= "bpm7.prostor.ua"; 
	СертификатSSL			= Новый ЗащищенноеСоединениеOpenSSL();                                                                                                                                              
	ПараметрыBPM7.HTTP		= Новый HTTPСоединение(	ПараметрыBPM7.HostName, 91, "Supervisor", "Supervisor", ПараметрыBPM7.Прокси, ПараметрыBPM7.Таймаут, СертификатSSL);
	// без этого куска ошибка 404 
	// для теста на препроде 
	Если Константы.BPMonline_Адрес.Получить() = "bpm7test.prostor.ua" Тогда 	
		ПараметрыBPM7.Вставить("HostName", "bpm7test.prostor.ua");
		ПараметрыBPM7.Вставить("Порт", 81); // 81); //83
		ПараметрыBPM7.HTTP = Новый HTTPСоединение(ПараметрыBPM7.HostName, ПараметрыBPM7.Порт,,,,ПараметрыBPM7.Таймаут); 
	КонецЕсли;	
	// для теста на препроде	
		
	ПараметрыBPM7.Result													= 1;
	ПараметрыBPM7.ResultCodeDescription   									= "";
	ПараметрыBPM7.RequestBody												= "";
	ПараметрыBPM7.ResponceBody												= "";
	
	ПараметрыBPM7.ИмяПроцедуры												= "BPM7_Login()";
	
	ПараметрыBPM7.ServiceURL												= "/ServiceModel/AuthService.svc/Login";
	
  	ПараметрыBPM7.Headers													= Новый Соответствие;
	ПараметрыBPM7.Headers.Вставить("Content-Type", 		"application/json"); 
	
	Попытка
		//Создаем структуру запроса
		RequestСтруктура													= Новый Структура;
		RequestСтруктура.Вставить("UserName", 			"Supervisor");
		RequestСтруктура.Вставить("UserPassword", 		"Supervisor");

		ПараметрыBPM7.RequestСтруктура										= RequestСтруктура;		
	Исключение
		ПараметрыBPM7.Result												= 1;
		ПараметрыBPM7.ResultCodeDescription   								= "ОШИБКА: "+ПараметрыBPM7.ИмяПроцедуры+" Не удалось сформировать исходящий запрос !!!" + Символы.ПС + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ BPM7_Отправить_ЗапросHTTP() Тогда 
		Возврат Ложь;
	КонецЕсли;	

	
	
	Если ПараметрыBPM7.Responce.КодСостояния<>200 Тогда
		ПараметрыBPM7.Result												= 1;
		ПараметрыBPM7.ResultCodeDescription   								= "ОШИБКА: BPM7_Login() !!!  Responce.КодСостояния = " + СокрЛП(ПараметрыBPM7.Responce.КодСостояния) + Символы.ПС + ОписаниеОшибки();
	Иначе 	
		ЗаголовкиОтвета 													= ПараметрыBPM7.Responce.Заголовки;
		Cookie																= ?(ЗаголовкиОтвета.Количество()>0, ЗаголовкиОтвета.Получить("Set-Cookie"), Неопределено);
		ПараметрыBPM7.Cookie     											= ?(ЗначениеЗаполнено(Cookie), formatCookie(Cookie), ""); 
	КонецЕсли;
	
	Для Каждого Элемент Из ПараметрыBPM7.ResponceСтруктура Цикл 
		Если Элемент.Ключ="Code" Тогда 
			ПараметрыBPM7.Result											= Элемент.Значение;	
		ИначеЕсли Элемент.Ключ="ResultCodeDescription" Тогда 
			ПараметрыBPM7.ResultCodeDescription   							= ПараметрыBPM7.ResultCodeDescription + ПараметрыBPM7.ResponceСтруктура.Message;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ПараметрыBPM7.Result=1 Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;	

КонецФункции	

Функция formatCookie(cookie)
	МассивСтрок		= СтрРазделить(cookie, ";", Ложь);
	Для Каждого стр Из МассивСтрок Цикл
		Если Найти(стр,"BPMLOADER") Тогда
			BPMLOADER = СокрЛП(СтрЗаменить(стр,"HttpOnly,",""));
		ИначеЕсли Найти(стр,"BPMCSRF") Тогда
			BPMCSRF = СокрЛП(СтрЗаменить(стр,"HttpOnly,",""));
		ИначеЕсли Найти(стр,"ASPXAUTH") Тогда
			ASPXAUTH = СокрЛП(СтрЗаменить(стр,"HttpOnly,",""));
		КонецЕсли;
	КонецЦикла;	
	
	ПараметрыBPM7.ASPXAUTH		= СокрЛП(СтрЗаменить(ASPXAUTH, 	".ASPXAUTH=", ""));
	ПараметрыBPM7.BPMLOADER		= СокрЛП(СтрЗаменить(BPMLOADER, 	"BPMLOADER=", ""));
	ПараметрыBPM7.BPMCSRF		= СокрЛП(СтрЗаменить(BPMCSRF, 		"BPMCSRF=", ""));
	
	Возврат "BPMLOADER=" 	+ ПараметрыBPM7.BPMLOADER + ";" + 
			".ASPXAUTH="	+ ПараметрыBPM7.ASPXAUTH + ";" + 
			"BPMCSRF=" 		+ ПараметрыBPM7.BPMCSRF

КонецФункции

Функция BPM7_AddContactInfo() Экспорт  
	ПараметрыBPM7.Result				= 1;
	ПараметрыBPM7.ResultCodeDescription = "";
	ПараметрыBPM7.RequestBody			= "";
	ПараметрыBPM7.ResponceBody			= "";
	
	ПараметрыBPM7.ИмяПроцедуры			= "BPM7_AddContactInfo()";

	//Создаем начальные параметры HTTP-запроса  
	
  	ПараметрыBPM7.Headers = Новый Соответствие;
	Если Константы.BPM_РегистрацияВПроцессинге.Получить() Тогда
		ПараметрыBPM7.ServiceURL = "/AddContactInfo";
		ПараметрыBPM7.Headers.Вставить("Content-Type", "application/json"); // charset=utf-8"); 
		ПараметрыBPM7.Headers.Вставить("Authorization", "Basic U3VwZXJ2aXNvcjpTdXBlcnZpc29y");
	Иначе
		ПараметрыBPM7.ServiceURL = "/0/rest/ConsimpleContactService/AddContactInfo";
		ПараметрыBPM7.Headers.Вставить("Content-Type", "application/json; charset=utf-8"); 
		ПараметрыBPM7.Headers.Вставить("Expect", "100-continue");
		ПараметрыBPM7.Headers.Вставить("BPMCSRF", 		ПараметрыBPM7.BPMCSRF);
		ПараметрыBPM7.Headers.Вставить("Cookie", 		ПараметрыBPM7.Cookie);
	КонецЕсли;
		
	Попытка
		//Создаем структуру запроса
		RequestСтруктура				= Новый Структура;
		RequestСтруктура.Вставить("Name", 						ПараметрыBPM7.BPMonline_Contact_Name);
		RequestСтруктура.Вставить("MobileNumber", 				ПараметрыBPM7.BPMonline_Phone);
		RequestСтруктура.Вставить("BusinessNet", 				ПараметрыBPM7.BPMonline_BusinessNet);
		RequestСтруктура.Вставить("ContactPassword", 			ПараметрыBPM7.BPMonline_Contact_Password);
		RequestСтруктура.Вставить("Gender", 					ПараметрыBPM7.BPMonline_Contact_Gender);
		RequestСтруктура.Вставить("Birthdate", 					ПараметрыBPM7.BPMonline_Contact_Birthdate);
		RequestСтруктура.Вставить("RegistratedDate", 			ТекущаяДата());


		ПараметрыBPM7.RequestСтруктура	= RequestСтруктура;		
	Исключение
		ПараметрыBPM7.Result			= 1;
		ПараметрыBPM7.ResultCodeDescription = "ОШИБКА: "+ПараметрыBPM7.ИмяПроцедуры + " Не удалось сформировать исходящий запрос !!!"
					+ Символы.ПС + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ BPM7_Отправить_ЗапросHTTP() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Result								= Неопределено;
	ПараметрыBPM7.ResponceСтруктура.Свойство("Result", 						Result);	
	ПараметрыBPM7.Result				= ?(Result=Неопределено, 1, Result);
	
	ResultCodeDescription				= Неопределено;
	ПараметрыBPM7.ResponceСтруктура.Свойство("ResultCodeDescription", 		ResultCodeDescription);
	ResultCodeDescription				= ?(ResultCodeDescription=Неопределено, Новый Массив, ПараметрыBPM7.ResponceСтруктура.ResultCodeDescription);
	Для Каждого Элемент Из ResultCodeDescription Цикл 
		ПараметрыBPM7.ResultCodeDescription	= "Key = " + Элемент.Key+ "  Value = " + Элемент.Value + ";" +Символы.ПС;
	КонецЦикла;	
			
	Если ПараметрыBPM7.Result<>0 И ПараметрыBPM7.Responce.КодСостояния <> 200 Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции

Функция BPM7_BindProfileToCard() Экспорт  
	ПараметрыBPM7.Result				= 1;
	ПараметрыBPM7.ResultCodeDescription = "";
	ПараметрыBPM7.RequestBody			= "";
	ПараметрыBPM7.ResponceBody			= "";
	
	ПараметрыBPM7.ИмяПроцедуры			= "BPM7_BindProfileToCard()";
	
	//Создаем начальные параметры HTTP-запроса  
		
  	ПараметрыBPM7.Headers = Новый Соответствие;
	Если Константы.BPM_РегистрацияВПроцессинге.Получить() Тогда 
		ПараметрыBPM7.ServiceURL = "/BindProfileToCard";
		ПараметрыBPM7.Headers.Вставить("Content-Type", "application/json"); // charset=utf-8"); 
		ПараметрыBPM7.Headers.Вставить("Authorization", "Basic U3VwZXJ2aXNvcjpTdXBlcnZpc29y");
	Иначе
		ПараметрыBPM7.ServiceURL = "/0/rest/ConsimpleCardService/BindProfileToCard";
		ПараметрыBPM7.Headers.Вставить("Content-Type", "application/json; charset=utf-8"); 
		ПараметрыBPM7.Headers.Вставить("Expect", "100-continue");
		ПараметрыBPM7.Headers.Вставить("BPMCSRF", 		ПараметрыBPM7.BPMCSRF);
		ПараметрыBPM7.Headers.Вставить("Cookie", 		ПараметрыBPM7.Cookie);
	КонецЕсли;

			
	Попытка
		//Создаем структуру запроса
		RequestСтруктура				= Новый Структура;
		RequestСтруктура.Вставить("NewCardNumber", 	 ПараметрыBPM7.BPMonline_ШК);
		RequestСтруктура.Вставить("MobileNumber", 	 ПараметрыBPM7.BPMonline_Phone);
		RequestСтруктура.Вставить("BusinessNet", 	 ПараметрыBPM7.BPMonline_BusinessNet);

		ПараметрыBPM7.RequestСтруктура	= RequestСтруктура;		
	Исключение
		ПараметрыBPM7.Result			= 1;
		ПараметрыBPM7.ResultCodeDescription   = "ОШИБКА: " 
						+ ПараметрыBPM7.ИмяПроцедуры + " Не удалось сформировать исходящий запрос !!!" 
						+ Символы.ПС + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ BPM7_Отправить_ЗапросHTTP() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Result								= Неопределено;
	ПараметрыBPM7.ResponceСтруктура.Свойство("Result", Result);	
	ПараметрыBPM7.Result				= ?(Result=Неопределено, 1, Result);
	
	ResultCodeDescription				= Неопределено;
	ПараметрыBPM7.ResponceСтруктура.Свойство("ResultCodeDescription", 		ResultCodeDescription);
	ResultCodeDescription				= ?(ResultCodeDescription=Неопределено, Новый Массив, ПараметрыBPM7.ResponceСтруктура.ResultCodeDescription);
	Для Каждого Элемент Из ResultCodeDescription Цикл 
		ПараметрыBPM7.ResultCodeDescription		= "Key = " + Элемент.Key+ "  Value = " + Элемент.Value + ";" +Символы.ПС;
	КонецЦикла;	
			
	Если ПараметрыBPM7.Result<>0 Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции

Функция BPM7_Отправить_ЗапросHTTP() Экспорт 
	
	ВремяСтартаЗапроса = ТекущаяДата();
	Попытка
		// Серилизуем структуру запроса в СТРОКУ	
		НастройкиСериализацииJSON						 = Новый НастройкиСериализацииJSON;
		НастройкиСериализацииJSON.ВариантЗаписиДаты		 = ВариантЗаписиДатыJSON.ЛокальнаяДата;
		НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,Символы.Таб));
		ЗаписатьJSON(ЗаписьJSON, ПараметрыBPM7.RequestСтруктура, НастройкиСериализацииJSON);
		ПараметрыBPM7.RequestBody = ЗаписьJSON.Закрыть();
		
		Логирование.ДобавитьЗаписьЖурнала(,  ПараметрыBPM7.ИмяПроцедуры, "RequestBody: "
							+ ПараметрыBPM7.RequestBody, Неопределено, Неопределено, "ОбщиеМодули.BPM");		

		// Готовим HTTPЗапрос. Вставляем адрес веб-сервиса и хедер с параметрами 
		ПараметрыBPM7.Request = Новый HTTPЗапрос(ПараметрыBPM7.ServiceURL, ПараметрыBPM7.Headers);
		ПараметрыBPM7.Request.УстановитьТелоИзСтроки(ПараметрыBPM7.RequestBody);
		
		// Ответ от сервера получим в возвращаемом значении типа HTTPОтвет
		//Если АкционныеСервисы(ПараметрыBPM7.ServiceURL) Тогда 
		//	ПараметрыBPM7.Таймаут = 5;
		//	СчетчикПопыток = 0;
		//	Пока СчетчикПопыток <= 3 Цикл 
			ПараметрыBPM7.Responce = ПараметрыBPM7.HTTP.ОтправитьДляОбработки(ПараметрыBPM7.Request);
			
		//		Если ПараметрыBPM7.Responce.КодСостояния <> 200 Тогда 
		//			СчетчикПопыток = СчетчикПопыток + 1;
		//		Иначе
		//			Прервать;	
		//		КонецЕсли;
		//	КонецЦикла;
		//Иначе 
		//	ПараметрыBPM7.Responce = ПараметрыBPM7.HTTP.ОтправитьДляОбработки(ПараметрыBPM7.Request);
		//КонецЕсли;
		
		ПараметрыBPM7.ResponceBody = ПараметрыBPM7.Responce.ПолучитьТелоКакСтроку();

		// Десерелизуем полученый ответ в структуру с примитивными типами
		ЧтениеJSON = Новый ЧтениеJSON(); 
		ЧтениеJSON.УстановитьСтроку(ПараметрыBPM7.ResponceBody); 
		ПараметрыBPM7.ResponceСтруктура	= ПрочитатьJSON(ЧтениеJSON,, ПараметрыBPM7.ИменаСвойствСоЗначениямиДата, ФорматДатыJSON.ISO,); 
		ЧтениеJSON.Закрыть();
		
		ПараметрыBPM7.ResponceBody = СтрЗаменить(ПараметрыBPM7.ResponceBody, ",", ","+Символы.ПС);
		
		Логирование.ДобавитьЗаписьЖурнала(, ПараметрыBPM7.ИмяПроцедуры, "ResponceBody: "
						+ ПараметрыBPM7.ResponceBody, Неопределено, Неопределено, "ОбщиеМодули.BPM");		
		Логирование.ДобавитьЗаписьЖурнала(, ПараметрыBPM7.ИмяПроцедуры + ".TimeOUT",  "TimeOUT(секунды): "
						+ СокрЛП(ТекущаяДата()-ВремяСтартаЗапроса), Неопределено, Неопределено, "ОбщиеМодули.BPM");
		
		Возврат Истина;
	Исключение
		ПараметрыBPM7.Result = 1;
		ПараметрыBPM7.ResultCodeDescription = "ОШИБКА: Не отработал запрос !!!" + ПараметрыBPM7.ИмяПроцедуры + Символы.ПС + ОписаниеОшибки();

																				
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, ПараметрыBPM7.ИмяПроцедуры, "ResponceBody: "
							+ ПараметрыBPM7.ResponceBody, Неопределено, Неопределено, "ОбщиеМодули.BPM");		
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, ПараметрыBPM7.ИмяПроцедуры
							+ ".TimeOUT_ERROR",  "TimeOUT(секунды): " + СокрЛП(ТекущаяДата() - ВремяСтартаЗапроса), Неопределено, Неопределено, "ОбщиеМодули.BPM");
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, ПараметрыBPM7.ИмяПроцедуры, "Result: "
							+ ПараметрыBPM7.Result + "; ResultCodeDescription: " + ПараметрыBPM7.ResultCodeDescription, Неопределено, Неопределено, "ОбщиеМодули.BPM");
		
		Возврат Ложь;
	КонецПопытки;	
	
КонецФункции	

Функция ПолучитьИнформациюПоКлиенту(Телефон = "") Экспорт 
	
	Если НЕ Константы.BPM_РегистрацияВПроцессинге.Получить() Тогда 
		BPM7_Login();	
	КонецЕсли;
	
	ПараметрыBPM7.Result				= 1;
	ПараметрыBPM7.ResultCodeDescription = "";
	ПараметрыBPM7.RequestBody			= "";
	ПараметрыBPM7.ResponceBody			= "";
	
	ПараметрыBPM7.ИмяПроцедуры			= "BPM7_GetContactInfo()";
	
	
	ПараметрыBPM7.Headers = Новый Соответствие;
	Если Константы.BPM_РегистрацияВПроцессинге.Получить() Тогда
		ПараметрыBPM7.ServiceURL = "/GetContactInfo";
		ПараметрыBPM7.Headers.Вставить("Content-Type", "application/json"); // charset=utf-8"); 
		ПараметрыBPM7.Headers.Вставить("Authorization", "Basic U3VwZXJ2aXNvcjpTdXBlcnZpc29y");
	Иначе 
		ПараметрыBPM7.ServiceURL = "/0/rest/FixPriceContactService/GetContactInfo";
		ПараметрыBPM7.Headers.Вставить("Content-Type", "application/json; charset=utf-8"); 
		ПараметрыBPM7.Headers.Вставить("Expect", "100-continue");
		ПараметрыBPM7.Headers.Вставить("BPMCSRF", 		ПараметрыBPM7.BPMCSRF);
		ПараметрыBPM7.Headers.Вставить("Cookie", 		ПараметрыBPM7.Cookie);
	КонецЕсли;

	Попытка
		//Создаем структуру запроса
		RequestСтруктура = Новый Структура;
		Если Телефон <> "" Тогда
		    RequestСтруктура.Вставить("MobileNumber", Телефон); 
		Иначе 
			RequestСтруктура.Вставить("CardNumber", ПараметрыBPM7.BPMonline_ШК); 	
		КонецЕсли; 
		
		ПараметрыBPM7.RequestСтруктура	= RequestСтруктура;		
	Исключение
		ПараметрыBPM7.Result			= 1;
		ПараметрыBPM7.ResultCodeDescription = "ОШИБКА: " + ПараметрыBPM7.ИмяПроцедуры 
						+ " Не удалось сформировать исходящий запрос !!!" + Символы.ПС + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	Если НЕ BPM7_Отправить_ЗапросHTTP() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если ПараметрыBPM7.ResponceСтруктура.Result = 0 Тогда 
		Возврат Истина; 
	Иначе
		СообщитьОбОшибкеBPM7();
	КонецЕсли;	
	
КонецФункции

// Проверяем данные контакта, если данных не хватает открываем форму "регистрации БК"
//
//
Функция ЗаполненаИнформацияКлиента() Экспорт

	Если ПараметрыBPM7.ResponceСтруктура.Свойство("ContactInfo") И ПараметрыBPM7.ResponceСтруктура.ContactInfo <> Неопределено Тогда // если нет ошибка
		
		ИмяКлиента = СокрЛП(ПараметрыBPM7.ResponceСтруктура.ContactInfo.Name);    // если регистрация произведена без ФИО, то ИмяКлиента возвращается 2 пробела
		ДеньРожденияКлиента = ПараметрыBPM7.ResponceСтруктура.ContactInfo.Birthdate;
		КоличествоПробелов = СтрЧислоВхождений(ИмяКлиента," ");
		
		Если ПустаяСтрока(ИмяКлиента) ИЛИ ДеньРожденияКлиента = Неопределено ИЛИ КоличествоПробелов = 0 Тогда 
			 Возврат Ложь;
		КонецЕсли;
	ИначеЕсли (ПараметрыBPM7.BPMonline_ШК <> Неопределено ИЛИ ПараметрыBPM7.BPMonline_Phone <> "") И ПараметрыBPM7.RequestBody <> "" Тогда 
		Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Ошибка, ПараметрыBPM7.ИмяПроцедуры, "Проверка информации по клиенту. Телефон: " 
							+ ПараметрыBPM7.BPMonline_Phone + " ШК карты: " + ПараметрыBPM7.BPMonline_ШК, Неопределено, Неопределено, "ОбщиеМодули.BPM");
		Возврат Ложь;					
		//СообщитьОбОшибкеBPM7(ПараметрыBPM7);
	КонецЕсли;		
	Возврат Истина;
	
КонецФункции	

Процедура ПроверитьПолученнуюИнформациюПоКлиенту() Экспорт 
	
	ИмяКлиента = СокрЛП(ПараметрыBPM7.ResponceСтруктура.ContactInfo.Name);    // если регистрация произведена без ФИО, то ИмяКлиента возвращается 2 пробела
	ДеньРожденияКлиента = ПараметрыBPM7.ResponceСтруктура.ContactInfo.Birthdate;
	КоличествоПробелов = СтрЧислоВхождений(ИмяКлиента," ");
	
	
	ФормаРегистрации = Обработки.РМК.ПолучитьФорму("BPM7_РегистрацияЧерезСМС");
	ФормаРегистрации.ОбновитьДанныеКлиента = Истина;
	ЭлементыРегистрации = ФормаРегистрации.ЭлементыФормы;
	ЭлементыРегистрации.НомерТелефона.Значение = ПараметрыBPM7.ResponceСтруктура.ContactInfo.MobileNumber;
	ЭлементыРегистрации.НомерТелефона.Доступность = Ложь;
	ЭлементыРегистрации.БонуснаяКартаШК.Значение = ПараметрыBPM7.BPMonline_ШК;
	ЭлементыРегистрации.БонуснаяКартаШК.Доступность = Ложь;
	ЭлементыРегистрации.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыВыполнить.Текст = "Добавить данные";
	
	Если ПараметрыBPM7.ResponceСтруктура.ContactInfo.Sex = "Мужской" Тогда
		ЭлементыРегистрации.Муж.Значение = 1;
	ИначеЕсли ПараметрыBPM7.ResponceСтруктура.ContactInfo.Sex = "Женский" Тогда
		ЭлементыРегистрации.Жен.Значение = 2;
	Иначе 
		ЭлементыРегистрации.Муж.Значение = Неопределено;
	КонецЕсли;
	ЭлементыРегистрации.Надпись1.Значение = "ДЛЯ СПИСАНИЯ БОНУСОВ ЗАПОЛНИТЕ ВСЕ ДАННЫЕ!";
	
	Если КоличествоПробелов = 0 Тогда // открыть форму регистрации не заполнено имя
		ЭлементыРегистрации.Фамилия.Значение  = ИмяКлиента;
		ЭлементыРегистрации.Имя.Значение      = "";
		ЭлементыРегистрации.Отчество.Значение = "";                  
		
	ИначеЕсли КоличествоПробелов = 1 Тогда  
		ПозицияПробела 					= Найти(ИмяКлиента, " ");
		ЭлементыРегистрации.Фамилия.Значение  = Лев(ИмяКлиента, ПозицияПробела - 1);
		ЭлементыРегистрации.Имя.Значение		= Сред(ИмяКлиента, ПозицияПробела + 1);
		ЭлементыРегистрации.Отчество.Значение = "";
		// открыть форму регистрации не заполнена дата рождения
	ИначеЕсли КоличествоПробелов = 2 Тогда 
		ПозицияПробела 					= СтрНайти(ИмяКлиента, " ");
		ДлинаОтчества = СтрДлина(Сред(ИмяКлиента, СтрНайти(ИмяКлиента, " ", НаправлениеПоиска.СКонца)));
		ДлинаИмени = СтрДлина(ИмяКлиента) - ДлинаОтчества - ПозицияПробела;
		
		ЭлементыРегистрации.Фамилия.Значение  = Лев(ИмяКлиента, ПозицияПробела - 1);
		ЭлементыРегистрации.Имя.Значение		= Сред(ИмяКлиента, ПозицияПробела + 1, Длинаимени);
		ЭлементыРегистрации.Отчество.Значение = СокрЛП(Сред(ИмяКлиента, СтрНайти(ИмяКлиента, " ", НаправлениеПоиска.СКонца)));
	КонецЕсли;	
	Если ДеньРожденияКлиента <> Неопределено Тогда 
		ЭлементыРегистрации.ДеньРождения.Значение = Дата(СтрЗаменить(ДеньРожденияКлиента,"-",""));
	КонецЕсли;
	
	ФормаРегистрации.ОткрытьМодально();
		
КонецПроцедуры	

Процедура СообщитьОбОшибкеBPM7() Экспорт 
	Форма												= ПолучитьОбщуюФорму("ОшибкаBPMonline");
	Форма.Result										= ПараметрыBPM7.Result;
	Форма.ОписаниеОшибки								= ПараметрыBPM7.ResultCodeDescription;
	Форма.ЗапросТекст                                   = ПараметрыBPM7.RequestBody;
	Форма.ЗапросРезультат		                        = ПараметрыBPM7.ResponceBody;
	
	Логирование.ДобавитьЗаписьЖурнала(УровеньЖурналаРегистрации.Предупреждение, "СообщитьОбОшибке()", "Result:"+ПараметрыBPM7.Result
												 + "; ErrorDescription: " + ПараметрыBPM7.ResultCodeDescription
												 + "; ЗапросXML: " + ПараметрыBPM7.RequestBody 
												 + "; ПолныйРезультат: " + ПараметрыBPM7.ResponceBody , Неопределено, Неопределено, "Обработки.РМК.Формы"); 
	Если Не Форма.Открыта() Тогда
    	Форма.ОткрытьМодально();
	КонецЕсли; 
КонецПроцедуры

Процедура ВывестиИнфоПоБК_BPM7() Экспорт   
	ФормаРМКОсновная = Обработки.РМК.ПолучитьФорму("Форма");
	ФормаРМКОсновная.ЭлементыФормы.BPM7_ШК.Значение = ?(ПустаяСтрока(ПараметрыBPM7.BPMonline_ШК ), "<Нет данных>", ПараметрыBPM7.BPMonline_ШК );
	ФормаРМКОсновная.ЭлементыФормы.BPM7_СтатусКарты.Значение = ?(ПустаяСтрока(ПараметрыBPM7.BPMonline_СтатусКарты), "<Нет данных>", ПараметрыBPM7.BPMonline_СтатусКарты);
	
	Если ПараметрыBPM7.ResponceСтруктура.Свойство("ContactInfo") Тогда 
		ФормаРМКОсновная.ЭлементыФормы.Покупатель_BPM7.Значение = ПараметрыBPM7.ResponceСтруктура.ContactInfo.Name;
	ИначеЕсли НЕ ПустаяСтрока(ПараметрыBPM7.BPMonline_Contact_Name) Тогда 
		ФормаРМКОсновная.ЭлементыФормы.Покупатель_BPM7.Значение =  ПараметрыBPM7.BPMonline_Contact_Name;
	Иначе 
		ФормаРМКОсновная.ЭлементыФормы.Покупатель_BPM7.Значение = "<Нет данных>";
	КонецЕсли;	 
	//ФормаРМКОсновная.ЭлементыФормы.Покупатель_BPM7.Значение = ?(ПараметрыBPM7.ResponceСтруктура.Свойство("ContactInfo"), ПараметрыBPM7.ResponceСтруктура.ContactInfo.Name, "<Нет данных>");
	
	ФормаРМКОсновная.ЭлементыФормы.BPM7_Днежные_Баланс.Значение	  = Число(ПараметрыBPM7.BPMonline_ОбщБонусыВсегоДоступно) + Число(ПараметрыBPM7.BPMonline_ОбщБонусыНеактивне);
	ФормаРМКОсновная.ЭлементыФормы.BPM7_Днежные_Доступно.Значение = Число(ПараметрыBPM7.BPMonline_ОбщБонусыВсегоДоступно);
	ФормаРМКОсновная.ЭлементыФормы.BPM7_Спец_Баланс.Значение	  = Число(ПараметрыBPM7.BPMonline_ОбщСпецБонусыВсегоДоступно) + Число(ПараметрыBPM7.BPMonline_ОбщСпецБонусыНеактивне);
	ФормаРМКОсновная.ЭлементыФормы.BPM7_Спец_Доступно.Значение	  = Число(ПараметрыBPM7.BPMonline_ОбщСпецБонусыВсегоДоступно);
	
	РМКОбъект = Обработки.РМК.Создать(); 
	РМКОбъект.ОстаткиСитемыЛоялности.Очистить();
	
	Для Каждого СтрокаТЧ Из ПараметрыBPM7.BPMonline_ТЗ_BonusesInfo Цикл
		НоваяСтрока					   = РМКОбъект.ОстаткиСитемыЛоялности.Добавить();
		НоваяСтрока.BonusType	       = СтрокаТЧ.BonusTypeCode;
		НоваяСтрока.BonusStatus		   = СтрокаТЧ.BonusStatusCode;
		НоваяСтрока.BaseBonusQuantity  = СтрокаТЧ.BonusAmount*0.01;			
	КонецЦикла;	
	РМКОбъект.ОстаткиСитемыЛоялности.Сортировать("BonusStatus");	
	
	ТелефонНаФорме = СтрСоединить(СтрРазделить(ФормаРМКОсновная.ЭлементыФормы.BPM7_НомерТелефона.Значение," ()-"));
	Если ПустаяСтрока(ПараметрыBPM7.BPMonline_Phone) Тогда  
		ФормаРМКОсновная.ЭлементыФормы.BPM7_НомерТелефона.Значение	  = "";
		ФормаРМКОсновная.ЭлементыФормы.BPM7_НомерТелефона.Доступность = Истина;
	ИначеЕсли СтрДлина(ТелефонНаФорме) <> 12 Тогда 
		ФормаРМКОсновная.ЭлементыФормы.BPM7_НомерТелефона.Значение = Прав(ПараметрыBPM7.BPMonline_Phone,9);
	КонецЕсли;	
КонецПроцедуры	

Функция BPM7_ValidateContactInfo(ПараметрыBPM7) Экспорт  
	
	ПараметрыBPM7.Result													= 1;
	ПараметрыBPM7.ResultCodeDescription   									= "";
	ПараметрыBPM7.RequestBody												= "";
	ПараметрыBPM7.ResponceBody												= "";
	
	ПараметрыBPM7.ИмяПроцедуры												= "BPM7_ValidateContactInfo()";

	//Создаем начальные параметры HTTP-запроса  
	ПараметрыBPM7.ServiceURL												= "ValidateContactInfo";
	
  	ПараметрыBPM7.Headers													= Новый Соответствие;
	ПараметрыBPM7.Headers.Вставить("Content-Type", "application/json;charset=utf-8"); 
	ПараметрыBPM7.Headers.Вставить("Authorization", "Basic U3VwZXJ2aXNvcjpTdXBlcnZpc29y");
			
	Попытка
		//Создаем структуру запроса
		RequestСтруктура													= Новый Структура;
		RequestСтруктура.Вставить("PhoneNumber", 				ПараметрыBPM7.BPMonline_Phone);
		ПараметрыBPM7.RequestСтруктура										= RequestСтруктура;		
	Исключение
		ПараметрыBPM7.Result												= 1;
		ПараметрыBPM7.ResultCodeDescription   								= "ОШИБКА: "+ПараметрыBPM7.ИмяПроцедуры+" Не удалось сформировать исходящий запрос !!!" + Символы.ПС + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ BPM7_Отправить_ЗапросHTTP() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	
	ResponseStatus															= Новый Структура;
	ПараметрыBPM7.ResponceСтруктура.Свойство("ResponseStatus", 				ResponseStatus);	
	ResponseStatus															= ?(ResponseStatus=Неопределено, Новый Структура, ResponseStatus);
	
	ResponseStatus.Свойство("Message", 										ПараметрыBPM7.ResultCodeDescription);
	ПараметрыBPM7.ResultCodeDescription										= ?(ПараметрыBPM7.ResultCodeDescription=Неопределено, "", ПараметрыBPM7.ResultCodeDescription);
	
	ErrorCode																= "";
	ResponseStatus.Свойство("ErrorCode", 									ErrorCode);
	ПараметрыBPM7.ResultCodeDescription										= ?(ErrorCode=Неопределено, ПараметрыBPM7.ResultCodeDescription, ErrorCode + "; " + ПараметрыBPM7.ResultCodeDescription);
	
	
	ПараметрыBPM7.ResponceСтруктура.Свойство("SmsCode", 					ПараметрыBPM7.BPMonline_SmsCode);
	ПараметрыBPM7.BPMonline_SmsCode											= ?(ПараметрыBPM7.BPMonline_SmsCode=Неопределено, "", ПараметрыBPM7.BPMonline_SmsCode);

	ПараметрыBPM7.Result													= ?(ПустаяСтрока(ПараметрыBPM7.BPMonline_SmsCode), 1, 0);	
	Если ПараметрыBPM7.Result=1 Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции

Функция BPM7_SetPurchaseInfo(Продажа) Экспорт  
	ПараметрыBPM7.Result				 = 1;
	ПараметрыBPM7.ResultCodeDescription  = "";
	ПараметрыBPM7.RequestBody			 = "";
	ПараметрыBPM7.ResponceBody			 = "";
	ПараметрыBPM7.ИмяПроцедуры			 = "BPM7_SetPurchaseInfo()";
	// Отсекаем анулированные строки 	
	Отбор_ВидОперации = Новый Структура("ВидОперации", ПараметрыЧекаККМ.ВидОперации); 
	
	ТЧ_Продажа = ?(ТипЗнч(Продажа) = ТипЗнч(Новый ТаблицаЗначений), Продажа.Скопировать(Отбор_ВидОперации), Продажа.Выгрузить(Отбор_ВидОперации));
	
	СуммаПоЧеку = ТЧ_Продажа.Итог("Сумма"); 
    SpentBonuses = ПараметрыЧекаККМ.ФО_СуммаБонусами;
	

	//Создаем начальные параметры HTTP-запроса  
	ПараметрыBPM7.ServiceURL = "SetPurchaseInfo";
	
  	ПараметрыBPM7.Headers = Новый Соответствие;
	ПараметрыBPM7.Headers.Вставить("Content-Type", "application/json;charset=utf-8"); 
	ПараметрыBPM7.Headers.Вставить("Authorization", "Basic U3VwZXJ2aXNvcjpTdXBlcnZpc29y");
			
	Попытка
		//Создаем структуру запроса
		RequestСтруктура													= Новый Структура;
		RequestСтруктура.Вставить("CardNumber", 				ПараметрыBPM7.BPMonline_ШК);
		RequestСтруктура.Вставить("PointOfSaleCode", 			СокрЛП(Константы.осн_Подразделение.Получить().Код));
		RequestСтруктура.Вставить("CashDeskCode", 				СокрЛП(Константы.осн_КассаККМ.Получить().Наименование));
		RequestСтруктура.Вставить("Date", 						ПараметрыЧекаККМ.ДатаОперации);
		RequestСтруктура.Вставить("Number", 					СокрЛП(ПараметрыЧекаККМ.НомерЧекаККМ));
		RequestСтруктура.Вставить("TotalAmount", 				ПараметрыЧекаККМ.ФО_СуммаЧекаИтого*100);
		RequestСтруктура.Вставить("CurrencyCode", 				"980");
		RequestСтруктура.Вставить("BonusesPaidAmount", 			ПараметрыЧекаККМ.ФО_СуммаБонусами*100);
		
		RequestСтруктура.Вставить("IsNeedAuthSMS", 			СокрЛП(ПараметрыBPM7.BPMonline_IsNeedAuthSMS));
		Если СокрЛП(ПараметрыBPM7.BPMonline_IsNeedAuthSMS)="true" Тогда 
			RequestСтруктура.Вставить("SMSCode", 				СокрЛП(ПараметрыBPM7.BPMonline_SMSCode));
		КонецЕсли;	
		
		RequestСтруктура.Вставить("CashierNameCode", 				"111");
		// Дьяченко Перенос акций в BPM
		//Если Константы.АкцииЧерез_BPM.Получить() Тогда
			RequestСтруктура.Вставить("IsOffLinePurchase", 				ПараметрыBPM7.BPMonline_IsOffLinePurchase);
			RequestСтруктура.Вставить("IsPurchaseWithoutProcessing",	ПараметрыBPM7.BPMonline_IsPurchaseWithoutProcessing);
		//Иначе
		//	RequestСтруктура.Вставить("IsOffLinePurchase", 				"true");
		//	RequestСтруктура.Вставить("IsPurchaseWithoutProcessing",	"true");
		//КонецЕсли;
		
		RequestСтруктура.Вставить("AccountingGuid", 				СокрЛП(BPM7_СгенерироватьГУИД(ПараметрыЧекаККМ.ДокЧекККМ)));
		RequestСтруктура.Вставить("PaymentTypeId", 					"Наличными при получении");
		RequestСтруктура.Вставить("PaymentCardType", 				"Visa");      
				
		//Возврат  
		Если ПараметрыЧекаККМ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда 
			RequestСтруктура.Вставить("IsReturn", 					"true"); 
			//RequestСтруктура.Вставить("ParentPurchaseNumber", 		ПараметрыBPM7.BPMonline_ParentPurchaseNumber);
			RequestСтруктура.Вставить("ParentPurchaseId", 			СокрЛП(BPM7_СгенерироватьГУИД(ПараметрыЧекаККМ.Возврат_ЧекККМ.Ссылка))); // ПараметрыЧекаККМ.Возврат_ЧекККМ.BPMonline_PreprocessingId); //
			RequestСтруктура.Вставить("IsWarranty", 				"false");  
		КонецЕсли;	
		
		Массив														= Новый Массив;
		Для Каждого СтрокаТЧ Из ТЧ_Продажа Цикл
			Код														= Формат(Число(СтрокаТЧ.Код), "ЧЦ=6; ЧН=; ЧВН=");
			
			Структура_ТЧ_Товар										= Новый Структура;
			Структура_ТЧ_Товар.Вставить("Position", 				СтрокаТЧ.НомерСтроки);
			Структура_ТЧ_Товар.Вставить("ReturnPosition", 			СтрокаТЧ.Возврат_НомерСтроки);
			Структура_ТЧ_Товар.Вставить("ProductCode", 				Код);
			Структура_ТЧ_Товар.Вставить("Quantity", 				СтрокаТЧ.Количество);
			Структура_ТЧ_Товар.Вставить("Price", 					СтрокаТЧ.Сумма*100);  //цену передаем заниженую (с учетом наших скидок)
			Структура_ТЧ_Товар.Вставить("Amount", 					СтрокаТЧ.Сумма*100);
			//Структура_ТЧ_Товар.Вставить("OfflineDiscountAmmount", 	"");
			//Структура_ТЧ_Товар.Вставить("OfflineCampaingId", 			"");
			//Структура_ТЧ_Товар.Вставить("CardNumberForProduct", 		"");
			//Структура_ТЧ_Товар.Вставить("Coefficient", 				"");
			//Структура_ТЧ_Товар.Вставить("SecondPrice", 				"");
			//Структура_ТЧ_Товар.Вставить("MinPrice", 					"");
			// 03032020 закоменчена передача параметра по просьбе Маркетинга
			//Если СтрокаТЧ.НомерАкции <> 0 Тогда // если на товар сработала какая-либо акция бонусы на него не начисляются
			//	Структура_ТЧ_Товар.Вставить("DontUseInPreprocessing", 	Истина);
			//ИначеЕсли СтрокаТЧ.Акционный = 1 Тогда // желтые ценники
			//	Структура_ТЧ_Товар.Вставить("DontUseInPreprocessing", 	Истина);
		//Иначе
		
			Если СтрокаТЧ.Акционный = 2 Тогда // акцизный товар
				Структура_ТЧ_Товар.Вставить("DontUseInPreprocessing", 	Истина);
			ИначеЕсли СтрокаТЧ.Акционный = 7 Тогда // СТОКОВЫЙ ТОВАР
				Структура_ТЧ_Товар.Вставить("DontUseInPreprocessing", 	Истина);
			ИначеЕсли СтрокаТЧ.Акционный = 5 Тогда // УЦЕНЕННЫЙ ТОВАР
				Структура_ТЧ_Товар.Вставить("DontUseInPreprocessing", 	Истина);	
			ИначеЕсли СтрокаТЧ.Акционный = 9 Тогда // сертификат
				Структура_ТЧ_Товар.Вставить("DontUseInPreprocessing", 	Истина);
			КонецЕсли;	
			
			Массив.Добавить(Структура_ТЧ_Товар);
		КонецЦикла;
		RequestСтруктура.Вставить("Products", Массив);
		
		////Коллекции с данными о подарочных картах (сертификаты)
		//RequestСтруктура.Вставить("GiftCards", 					"");
		//
		////Коллекции с данными о купонах
		//RequestСтруктура.Вставить("Coupons", 					"");
		
		ПараметрыBPM7.RequestСтруктура = RequestСтруктура;		
	Исключение
		ПараметрыBPM7.Result = 1;
		ПараметрыBPM7.ResultCodeDescription = "ОШИБКА: "+ПараметрыBPM7.ИмяПроцедуры+" Не удалось сформировать исходящий запрос !!!" + Символы.ПС + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ BPM7_Отправить_ЗапросHTTP() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	ПараметрыBPM7.ResponceСтруктура.Свойство("Info", ПараметрыBPM7.ResultCodeDescription);
	ПараметрыBPM7.Result = ?(ПараметрыBPM7.ResultCodeDescription = "OK", 0, 1);
	
	ComplexCampaignProductsUsage = Неопределено;
	ПараметрыBPM7.ResponceСтруктура.Свойство("ComplexCampaignProductsUsage",ComplexCampaignProductsUsage);
	ComplexCampaignProductsUsage = ?(ComplexCampaignProductsUsage=Неопределено, Новый Массив, ComplexCampaignProductsUsage);	
	
	ПараметрыBPM7.BPMonline_ТЗ_Продажы.Очистить();
	Для Каждого СтрокаТЧ Из ComplexCampaignProductsUsage Цикл
		НоваяСтрока = ПараметрыBPM7.BPMonline_ТЗ_Продажы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
	КонецЦикла;
	
	Products = Неопределено;
	ПараметрыBPM7.ResponceСтруктура.Свойство("Products",	Products);
	Products = ?(Products=Неопределено, Новый Массив, Products);	
	
	Для Каждого СтрокаТЧ Из Products Цикл
		Если НЕ СтрокаТЧ.Свойство("BonusesPaidAmount") Тогда 				Продолжить;     КонецЕсли;
		Если НЕ СтрокаТЧ.Свойство("DiscountAmount") Тогда 					Продолжить;     КонецЕсли;
		
		НайденнаяСтрока = ПараметрыBPM7.BPMonline_ТЗ_Продажы.Найти(СтрокаТЧ.Position, "Position");
		Если НайденнаяСтрока = Неопределено Тогда  
			НоваяСтрока = ПараметрыBPM7.BPMonline_ТЗ_Продажы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		Иначе 
			НайденнаяСтрока.BonusesPaidAmount = НайденнаяСтрока.BonusesPaidAmount + СтрокаТЧ.BonusesPaidAmount; 	
			НайденнаяСтрока.DiscountAmount	  = НайденнаяСтрока.DiscountAmount + СтрокаТЧ.DiscountAmount;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыBPM7.ResponceСтруктура.Свойство("PreprocessingId", 			ПараметрыBPM7.BPMonline_PreprocessingId);
	ПараметрыBPM7.ResponceСтруктура.Свойство("PurchaseNumber", 				ПараметрыBPM7.BPMonline_PurchaseNumber);	
	
	Transactions = Неопределено;
	ПараметрыBPM7.ResponceСтруктура.Свойство("Transactions", Transactions);
	Transactions = ?(Transactions = Неопределено, Новый Массив, Transactions);	
	Для Каждого Элемент Из Transactions Цикл
		Если Элемент.Свойство("BonusType") И Элемент.BonusType = "Money" Тогда 			//Если Элемент.Свойство("CampaignTitle") И Элемент.CampaignTitle="Базовые бонусы 3%" Тогда
			Если Элемент.TransactionType="Начисление" Тогда  
				ПараметрыBPM7.BPMonline_БонусыНачисленные	 = ПараметрыBPM7.BPMonline_БонусыНачисленные + Элемент.Amount*0.01;
			ИначеЕсли Элемент.TransactionType="Списание" Тогда  
				ПараметрыBPM7.BPMonline_БонусыСписанные		 = ПараметрыBPM7.BPMonline_БонусыСписанные + Элемент.Amount*0.01;				
			КонецЕсли;	
		Иначе			
			Если Элемент.TransactionType="Начисление" Тогда  
				ПараметрыBPM7.BPMonline_СпецБонусыНачисленные = ПараметрыBPM7.BPMonline_СпецБонусыНачисленные + Элемент.Amount*0.01;				
			ИначеЕсли Элемент.TransactionType="Списание" Тогда   
				ПараметрыBPM7.BPMonline_СпецБонусыСписанные	  = ПараметрыBPM7.BPMonline_СпецБонусыСписанные + Элемент.Amount*0.01;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
	Если ПараметрыBPM7.BPMonline_НеудачнаяРегистрацияКлиента = Истина Тогда 	
		ПараметрыBPM7.BPMonline_СостояниеЧекаККМ = Перечисления.СостояниеBPMonline.НеудачнаяРегистрация;
    КонецЕсли;
	
	Если ПараметрыBPM7.Result = 1 Тогда 
		Возврат Ложь;
	КонецЕсли;	
	Если ПараметрыBPM7.BPMonline_НеудачнаяРегистрацияКлиента = Истина Тогда 	
		ПараметрыBPM7.BPMonline_СостояниеЧекаККМ = Перечисления.СостояниеBPMonline.НеудачнаяРегистрация;
	Иначе
		ПараметрыBPM7.BPMonline_СостояниеЧекаККМ = Перечисления.СостояниеBPMonline.Записан;
	КонецЕсли;
	// Дьяченко Перенос акций в BPM
	глАкционнаяСистемаBPM = Истина;
	// Дьяченко
	Возврат Истина;

КонецФункции	

Функция BPM7_СгенерироватьГУИД(Ccылка)
	//номер чека (8) - магазин (4)- часы(2) минуты (2) - секунды (2)день(2) - месяц(2) фискальник (10)	
	НомерЧека	 	= ПРАВ(Ccылка.Номер,8);
	ТТ				= Формат(Ccылка.Подразделение.НомерМагазина,"ЧГ=0");
	BPM7_Добавить0(ТТ,4);
	Дата 			="" + Формат(Ccылка.Дата,"ДФ=HHmmssddMM");
	ЧасыМинуты		= Лев(Дата,4);
	СекундыДень		= Сред(Дата,5,4);
	Месяц 			= Прав(Дата,2);
	ФР 				= Ccылка.СерийныйНомерФР;
	Префикс 		= Лев(ФР,2);
	Если Префикс = "ДО" ИЛИ Префикс = "MS" ИЛИ Префикс = "АТ" ИЛИ Префикс = "ПР" ИЛИ Префикс = "СП" Тогда
		ФР 			=  Сред(ФР,3);
	КонецЕсли;
	BPM7_Добавить0(ФР,10);	
	ГУИД = "" + НомерЧека + "-" + ТТ + "-" + ЧасыМинуты  + "-" + СекундыДень + "-" + Месяц + ФР;
	Возврат ГУИД;
КонецФункции     

Процедура BPM7_Добавить0(Строка, НеобходимаяДлина)
	Пока СтрДлина(Строка) <> НеобходимаяДлина И СтрДлина(Строка) < НеобходимаяДлина Цикл
		Строка = "0" + Строка;	
	КонецЦикла;	
КонецПроцедуры

Функция BPM7_CommitPurchaseInfo() Экспорт  
	ПараметрыBPM7.Result				 = 1;
	ПараметрыBPM7.ResultCodeDescription  = "";
	ПараметрыBPM7.RequestBody			 = "";
	ПараметрыBPM7.ResponceBody			 = "";
	
	ПараметрыBPM7.ИмяПроцедуры			 = "BPM7_CommitPurchaseInfo()";
	
	//Создаем начальные параметры HTTP-запроса  
	ПараметрыBPM7.ServiceURL			 = "CommitPurchaseInfo";
	
  	ПараметрыBPM7.Headers = Новый Соответствие;
	ПараметрыBPM7.Headers.Вставить("Content-Type", "application/json;charset=utf-8"); 
	ПараметрыBPM7.Headers.Вставить("Authorization", "Basic U3VwZXJ2aXNvcjpTdXBlcnZpc29y");
			
	Попытка
		//Создаем структуру запроса
		RequestСтруктура = Новый Структура;
		RequestСтруктура.Вставить("PreprocessingId", ПараметрыBPM7.BPMonline_PreprocessingId);
		
		Если ПараметрыBPM7.BPMonline_Скарбничка > 0 И НЕ ПараметрыBPM7.BPMonline_СкарбничкаОтправленна Тогда 
			RequestСтруктура.Вставить("IsOddToCard", Истина);
			RequestСтруктура.Вставить("OddToCardAmount", ПараметрыBPM7.BPMonline_Скарбничка*100); 
		КонецЕсли;	
		
		Если ПараметрыЧекаККМ.ВидОперации=Перечисления.ВидыОперацийЧекККМ.Возврат Тогда 
			RequestСтруктура.Вставить("IsReturn", "true"); 
			RequestСтруктура.Вставить("IsWarranty", "false");  
		КонецЕсли;
		
		ПараметрыBPM7.RequestСтруктура = RequestСтруктура;		
	Исключение
		ПараметрыBPM7.Result = 1;
		ПараметрыBPM7.ResultCodeDescription = "ОШИБКА: " + ПараметрыBPM7.ИмяПроцедуры + " Не удалось сформировать исходящий запрос !!!" + Символы.ПС + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ BPM7_Отправить_ЗапросHTTP() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	ПараметрыBPM7.ResponceСтруктура.Свойство("Info", ПараметрыBPM7.ResultCodeDescription);
	ПараметрыBPM7.Result = ?(ПараметрыBPM7.ResultCodeDescription = "OK", 0, 1);
		
	Если ПараметрыBPM7.Result = 1 Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	ПараметрыBPM7.BPMonline_СкарбничкаОтправленна = (ПараметрыBPM7.BPMonline_Скарбничка>0); 	
	ПараметрыBPM7.BPMonline_СостояниеЧекаККМ 	  = Перечисления.СостояниеBPMonline.Проведен;
	Возврат Истина;

КонецФункции	

Функция РаботаетАкционнаяСистемаБПМ() Экспорт 
	Если Константы.BPM_АкцииЧерезBPM.Получить() = Истина И глАкционнаяСистемаBPM = Истина Тогда
		 Возврат Истина;
	КонецЕсли;
	Возврат Ложь; 
КонецФункции	

Функция ПараметрыBPM7_Очистить(ОчиститьОбьект=Истина, ОчиститьШК=Истина, ТаймаутЗапроса = 15) Экспорт 
	
	ТабРезультат1 = Новый ТаблицаЗначений;
	ТабРезультат1.Колонки.Добавить("Position");	
	ТабРезультат1.Колонки.Добавить("ProductCode");
	ТабРезультат1.Колонки.Добавить("Quantity");
	ТабРезультат1.Колонки.Добавить("Price");
	ТабРезультат1.Колонки.Добавить("DiscountAmount");
	ТабРезультат1.Колонки.Добавить("BonusesPaidAmount");
	
	ТабРезультат1.Колонки.Добавить("CashPaidAmount");
	ТабРезультат1.Колонки.Добавить("GiftCardsPaidAmount");
	ТабРезультат1.Колонки.Добавить("ChargeBonusAmount");
	ТабРезультат1.Колонки.Добавить("CouponsPaidAmount");
	ТабРезультат1.Колонки.Добавить("IsBoomerang");
	ТабРезультат1.Колонки.Добавить("RoundSumDelta");

	ТабРезультат1.Колонки.Добавить("PercentageDiscount");
	ТабРезультат1.Колонки.Добавить("CampaignId");
	ТабРезультат1.Колонки.Добавить("CampaignTitle");
	ТабРезультат1.Колонки.Добавить("BonusesPaidCampaignId");
	ТабРезультат1.Колонки.Добавить("BonusesPaidCampaignTitle");
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("BonusTypeCode");	
	Таб.Колонки.Добавить("BonusStatusCode");
	Таб.Колонки.Добавить("BonusAmount");
	
	ПараметрыBPM7_Старые = ПараметрыBPM7;

	
	ПараметрыBPM7 = Новый Структура;
	ПараметрыBPM7.Вставить("ЗапретитьЗапросы", 	   Ложь);
	ПараметрыBPM7.Вставить("ЗащищенноеСоединение", Ложь);
	
	//ПараметрыBPM7.Вставить("HostName", "185.168.129.16");
	//ПараметрыBPM7.Вставить("HostName", "10.1.208.91");
	HostName = Константы.BPMonline_Адрес.Получить();
	Если СтрНайти(HostName, "test")=0  Тогда  
		ПараметрыBPM7.Вставить("HostName", HostName);
		ПараметрыBPM7.Вставить("Порт", 443);
		ПараметрыBPM7.Вставить("SSL", Новый ЗащищенноеСоединениеOpenSSL());
		
		ПараметрыBPM7.Вставить("Прокси", Новый ИнтернетПрокси);
		ПараметрыBPM7.Прокси.Установить("https", "dp-squid-01.office.styled.dp.ua",	3128);

	Иначе 	                                                                //"10.1.208.98" "185.168.129.16"
		ПараметрыBPM7.Вставить("HostName", HostName);
		ПараметрыBPM7.Вставить("Порт", 83);
		ПараметрыBPM7.Вставить("SSL", Неопределено);
		ПараметрыBPM7.Вставить("Прокси", Неопределено);
	КонецЕсли;	
	
	ПараметрыBPM7.Вставить("Таймаут", ТаймаутЗапроса);
	

	Если ОчиститьОбьект Тогда 		                                                                                          
		ПараметрыBPM7.Вставить("HTTP", Новый HTTPСоединение(ПараметрыBPM7.HostName, 
															ПараметрыBPM7.Порт,
															, //логин
															, //пароль
															ПараметрыBPM7.Прокси, 
															ПараметрыBPM7.Таймаут, 
															ПараметрыBPM7.SSL));
	Иначе 
		ПараметрыBPM7.Вставить("HTTP",	ПараметрыBPM7_Старые.HTTP);
	КонецЕсли;	
	
	ПараметрыBPM7.Вставить("Cookie",	"");
	ПараметрыBPM7.Вставить("ASPXAUTH",	"");
	ПараметрыBPM7.Вставить("BPMLOADER",	"");
	ПараметрыBPM7.Вставить("BPMCSRF",	"");
	
	ПараметрыBPM7.Вставить("ИмяПроцедуры",		?(ОчиститьОбьект, "", ПараметрыBPM7_Старые.ИмяПроцедуры));
	
	ПараметрыBPM7.Вставить("ServiceURL",		?(ОчиститьОбьект, Неопределено, ПараметрыBPM7_Старые.ServiceURL));
	ПараметрыBPM7.Вставить("Headers",			?(ОчиститьОбьект, Неопределено, ПараметрыBPM7_Старые.Headers));
	
	ПараметрыBPM7.Вставить("Request",			?(ОчиститьОбьект, Неопределено, ПараметрыBPM7_Старые.Request));
	ПараметрыBPM7.Вставить("RequestСтруктура",	?(ОчиститьОбьект, Новый Структура, ПараметрыBPM7_Старые.RequestСтруктура));
	ПараметрыBPM7.Вставить("RequestBody",		?(ОчиститьОбьект, "", ПараметрыBPM7_Старые.RequestBody));
	
	ПараметрыBPM7.Вставить("Responce",			?(ОчиститьОбьект, Неопределено, ПараметрыBPM7_Старые.Responce));
	ПараметрыBPM7.Вставить("ResponceСтруктура", ?(ОчиститьОбьект, Новый Структура, 	ПараметрыBPM7_Старые.ResponceСтруктура));
	ПараметрыBPM7.Вставить("ResponceBody",		?(ОчиститьОбьект, "", 				ПараметрыBPM7_Старые.ResponceBody));
	
	ПараметрыBPM7.Вставить("ИменаСвойствСоЗначениямиДата", "");
	
	ПараметрыBPM7.Вставить("Result",				?(ОчиститьОбьект, 1, ПараметрыBPM7_Старые.Result)); // 1- ОШИБКА;  0- ВСЕ ОК;  
	ПараметрыBPM7.Вставить("ResultCodeDescription", ?(ОчиститьОбьект, "", ПараметрыBPM7_Старые.ResultCodeDescription));
	
	ПараметрыBPM7.Вставить("BPMonline_Version", 7);
	ПараметрыBPM7.Вставить("BPMonline_СостояниеЧекаККМ", ?(ОчиститьШК, Перечисления.СостояниеBPMonline.ПростойЧек, ПараметрыBPM7_Старые.BPMonline_СостояниеЧекаККМ));
	
	ПараметрыBPM7.Вставить("BPMonline_ШК",			?(ОчиститьШК, Неопределено, ПараметрыBPM7_Старые.BPMonline_ШК));
	ПараметрыBPM7.Вставить("BPMonline_СтатусКарты", ?(ОчиститьШК, Неопределено, ПараметрыBPM7_Старые.BPMonline_СтатусКарты));
	ПараметрыBPM7.Вставить("BPMonline_BonusesInfo", ?(ОчиститьШК, Неопределено, ПараметрыBPM7_Старые.BPMonline_BonusesInfo));
	
	ПараметрыBPM7.Вставить("BPMonline_Phone", ?(ОчиститьШК, "", ПараметрыBPM7_Старые.BPMonline_Phone));

	ПараметрыBPM7.Вставить("BPMonline_ОбщБонусыВсегоДоступно",		?(ОчиститьШК, 0, ПараметрыBPM7_Старые.BPMonline_ОбщБонусыВсегоДоступно));
	ПараметрыBPM7.Вставить("BPMonline_ОбщБонусыНеактивне", 			?(ОчиститьШК, 0, ПараметрыBPM7_Старые.BPMonline_ОбщБонусыНеактивне));
    ПараметрыBPM7.Вставить("BPMonline_ОбщСпецБонусыВсегоДоступно",	?(ОчиститьШК, 0, ПараметрыBPM7_Старые.BPMonline_ОбщСпецБонусыВсегоДоступно));
	ПараметрыBPM7.Вставить("BPMonline_ОбщСпецБонусыНеактивне",		?(ОчиститьШК, 0, ПараметрыBPM7_Старые.BPMonline_ОбщСпецБонусыНеактивне));
	
	ПараметрыBPM7.Вставить("BPMonline_БонусыСписанные", 					0);
	ПараметрыBPM7.Вставить("BPMonline_БонусыНачисленные",	 				0);
    ПараметрыBPM7.Вставить("BPMonline_СпецБонусыСписанные", 				0);
	ПараметрыBPM7.Вставить("BPMonline_СпецБонусыНачисленные", 				0);

	
	ПараметрыBPM7.Вставить("BPMonline_ТЗ_Продажы", 							ТабРезультат1);
	ПараметрыBPM7.Вставить("BPMonline_ТЗ_BonusesInfo", 						Таб);

	ПараметрыBPM7.Вставить("BPMonline_IsNeedAuthSMS", 						"false");
	ПараметрыBPM7.Вставить("BPMonline_SMSCode", 							"");
	
	ПараметрыBPM7.Вставить("BPMonline_IsOffLinePurchase",					"false");
	ПараметрыBPM7.Вставить("BPMonline_IsPurchaseWithoutProcessing",			"false");
	
	ПараметрыBPM7.Вставить("BPMonline_PreprocessingId", 					"");    	
	ПараметрыBPM7.Вставить("BPMonline_PurchaseNumber", 						"");
	ПараметрыBPM7.Вставить("BPMonline_TISGuid", 							"");
	
	ПараметрыBPM7.Вставить("BPMonline_ParentPurchaseNumber", 				?(ОчиститьШК, "", ПараметрыBPM7_Старые.BPMonline_ParentPurchaseNumber));
	ПараметрыBPM7.Вставить("BPMonline_ParentPurchaseId", 					?(ОчиститьШК, "", ПараметрыBPM7_Старые.BPMonline_ParentPurchaseId));
	
	ПараметрыBPM7.Вставить("СпецВаучер_ДеньгиНаСчет_ЕслиНоваяБК",			?(ОчиститьШК, Ложь, ПараметрыBPM7_Старые.СпецВаучер_ДеньгиНаСчет_ЕслиНоваяБК));
	ПараметрыBPM7.Вставить("СпецВаучер_ФлаерНаНачислениеДопБонусов",		?(ОчиститьШК, Ложь, ПараметрыBPM7_Старые.СпецВаучер_ФлаерНаНачислениеДопБонусов));
	ПараметрыBPM7.Вставить("СпецВаучер_ВаучерНаНачислениеДопБонусов",		?(ОчиститьШК, Ложь, ПараметрыBPM7_Старые.СпецВаучер_ВаучерНаНачислениеДопБонусов));
	
	ПараметрыBPM7.Вставить("BPMonline_BusinessNet", 						"Простор");
	ПараметрыBPM7.Вставить("BPMonline_Contact_Password", 					"");
	ПараметрыBPM7.Вставить("BPMonline_Contact_Name", 						"");    	
	ПараметрыBPM7.Вставить("BPMonline_Contact_Gender", 						0);
	ПараметрыBPM7.Вставить("BPMonline_Contact_Birthdate", 					Дата(1,1,1));
	
	ПараметрыBPM7.Вставить("BPMonline_Скарбничка", 							0);
	ПараметрыBPM7.Вставить("BPMonline_СкарбничкаОтправленна", 				Ложь);
	
	ПараметрыBPM7.Вставить("BPMonline_НеудачнаяРегистрацияКлиента",			Ложь);
	ПараметрыBPM7.Вставить("BPMonline_КартаЗарегистрирована",				Ложь);
	
	//
	Возврат ПараметрыBPM7;
	
КонецФункции

Функция АкционныеСервисы(Сервис)
	
	МассивСервисов = Новый Массив;
	МассивСервисов.Добавить("GetCardBalanceInfo");
	МассивСервисов.Добавить("SetPurchaseInfo");
	Для Каждого эл ИЗ МассивСервисов Цикл 
		Если эл = Сервис Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции	